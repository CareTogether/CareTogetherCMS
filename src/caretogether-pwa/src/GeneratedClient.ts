/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ConfigurationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getOrganizationConfiguration(organizationId: string): Promise<OrganizationConfiguration> {
        let url_ = this.baseUrl + "/api/{organizationId}/Configuration";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrganizationConfiguration(_response);
        });
    }

    protected processGetOrganizationConfiguration(response: Response): Promise<OrganizationConfiguration> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationConfiguration.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrganizationConfiguration>(<any>null);
    }

    getEffectiveLocationPolicy(organizationId: string, locationId: string): Promise<EffectiveLocationPolicy> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Configuration/policy";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEffectiveLocationPolicy(_response);
        });
    }

    protected processGetEffectiveLocationPolicy(response: Response): Promise<EffectiveLocationPolicy> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EffectiveLocationPolicy.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EffectiveLocationPolicy>(<any>null);
    }
}

export class FilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getReadValetUrl(organizationId: string, locationId: string, documentId: string): Promise<string> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Files/{documentId}";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReadValetUrl(_response);
        });
    }

    protected processGetReadValetUrl(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    generateUploadValetUrl(organizationId: string, locationId: string): Promise<DocumentUploadInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Files/upload";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateUploadValetUrl(_response);
        });
    }

    protected processGenerateUploadValetUrl(response: Response): Promise<DocumentUploadInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentUploadInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentUploadInfo>(<any>null);
    }
}

export class ReferralsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listAllReferrals(organizationId: string, locationId: string): Promise<Referral[]> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListAllReferrals(_response);
        });
    }

    protected processListAllReferrals(response: Response): Promise<Referral[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Referral.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral[]>(<any>null);
    }

    submitReferralCommand(organizationId: string, locationId: string, command: ReferralCommand): Promise<Referral> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/referralCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitReferralCommand(_response);
        });
    }

    protected processSubmitReferralCommand(response: Response): Promise<Referral> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Referral.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral>(<any>null);
    }

    submitArrangementCommand(organizationId: string, locationId: string, command: ArrangementCommand): Promise<Referral> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/arrangementCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitArrangementCommand(_response);
        });
    }

    protected processSubmitArrangementCommand(response: Response): Promise<Referral> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Referral.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral>(<any>null);
    }

    submitArrangementNoteCommand(organizationId: string, locationId: string, command: ArrangementNoteCommand): Promise<Referral> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/arrangementNoteCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitArrangementNoteCommand(_response);
        });
    }

    protected processSubmitArrangementNoteCommand(response: Response): Promise<Referral> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Referral.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral>(<any>null);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getUserTenantAccess(): Promise<UserTenantAccessSummary> {
        let url_ = this.baseUrl + "/api/Users/me/tenantAccess";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserTenantAccess(_response);
        });
    }

    protected processGetUserTenantAccess(response: Response): Promise<UserTenantAccessSummary> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserTenantAccessSummary.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserTenantAccessSummary>(<any>null);
    }
}

export class VolunteerFamiliesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listAllVolunteerFamilies(organizationId: string, locationId: string): Promise<VolunteerFamily[]> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListAllVolunteerFamilies(_response);
        });
    }

    protected processListAllVolunteerFamilies(response: Response): Promise<VolunteerFamily[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VolunteerFamily.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily[]>(<any>null);
    }

    submitVolunteerFamilyCommand(organizationId: string, locationId: string, command: VolunteerFamilyCommand): Promise<VolunteerFamily> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies/volunteerFamilyCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitVolunteerFamilyCommand(_response);
        });
    }

    protected processSubmitVolunteerFamilyCommand(response: Response): Promise<VolunteerFamily> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VolunteerFamily.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily>(<any>null);
    }

    submitVolunteerCommand(organizationId: string, locationId: string, command: VolunteerCommand): Promise<VolunteerFamily> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies/volunteerCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitVolunteerCommand(_response);
        });
    }

    protected processSubmitVolunteerCommand(response: Response): Promise<VolunteerFamily> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VolunteerFamily.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily>(<any>null);
    }

    submitApprovalCommand(organizationId: string, locationId: string, command: ApprovalCommand): Promise<VolunteerFamily> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies/addAdult";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitApprovalCommand(_response);
        });
    }

    protected processSubmitApprovalCommand(response: Response): Promise<VolunteerFamily> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VolunteerFamily.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily>(<any>null);
    }

    submitPersonCommand(organizationId: string, locationId: string, familyId: string | undefined, command: PersonCommand): Promise<VolunteerFamily> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies/personCommand?";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        if (familyId === null)
            throw new Error("The parameter 'familyId' cannot be null.");
        else if (familyId !== undefined)
            url_ += "familyId=" + encodeURIComponent("" + familyId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitPersonCommand(_response);
        });
    }

    protected processSubmitPersonCommand(response: Response): Promise<VolunteerFamily> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VolunteerFamily.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily>(<any>null);
    }
}

export class OrganizationConfiguration implements IOrganizationConfiguration {
    organizationName?: string;
    locations?: LocationConfiguration[];
    users?: { [key: string]: UserAccessConfiguration; };

    constructor(data?: IOrganizationConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationName = _data["organizationName"];
            if (Array.isArray(_data["locations"])) {
                this.locations = [] as any;
                for (let item of _data["locations"])
                    this.locations!.push(LocationConfiguration.fromJS(item));
            }
            if (_data["users"]) {
                this.users = {} as any;
                for (let key in _data["users"]) {
                    if (_data["users"].hasOwnProperty(key))
                        (<any>this.users)![key] = _data["users"][key] ? UserAccessConfiguration.fromJS(_data["users"][key]) : new UserAccessConfiguration();
                }
            }
        }
    }

    static fromJS(data: any): OrganizationConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationName"] = this.organizationName;
        if (Array.isArray(this.locations)) {
            data["locations"] = [];
            for (let item of this.locations)
                data["locations"].push(item.toJSON());
        }
        if (this.users) {
            data["users"] = {};
            for (let key in this.users) {
                if (this.users.hasOwnProperty(key))
                    (<any>data["users"])[key] = this.users[key] ? this.users[key].toJSON() : <any>undefined;
            }
        }
        return data; 
    }
}

export interface IOrganizationConfiguration {
    organizationName?: string;
    locations?: LocationConfiguration[];
    users?: { [key: string]: UserAccessConfiguration; };
}

export class LocationConfiguration implements ILocationConfiguration {
    id?: string;
    name?: string;
    ethnicities?: string[];
    adultFamilyRelationships?: string[];

    constructor(data?: ILocationConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["ethnicities"])) {
                this.ethnicities = [] as any;
                for (let item of _data["ethnicities"])
                    this.ethnicities!.push(item);
            }
            if (Array.isArray(_data["adultFamilyRelationships"])) {
                this.adultFamilyRelationships = [] as any;
                for (let item of _data["adultFamilyRelationships"])
                    this.adultFamilyRelationships!.push(item);
            }
        }
    }

    static fromJS(data: any): LocationConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new LocationConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.ethnicities)) {
            data["ethnicities"] = [];
            for (let item of this.ethnicities)
                data["ethnicities"].push(item);
        }
        if (Array.isArray(this.adultFamilyRelationships)) {
            data["adultFamilyRelationships"] = [];
            for (let item of this.adultFamilyRelationships)
                data["adultFamilyRelationships"].push(item);
        }
        return data; 
    }
}

export interface ILocationConfiguration {
    id?: string;
    name?: string;
    ethnicities?: string[];
    adultFamilyRelationships?: string[];
}

export class UserAccessConfiguration implements IUserAccessConfiguration {
    personId?: string;
    locationRoles?: UserLocationRole[];

    constructor(data?: IUserAccessConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
            if (Array.isArray(_data["locationRoles"])) {
                this.locationRoles = [] as any;
                for (let item of _data["locationRoles"])
                    this.locationRoles!.push(UserLocationRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAccessConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new UserAccessConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        if (Array.isArray(this.locationRoles)) {
            data["locationRoles"] = [];
            for (let item of this.locationRoles)
                data["locationRoles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserAccessConfiguration {
    personId?: string;
    locationRoles?: UserLocationRole[];
}

export class UserLocationRole implements IUserLocationRole {
    locationId?: string;
    roleName?: string;

    constructor(data?: IUserLocationRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationId = _data["locationId"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): UserLocationRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserLocationRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId;
        data["roleName"] = this.roleName;
        return data; 
    }
}

export interface IUserLocationRole {
    locationId?: string;
    roleName?: string;
}

export class EffectiveLocationPolicy implements IEffectiveLocationPolicy {
    actionDefinitions?: { [key: string]: ActionRequirement; };
    referralPolicy?: ReferralPolicy;
    volunteerPolicy?: VolunteerPolicy;

    constructor(data?: IEffectiveLocationPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["actionDefinitions"]) {
                this.actionDefinitions = {} as any;
                for (let key in _data["actionDefinitions"]) {
                    if (_data["actionDefinitions"].hasOwnProperty(key))
                        (<any>this.actionDefinitions)![key] = _data["actionDefinitions"][key] ? ActionRequirement.fromJS(_data["actionDefinitions"][key]) : new ActionRequirement();
                }
            }
            this.referralPolicy = _data["referralPolicy"] ? ReferralPolicy.fromJS(_data["referralPolicy"]) : <any>undefined;
            this.volunteerPolicy = _data["volunteerPolicy"] ? VolunteerPolicy.fromJS(_data["volunteerPolicy"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EffectiveLocationPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new EffectiveLocationPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.actionDefinitions) {
            data["actionDefinitions"] = {};
            for (let key in this.actionDefinitions) {
                if (this.actionDefinitions.hasOwnProperty(key))
                    (<any>data["actionDefinitions"])[key] = this.actionDefinitions[key] ? this.actionDefinitions[key].toJSON() : <any>undefined;
            }
        }
        data["referralPolicy"] = this.referralPolicy ? this.referralPolicy.toJSON() : <any>undefined;
        data["volunteerPolicy"] = this.volunteerPolicy ? this.volunteerPolicy.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEffectiveLocationPolicy {
    actionDefinitions?: { [key: string]: ActionRequirement; };
    referralPolicy?: ReferralPolicy;
    volunteerPolicy?: VolunteerPolicy;
}

export class ActionRequirement implements IActionRequirement {
    documentLink?: DocumentLinkRequirement;
    instructions?: string | undefined;
    infoLink?: string | undefined;

    constructor(data?: IActionRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentLink = _data["documentLink"];
            this.instructions = _data["instructions"];
            this.infoLink = _data["infoLink"];
        }
    }

    static fromJS(data: any): ActionRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new ActionRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentLink"] = this.documentLink;
        data["instructions"] = this.instructions;
        data["infoLink"] = this.infoLink;
        return data; 
    }
}

export interface IActionRequirement {
    documentLink?: DocumentLinkRequirement;
    instructions?: string | undefined;
    infoLink?: string | undefined;
}

export enum DocumentLinkRequirement {
    None = 0,
    Allowed = 1,
}

export class ReferralPolicy implements IReferralPolicy {
    requiredIntakeActionNames?: string[];
    arrangementPolicies?: ArrangementPolicy[];

    constructor(data?: IReferralPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["requiredIntakeActionNames"])) {
                this.requiredIntakeActionNames = [] as any;
                for (let item of _data["requiredIntakeActionNames"])
                    this.requiredIntakeActionNames!.push(item);
            }
            if (Array.isArray(_data["arrangementPolicies"])) {
                this.arrangementPolicies = [] as any;
                for (let item of _data["arrangementPolicies"])
                    this.arrangementPolicies!.push(ArrangementPolicy.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReferralPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new ReferralPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.requiredIntakeActionNames)) {
            data["requiredIntakeActionNames"] = [];
            for (let item of this.requiredIntakeActionNames)
                data["requiredIntakeActionNames"].push(item);
        }
        if (Array.isArray(this.arrangementPolicies)) {
            data["arrangementPolicies"] = [];
            for (let item of this.arrangementPolicies)
                data["arrangementPolicies"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReferralPolicy {
    requiredIntakeActionNames?: string[];
    arrangementPolicies?: ArrangementPolicy[];
}

export class ArrangementPolicy implements IArrangementPolicy {
    arrangementType?: string;
    childInvolvement?: ChildInvolvement;
    volunteerFunctions?: VolunteerFunction[];
    requiredSetupActionNames?: string[];
    requiredMonitoringActionNames?: ValueTupleOfStringAndRecurrencePolicy[];
    requiredCloseoutActionNames?: string[];

    constructor(data?: IArrangementPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.arrangementType = _data["arrangementType"];
            this.childInvolvement = _data["childInvolvement"];
            if (Array.isArray(_data["volunteerFunctions"])) {
                this.volunteerFunctions = [] as any;
                for (let item of _data["volunteerFunctions"])
                    this.volunteerFunctions!.push(VolunteerFunction.fromJS(item));
            }
            if (Array.isArray(_data["requiredSetupActionNames"])) {
                this.requiredSetupActionNames = [] as any;
                for (let item of _data["requiredSetupActionNames"])
                    this.requiredSetupActionNames!.push(item);
            }
            if (Array.isArray(_data["requiredMonitoringActionNames"])) {
                this.requiredMonitoringActionNames = [] as any;
                for (let item of _data["requiredMonitoringActionNames"])
                    this.requiredMonitoringActionNames!.push(ValueTupleOfStringAndRecurrencePolicy.fromJS(item));
            }
            if (Array.isArray(_data["requiredCloseoutActionNames"])) {
                this.requiredCloseoutActionNames = [] as any;
                for (let item of _data["requiredCloseoutActionNames"])
                    this.requiredCloseoutActionNames!.push(item);
            }
        }
    }

    static fromJS(data: any): ArrangementPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new ArrangementPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrangementType"] = this.arrangementType;
        data["childInvolvement"] = this.childInvolvement;
        if (Array.isArray(this.volunteerFunctions)) {
            data["volunteerFunctions"] = [];
            for (let item of this.volunteerFunctions)
                data["volunteerFunctions"].push(item.toJSON());
        }
        if (Array.isArray(this.requiredSetupActionNames)) {
            data["requiredSetupActionNames"] = [];
            for (let item of this.requiredSetupActionNames)
                data["requiredSetupActionNames"].push(item);
        }
        if (Array.isArray(this.requiredMonitoringActionNames)) {
            data["requiredMonitoringActionNames"] = [];
            for (let item of this.requiredMonitoringActionNames)
                data["requiredMonitoringActionNames"].push(item.toJSON());
        }
        if (Array.isArray(this.requiredCloseoutActionNames)) {
            data["requiredCloseoutActionNames"] = [];
            for (let item of this.requiredCloseoutActionNames)
                data["requiredCloseoutActionNames"].push(item);
        }
        return data; 
    }
}

export interface IArrangementPolicy {
    arrangementType?: string;
    childInvolvement?: ChildInvolvement;
    volunteerFunctions?: VolunteerFunction[];
    requiredSetupActionNames?: string[];
    requiredMonitoringActionNames?: ValueTupleOfStringAndRecurrencePolicy[];
    requiredCloseoutActionNames?: string[];
}

export enum ChildInvolvement {
    ChildHousing = 0,
    DaytimeChildCareOnly = 1,
    NoChildInvolvement = 2,
}

export class VolunteerFunction implements IVolunteerFunction {
    arrangementFunction?: string;
    requirement?: FunctionRequirement;
    eligibleIndividualVolunteerRoles?: string[];
    eligibleVolunteerFamilyRoles?: string[];

    constructor(data?: IVolunteerFunction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.arrangementFunction = _data["arrangementFunction"];
            this.requirement = _data["requirement"];
            if (Array.isArray(_data["eligibleIndividualVolunteerRoles"])) {
                this.eligibleIndividualVolunteerRoles = [] as any;
                for (let item of _data["eligibleIndividualVolunteerRoles"])
                    this.eligibleIndividualVolunteerRoles!.push(item);
            }
            if (Array.isArray(_data["eligibleVolunteerFamilyRoles"])) {
                this.eligibleVolunteerFamilyRoles = [] as any;
                for (let item of _data["eligibleVolunteerFamilyRoles"])
                    this.eligibleVolunteerFamilyRoles!.push(item);
            }
        }
    }

    static fromJS(data: any): VolunteerFunction {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFunction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrangementFunction"] = this.arrangementFunction;
        data["requirement"] = this.requirement;
        if (Array.isArray(this.eligibleIndividualVolunteerRoles)) {
            data["eligibleIndividualVolunteerRoles"] = [];
            for (let item of this.eligibleIndividualVolunteerRoles)
                data["eligibleIndividualVolunteerRoles"].push(item);
        }
        if (Array.isArray(this.eligibleVolunteerFamilyRoles)) {
            data["eligibleVolunteerFamilyRoles"] = [];
            for (let item of this.eligibleVolunteerFamilyRoles)
                data["eligibleVolunteerFamilyRoles"].push(item);
        }
        return data; 
    }
}

export interface IVolunteerFunction {
    arrangementFunction?: string;
    requirement?: FunctionRequirement;
    eligibleIndividualVolunteerRoles?: string[];
    eligibleVolunteerFamilyRoles?: string[];
}

export enum FunctionRequirement {
    ZeroOrMore = 0,
    ExactlyOne = 1,
    OneOrMore = 2,
}

export class ValueTupleOfStringAndRecurrencePolicy implements IValueTupleOfStringAndRecurrencePolicy {
    item1?: string;
    item2?: RecurrencePolicy;

    constructor(data?: IValueTupleOfStringAndRecurrencePolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"];
            this.item2 = _data["item2"] ? RecurrencePolicy.fromJS(_data["item2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValueTupleOfStringAndRecurrencePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfStringAndRecurrencePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IValueTupleOfStringAndRecurrencePolicy {
    item1?: string;
    item2?: RecurrencePolicy;
}

export class RecurrencePolicy implements IRecurrencePolicy {
    stages?: RecurrencePolicyStage[];

    constructor(data?: IRecurrencePolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["stages"])) {
                this.stages = [] as any;
                for (let item of _data["stages"])
                    this.stages!.push(RecurrencePolicyStage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecurrencePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new RecurrencePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.stages)) {
            data["stages"] = [];
            for (let item of this.stages)
                data["stages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRecurrencePolicy {
    stages?: RecurrencePolicyStage[];
}

export class RecurrencePolicyStage implements IRecurrencePolicyStage {
    delay?: string;
    maxOccurrences?: number | undefined;

    constructor(data?: IRecurrencePolicyStage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.delay = _data["delay"];
            this.maxOccurrences = _data["maxOccurrences"];
        }
    }

    static fromJS(data: any): RecurrencePolicyStage {
        data = typeof data === 'object' ? data : {};
        let result = new RecurrencePolicyStage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["delay"] = this.delay;
        data["maxOccurrences"] = this.maxOccurrences;
        return data; 
    }
}

export interface IRecurrencePolicyStage {
    delay?: string;
    maxOccurrences?: number | undefined;
}

export class VolunteerPolicy implements IVolunteerPolicy {
    volunteerRoles?: { [key: string]: VolunteerRolePolicy; };
    volunteerFamilyRoles?: { [key: string]: VolunteerFamilyRolePolicy; };

    constructor(data?: IVolunteerPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["volunteerRoles"]) {
                this.volunteerRoles = {} as any;
                for (let key in _data["volunteerRoles"]) {
                    if (_data["volunteerRoles"].hasOwnProperty(key))
                        (<any>this.volunteerRoles)![key] = _data["volunteerRoles"][key] ? VolunteerRolePolicy.fromJS(_data["volunteerRoles"][key]) : new VolunteerRolePolicy();
                }
            }
            if (_data["volunteerFamilyRoles"]) {
                this.volunteerFamilyRoles = {} as any;
                for (let key in _data["volunteerFamilyRoles"]) {
                    if (_data["volunteerFamilyRoles"].hasOwnProperty(key))
                        (<any>this.volunteerFamilyRoles)![key] = _data["volunteerFamilyRoles"][key] ? VolunteerFamilyRolePolicy.fromJS(_data["volunteerFamilyRoles"][key]) : new VolunteerFamilyRolePolicy();
                }
            }
        }
    }

    static fromJS(data: any): VolunteerPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.volunteerRoles) {
            data["volunteerRoles"] = {};
            for (let key in this.volunteerRoles) {
                if (this.volunteerRoles.hasOwnProperty(key))
                    (<any>data["volunteerRoles"])[key] = this.volunteerRoles[key] ? this.volunteerRoles[key].toJSON() : <any>undefined;
            }
        }
        if (this.volunteerFamilyRoles) {
            data["volunteerFamilyRoles"] = {};
            for (let key in this.volunteerFamilyRoles) {
                if (this.volunteerFamilyRoles.hasOwnProperty(key))
                    (<any>data["volunteerFamilyRoles"])[key] = this.volunteerFamilyRoles[key] ? this.volunteerFamilyRoles[key].toJSON() : <any>undefined;
            }
        }
        return data; 
    }
}

export interface IVolunteerPolicy {
    volunteerRoles?: { [key: string]: VolunteerRolePolicy; };
    volunteerFamilyRoles?: { [key: string]: VolunteerFamilyRolePolicy; };
}

export class VolunteerRolePolicy implements IVolunteerRolePolicy {
    volunteerRoleType?: string;
    policyVersions?: VolunteerRolePolicyVersion[];

    constructor(data?: IVolunteerRolePolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.volunteerRoleType = _data["volunteerRoleType"];
            if (Array.isArray(_data["policyVersions"])) {
                this.policyVersions = [] as any;
                for (let item of _data["policyVersions"])
                    this.policyVersions!.push(VolunteerRolePolicyVersion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerRolePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerRolePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volunteerRoleType"] = this.volunteerRoleType;
        if (Array.isArray(this.policyVersions)) {
            data["policyVersions"] = [];
            for (let item of this.policyVersions)
                data["policyVersions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVolunteerRolePolicy {
    volunteerRoleType?: string;
    policyVersions?: VolunteerRolePolicyVersion[];
}

export class VolunteerRolePolicyVersion implements IVolunteerRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerApprovalRequirement[];

    constructor(data?: IVolunteerRolePolicyVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.supersededAtUtc = _data["supersededAtUtc"] ? new Date(_data["supersededAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["requirements"])) {
                this.requirements = [] as any;
                for (let item of _data["requirements"])
                    this.requirements!.push(VolunteerApprovalRequirement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerRolePolicyVersion {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerRolePolicyVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["supersededAtUtc"] = this.supersededAtUtc ? this.supersededAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.requirements)) {
            data["requirements"] = [];
            for (let item of this.requirements)
                data["requirements"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVolunteerRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerApprovalRequirement[];
}

export class VolunteerApprovalRequirement implements IVolunteerApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;

    constructor(data?: IVolunteerApprovalRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stage = _data["stage"];
            this.actionName = _data["actionName"];
        }
    }

    static fromJS(data: any): VolunteerApprovalRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerApprovalRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stage"] = this.stage;
        data["actionName"] = this.actionName;
        return data; 
    }
}

export interface IVolunteerApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;
}

export enum RequirementStage {
    Application = 0,
    Approval = 1,
    Onboarding = 2,
}

export class VolunteerFamilyRolePolicy implements IVolunteerFamilyRolePolicy {
    volunteerFamilyRoleType?: string;
    policyVersions?: VolunteerFamilyRolePolicyVersion[];

    constructor(data?: IVolunteerFamilyRolePolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.volunteerFamilyRoleType = _data["volunteerFamilyRoleType"];
            if (Array.isArray(_data["policyVersions"])) {
                this.policyVersions = [] as any;
                for (let item of _data["policyVersions"])
                    this.policyVersions!.push(VolunteerFamilyRolePolicyVersion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerFamilyRolePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamilyRolePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volunteerFamilyRoleType"] = this.volunteerFamilyRoleType;
        if (Array.isArray(this.policyVersions)) {
            data["policyVersions"] = [];
            for (let item of this.policyVersions)
                data["policyVersions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVolunteerFamilyRolePolicy {
    volunteerFamilyRoleType?: string;
    policyVersions?: VolunteerFamilyRolePolicyVersion[];
}

export class VolunteerFamilyRolePolicyVersion implements IVolunteerFamilyRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerFamilyApprovalRequirement[];

    constructor(data?: IVolunteerFamilyRolePolicyVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.supersededAtUtc = _data["supersededAtUtc"] ? new Date(_data["supersededAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["requirements"])) {
                this.requirements = [] as any;
                for (let item of _data["requirements"])
                    this.requirements!.push(VolunteerFamilyApprovalRequirement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerFamilyRolePolicyVersion {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamilyRolePolicyVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["supersededAtUtc"] = this.supersededAtUtc ? this.supersededAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.requirements)) {
            data["requirements"] = [];
            for (let item of this.requirements)
                data["requirements"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVolunteerFamilyRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerFamilyApprovalRequirement[];
}

export class VolunteerFamilyApprovalRequirement implements IVolunteerFamilyApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;
    scope?: VolunteerFamilyRequirementScope;

    constructor(data?: IVolunteerFamilyApprovalRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stage = _data["stage"];
            this.actionName = _data["actionName"];
            this.scope = _data["scope"];
        }
    }

    static fromJS(data: any): VolunteerFamilyApprovalRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamilyApprovalRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stage"] = this.stage;
        data["actionName"] = this.actionName;
        data["scope"] = this.scope;
        return data; 
    }
}

export interface IVolunteerFamilyApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;
    scope?: VolunteerFamilyRequirementScope;
}

export enum VolunteerFamilyRequirementScope {
    OncePerFamily = 0,
    AllAdultsInTheFamily = 1,
}

export class DocumentUploadInfo implements IDocumentUploadInfo {
    documentId?: string;
    valetUrl?: string;

    constructor(data?: IDocumentUploadInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentId = _data["documentId"];
            this.valetUrl = _data["valetUrl"];
        }
    }

    static fromJS(data: any): DocumentUploadInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentUploadInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["valetUrl"] = this.valetUrl;
        return data; 
    }
}

export interface IDocumentUploadInfo {
    documentId?: string;
    valetUrl?: string;
}

export class Referral implements IReferral {
    id?: string;
    policyVersion?: string;
    createdUtc?: Date;
    closeReason?: ReferralCloseReason | undefined;
    partneringFamily?: Family;
    contacts?: ContactInfo[];
    referralFormUploads?: FormUploadInfo[];
    referralActivitiesPerformed?: ActivityInfo[];
    arrangements?: Arrangement[];

    constructor(data?: IReferral) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.policyVersion = _data["policyVersion"];
            this.createdUtc = _data["createdUtc"] ? new Date(_data["createdUtc"].toString()) : <any>undefined;
            this.closeReason = _data["closeReason"];
            this.partneringFamily = _data["partneringFamily"] ? Family.fromJS(_data["partneringFamily"]) : <any>undefined;
            if (Array.isArray(_data["contacts"])) {
                this.contacts = [] as any;
                for (let item of _data["contacts"])
                    this.contacts!.push(ContactInfo.fromJS(item));
            }
            if (Array.isArray(_data["referralFormUploads"])) {
                this.referralFormUploads = [] as any;
                for (let item of _data["referralFormUploads"])
                    this.referralFormUploads!.push(FormUploadInfo.fromJS(item));
            }
            if (Array.isArray(_data["referralActivitiesPerformed"])) {
                this.referralActivitiesPerformed = [] as any;
                for (let item of _data["referralActivitiesPerformed"])
                    this.referralActivitiesPerformed!.push(ActivityInfo.fromJS(item));
            }
            if (Array.isArray(_data["arrangements"])) {
                this.arrangements = [] as any;
                for (let item of _data["arrangements"])
                    this.arrangements!.push(Arrangement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Referral {
        data = typeof data === 'object' ? data : {};
        let result = new Referral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["policyVersion"] = this.policyVersion;
        data["createdUtc"] = this.createdUtc ? this.createdUtc.toISOString() : <any>undefined;
        data["closeReason"] = this.closeReason;
        data["partneringFamily"] = this.partneringFamily ? this.partneringFamily.toJSON() : <any>undefined;
        if (Array.isArray(this.contacts)) {
            data["contacts"] = [];
            for (let item of this.contacts)
                data["contacts"].push(item.toJSON());
        }
        if (Array.isArray(this.referralFormUploads)) {
            data["referralFormUploads"] = [];
            for (let item of this.referralFormUploads)
                data["referralFormUploads"].push(item.toJSON());
        }
        if (Array.isArray(this.referralActivitiesPerformed)) {
            data["referralActivitiesPerformed"] = [];
            for (let item of this.referralActivitiesPerformed)
                data["referralActivitiesPerformed"].push(item.toJSON());
        }
        if (Array.isArray(this.arrangements)) {
            data["arrangements"] = [];
            for (let item of this.arrangements)
                data["arrangements"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReferral {
    id?: string;
    policyVersion?: string;
    createdUtc?: Date;
    closeReason?: ReferralCloseReason | undefined;
    partneringFamily?: Family;
    contacts?: ContactInfo[];
    referralFormUploads?: FormUploadInfo[];
    referralActivitiesPerformed?: ActivityInfo[];
    arrangements?: Arrangement[];
}

export enum ReferralCloseReason {
    NotAppropriate = 0,
    Resourced = 1,
    NoCapacity = 2,
    NoLongerNeeded = 3,
    NeedMet = 4,
}

export class Family implements IFamily {
    id?: string;
    primaryFamilyContactPersonId?: string;
    adults?: ValueTupleOfPersonAndFamilyAdultRelationshipInfo[];
    children?: Person[];
    custodialRelationships?: CustodialRelationship[];

    constructor(data?: IFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.primaryFamilyContactPersonId = _data["primaryFamilyContactPersonId"];
            if (Array.isArray(_data["adults"])) {
                this.adults = [] as any;
                for (let item of _data["adults"])
                    this.adults!.push(ValueTupleOfPersonAndFamilyAdultRelationshipInfo.fromJS(item));
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Person.fromJS(item));
            }
            if (Array.isArray(_data["custodialRelationships"])) {
                this.custodialRelationships = [] as any;
                for (let item of _data["custodialRelationships"])
                    this.custodialRelationships!.push(CustodialRelationship.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Family {
        data = typeof data === 'object' ? data : {};
        let result = new Family();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["primaryFamilyContactPersonId"] = this.primaryFamilyContactPersonId;
        if (Array.isArray(this.adults)) {
            data["adults"] = [];
            for (let item of this.adults)
                data["adults"].push(item.toJSON());
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.custodialRelationships)) {
            data["custodialRelationships"] = [];
            for (let item of this.custodialRelationships)
                data["custodialRelationships"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFamily {
    id?: string;
    primaryFamilyContactPersonId?: string;
    adults?: ValueTupleOfPersonAndFamilyAdultRelationshipInfo[];
    children?: Person[];
    custodialRelationships?: CustodialRelationship[];
}

export class ValueTupleOfPersonAndFamilyAdultRelationshipInfo implements IValueTupleOfPersonAndFamilyAdultRelationshipInfo {
    item1?: Person;
    item2?: FamilyAdultRelationshipInfo;

    constructor(data?: IValueTupleOfPersonAndFamilyAdultRelationshipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            this.item2 = _data["item2"] ? FamilyAdultRelationshipInfo.fromJS(_data["item2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValueTupleOfPersonAndFamilyAdultRelationshipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfPersonAndFamilyAdultRelationshipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IValueTupleOfPersonAndFamilyAdultRelationshipInfo {
    item1?: Person;
    item2?: FamilyAdultRelationshipInfo;
}

export class Person implements IPerson {
    id?: string;
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    concerns?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IPerson {
    id?: string;
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    concerns?: string | undefined;
    notes?: string | undefined;
}

export enum Gender {
    Male = 0,
    Female = 1,
    SeeNotes = 2,
}

export abstract class Age implements IAge {

    protected _discriminator: string;

    constructor(data?: IAge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Age";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Age {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AgeInYears") {
            let result = new AgeInYears();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExactAge") {
            let result = new ExactAge();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'Age' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        return data; 
    }
}

export interface IAge {
}

export class AgeInYears extends Age implements IAgeInYears {
    years?: number;
    asOf?: Date;

    constructor(data?: IAgeInYears) {
        super(data);
        this._discriminator = "AgeInYears";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.years = _data["years"];
            this.asOf = _data["asOf"] ? new Date(_data["asOf"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AgeInYears {
        data = typeof data === 'object' ? data : {};
        let result = new AgeInYears();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["years"] = this.years;
        data["asOf"] = this.asOf ? this.asOf.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IAgeInYears extends IAge {
    years?: number;
    asOf?: Date;
}

export class ExactAge extends Age implements IExactAge {
    dateOfBirth?: Date;

    constructor(data?: IExactAge) {
        super(data);
        this._discriminator = "ExactAge";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExactAge {
        data = typeof data === 'object' ? data : {};
        let result = new ExactAge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IExactAge extends IAge {
    dateOfBirth?: Date;
}

export class FamilyAdultRelationshipInfo implements IFamilyAdultRelationshipInfo {
    relationshipToFamily?: string;
    isInHousehold?: boolean;

    constructor(data?: IFamilyAdultRelationshipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relationshipToFamily = _data["relationshipToFamily"];
            this.isInHousehold = _data["isInHousehold"];
        }
    }

    static fromJS(data: any): FamilyAdultRelationshipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyAdultRelationshipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationshipToFamily"] = this.relationshipToFamily;
        data["isInHousehold"] = this.isInHousehold;
        return data; 
    }
}

export interface IFamilyAdultRelationshipInfo {
    relationshipToFamily?: string;
    isInHousehold?: boolean;
}

export class CustodialRelationship implements ICustodialRelationship {
    childId?: string;
    personId?: string;
    type?: CustodialRelationshipType;

    constructor(data?: ICustodialRelationship) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.childId = _data["childId"];
            this.personId = _data["personId"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CustodialRelationship {
        data = typeof data === 'object' ? data : {};
        let result = new CustodialRelationship();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childId"] = this.childId;
        data["personId"] = this.personId;
        data["type"] = this.type;
        return data; 
    }
}

export interface ICustodialRelationship {
    childId?: string;
    personId?: string;
    type?: CustodialRelationshipType;
}

export enum CustodialRelationshipType {
    ParentWithCustody = 0,
    ParentWithCourtAppointedCustody = 1,
    LegalGuardian = 2,
}

export class ContactInfo implements IContactInfo {
    personId?: string;
    addresses?: Address[];
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[];
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[];
    preferredEmailAddressId?: string | undefined;
    contactMethodPreferenceNotes?: string | undefined;

    constructor(data?: IContactInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            this.currentAddressId = _data["currentAddressId"];
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(PhoneNumber.fromJS(item));
            }
            this.preferredPhoneNumberId = _data["preferredPhoneNumberId"];
            if (Array.isArray(_data["emailAddresses"])) {
                this.emailAddresses = [] as any;
                for (let item of _data["emailAddresses"])
                    this.emailAddresses!.push(EmailAddress.fromJS(item));
            }
            this.preferredEmailAddressId = _data["preferredEmailAddressId"];
            this.contactMethodPreferenceNotes = _data["contactMethodPreferenceNotes"];
        }
    }

    static fromJS(data: any): ContactInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ContactInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["currentAddressId"] = this.currentAddressId;
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item.toJSON());
        }
        data["preferredPhoneNumberId"] = this.preferredPhoneNumberId;
        if (Array.isArray(this.emailAddresses)) {
            data["emailAddresses"] = [];
            for (let item of this.emailAddresses)
                data["emailAddresses"].push(item.toJSON());
        }
        data["preferredEmailAddressId"] = this.preferredEmailAddressId;
        data["contactMethodPreferenceNotes"] = this.contactMethodPreferenceNotes;
        return data; 
    }
}

export interface IContactInfo {
    personId?: string;
    addresses?: Address[];
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[];
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[];
    preferredEmailAddressId?: string | undefined;
    contactMethodPreferenceNotes?: string | undefined;
}

export class Address implements IAddress {
    id?: string;
    line1?: string;
    line2?: string | undefined;
    city?: string;
    state?: string;
    postalCode?: string;
    country?: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress {
    id?: string;
    line1?: string;
    line2?: string | undefined;
    city?: string;
    state?: string;
    postalCode?: string;
    country?: string;
}

export class PhoneNumber implements IPhoneNumber {
    id?: string;
    number?: string;
    type?: PhoneNumberType;

    constructor(data?: IPhoneNumber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.number = _data["number"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): PhoneNumber {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["number"] = this.number;
        data["type"] = this.type;
        return data; 
    }
}

export interface IPhoneNumber {
    id?: string;
    number?: string;
    type?: PhoneNumberType;
}

export enum PhoneNumberType {
    Mobile = 0,
    Home = 1,
    Work = 2,
    Fax = 3,
}

export class EmailAddress implements IEmailAddress {
    id?: string;
    address?: string;
    type?: EmailAddressType;

    constructor(data?: IEmailAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address = _data["address"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): EmailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new EmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["type"] = this.type;
        return data; 
    }
}

export interface IEmailAddress {
    id?: string;
    address?: string;
    type?: EmailAddressType;
}

export enum EmailAddressType {
    Personal = 0,
    Work = 1,
}

export class FormUploadInfo implements IFormUploadInfo {
    userId?: string;
    timestampUtc?: Date;
    completedAtUtc?: Date;
    formName?: string;
    originalFileName?: string;
    uploadedDocumentId?: string;

    constructor(data?: IFormUploadInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.formName = _data["formName"];
            this.originalFileName = _data["originalFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): FormUploadInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FormUploadInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["formName"] = this.formName;
        data["originalFileName"] = this.originalFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        return data; 
    }
}

export interface IFormUploadInfo {
    userId?: string;
    timestampUtc?: Date;
    completedAtUtc?: Date;
    formName?: string;
    originalFileName?: string;
    uploadedDocumentId?: string;
}

export class ActivityInfo implements IActivityInfo {
    userId?: string;
    timestampUtc?: Date;
    activityName?: string;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IActivityInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): ActivityInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ActivityInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        return data; 
    }
}

export interface IActivityInfo {
    userId?: string;
    timestampUtc?: Date;
    activityName?: string;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class Arrangement implements IArrangement {
    id?: string;
    policyVersion?: string;
    arrangementType?: string;
    state?: ArrangementState;
    arrangementFormUploads?: FormUploadInfo[];
    arrangementActivitiesPerformed?: ActivityInfo[];
    volunteerAssignments?: VolunteerAssignment[];
    partneringFamilyChildAssignments?: PartneringFamilyChildAssignment[];
    childrenLocationHistory?: ChildrenLocationHistoryEntry[];
    notes?: Note[];

    constructor(data?: IArrangement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.policyVersion = _data["policyVersion"];
            this.arrangementType = _data["arrangementType"];
            this.state = _data["state"];
            if (Array.isArray(_data["arrangementFormUploads"])) {
                this.arrangementFormUploads = [] as any;
                for (let item of _data["arrangementFormUploads"])
                    this.arrangementFormUploads!.push(FormUploadInfo.fromJS(item));
            }
            if (Array.isArray(_data["arrangementActivitiesPerformed"])) {
                this.arrangementActivitiesPerformed = [] as any;
                for (let item of _data["arrangementActivitiesPerformed"])
                    this.arrangementActivitiesPerformed!.push(ActivityInfo.fromJS(item));
            }
            if (Array.isArray(_data["volunteerAssignments"])) {
                this.volunteerAssignments = [] as any;
                for (let item of _data["volunteerAssignments"])
                    this.volunteerAssignments!.push(VolunteerAssignment.fromJS(item));
            }
            if (Array.isArray(_data["partneringFamilyChildAssignments"])) {
                this.partneringFamilyChildAssignments = [] as any;
                for (let item of _data["partneringFamilyChildAssignments"])
                    this.partneringFamilyChildAssignments!.push(PartneringFamilyChildAssignment.fromJS(item));
            }
            if (Array.isArray(_data["childrenLocationHistory"])) {
                this.childrenLocationHistory = [] as any;
                for (let item of _data["childrenLocationHistory"])
                    this.childrenLocationHistory!.push(ChildrenLocationHistoryEntry.fromJS(item));
            }
            if (Array.isArray(_data["notes"])) {
                this.notes = [] as any;
                for (let item of _data["notes"])
                    this.notes!.push(Note.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Arrangement {
        data = typeof data === 'object' ? data : {};
        let result = new Arrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["policyVersion"] = this.policyVersion;
        data["arrangementType"] = this.arrangementType;
        data["state"] = this.state;
        if (Array.isArray(this.arrangementFormUploads)) {
            data["arrangementFormUploads"] = [];
            for (let item of this.arrangementFormUploads)
                data["arrangementFormUploads"].push(item.toJSON());
        }
        if (Array.isArray(this.arrangementActivitiesPerformed)) {
            data["arrangementActivitiesPerformed"] = [];
            for (let item of this.arrangementActivitiesPerformed)
                data["arrangementActivitiesPerformed"].push(item.toJSON());
        }
        if (Array.isArray(this.volunteerAssignments)) {
            data["volunteerAssignments"] = [];
            for (let item of this.volunteerAssignments)
                data["volunteerAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.partneringFamilyChildAssignments)) {
            data["partneringFamilyChildAssignments"] = [];
            for (let item of this.partneringFamilyChildAssignments)
                data["partneringFamilyChildAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.childrenLocationHistory)) {
            data["childrenLocationHistory"] = [];
            for (let item of this.childrenLocationHistory)
                data["childrenLocationHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IArrangement {
    id?: string;
    policyVersion?: string;
    arrangementType?: string;
    state?: ArrangementState;
    arrangementFormUploads?: FormUploadInfo[];
    arrangementActivitiesPerformed?: ActivityInfo[];
    volunteerAssignments?: VolunteerAssignment[];
    partneringFamilyChildAssignments?: PartneringFamilyChildAssignment[];
    childrenLocationHistory?: ChildrenLocationHistoryEntry[];
    notes?: Note[];
}

export enum ArrangementState {
    Setup = 0,
    Open = 1,
    Closed = 2,
}

export abstract class VolunteerAssignment implements IVolunteerAssignment {
    arrangementFunction?: string;

    protected _discriminator: string;

    constructor(data?: IVolunteerAssignment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerAssignment";
    }

    init(_data?: any) {
        if (_data) {
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): VolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "FamilyVolunteerAssignment") {
            let result = new FamilyVolunteerAssignment();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "IndividualVolunteerAssignment") {
            let result = new IndividualVolunteerAssignment();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerAssignment' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["arrangementFunction"] = this.arrangementFunction;
        return data; 
    }
}

export interface IVolunteerAssignment {
    arrangementFunction?: string;
}

export class FamilyVolunteerAssignment extends VolunteerAssignment implements IFamilyVolunteerAssignment {
    familyId?: string;

    constructor(data?: IFamilyVolunteerAssignment) {
        super(data);
        this._discriminator = "FamilyVolunteerAssignment";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): FamilyVolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyVolunteerAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        super.toJSON(data);
        return data; 
    }
}

export interface IFamilyVolunteerAssignment extends IVolunteerAssignment {
    familyId?: string;
}

export class IndividualVolunteerAssignment extends VolunteerAssignment implements IIndividualVolunteerAssignment {
    personId?: string;

    constructor(data?: IIndividualVolunteerAssignment) {
        super(data);
        this._discriminator = "IndividualVolunteerAssignment";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): IndividualVolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new IndividualVolunteerAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        super.toJSON(data);
        return data; 
    }
}

export interface IIndividualVolunteerAssignment extends IVolunteerAssignment {
    personId?: string;
}

export class PartneringFamilyChildAssignment implements IPartneringFamilyChildAssignment {
    personId?: string;

    constructor(data?: IPartneringFamilyChildAssignment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): PartneringFamilyChildAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new PartneringFamilyChildAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        return data; 
    }
}

export interface IPartneringFamilyChildAssignment {
    personId?: string;
}

export class ChildrenLocationHistoryEntry implements IChildrenLocationHistoryEntry {
    userId?: string;
    timestampUtc?: Date;
    childrenIds?: string[];
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string;

    constructor(data?: IChildrenLocationHistoryEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["childrenIds"])) {
                this.childrenIds = [] as any;
                for (let item of _data["childrenIds"])
                    this.childrenIds!.push(item);
            }
            this.familyId = _data["familyId"];
            this.plan = _data["plan"];
            this.additionalExplanation = _data["additionalExplanation"];
        }
    }

    static fromJS(data: any): ChildrenLocationHistoryEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ChildrenLocationHistoryEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.childrenIds)) {
            data["childrenIds"] = [];
            for (let item of this.childrenIds)
                data["childrenIds"].push(item);
        }
        data["familyId"] = this.familyId;
        data["plan"] = this.plan;
        data["additionalExplanation"] = this.additionalExplanation;
        return data; 
    }
}

export interface IChildrenLocationHistoryEntry {
    userId?: string;
    timestampUtc?: Date;
    childrenIds?: string[];
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string;
}

export enum ChildrenLocationPlan {
    OvernightHousing = 0,
    DaytimeChildCare = 1,
    ReturnToFamily = 2,
}

export class Note implements INote {
    id?: string;
    authorId?: string;
    timestampUtc?: Date;
    contents?: string | undefined;
    status?: NoteStatus;

    constructor(data?: INote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.authorId = _data["authorId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.contents = _data["contents"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Note {
        data = typeof data === 'object' ? data : {};
        let result = new Note();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["authorId"] = this.authorId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["contents"] = this.contents;
        data["status"] = this.status;
        return data; 
    }
}

export interface INote {
    id?: string;
    authorId?: string;
    timestampUtc?: Date;
    contents?: string | undefined;
    status?: NoteStatus;
}

export enum NoteStatus {
    Draft = 0,
    Approved = 1,
}

export abstract class ReferralCommand implements IReferralCommand {
    referralId?: string;

    protected _discriminator: string;

    constructor(data?: IReferralCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ReferralCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.referralId = _data["referralId"];
        }
    }

    static fromJS(data: any): ReferralCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "CloseReferral") {
            let result = new CloseReferral();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateReferral") {
            let result = new CreateReferral();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "PerformReferralActivity") {
            let result = new PerformReferralActivity();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadReferralForm") {
            let result = new UploadReferralForm();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ReferralCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["referralId"] = this.referralId;
        return data; 
    }
}

export interface IReferralCommand {
    referralId?: string;
}

export class CloseReferral extends ReferralCommand implements ICloseReferral {
    closeReason?: ReferralCloseReason;

    constructor(data?: ICloseReferral) {
        super(data);
        this._discriminator = "CloseReferral";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.closeReason = _data["closeReason"];
        }
    }

    static fromJS(data: any): CloseReferral {
        data = typeof data === 'object' ? data : {};
        let result = new CloseReferral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["closeReason"] = this.closeReason;
        super.toJSON(data);
        return data; 
    }
}

export interface ICloseReferral extends IReferralCommand {
    closeReason?: ReferralCloseReason;
}

export class CreateReferral extends ReferralCommand implements ICreateReferral {
    familyId?: string;
    policyVersion?: string;
    openedAtUtc?: Date;

    constructor(data?: ICreateReferral) {
        super(data);
        this._discriminator = "CreateReferral";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.policyVersion = _data["policyVersion"];
            this.openedAtUtc = _data["openedAtUtc"] ? new Date(_data["openedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateReferral {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReferral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["policyVersion"] = this.policyVersion;
        data["openedAtUtc"] = this.openedAtUtc ? this.openedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateReferral extends IReferralCommand {
    familyId?: string;
    policyVersion?: string;
    openedAtUtc?: Date;
}

export class PerformReferralActivity extends ReferralCommand implements IPerformReferralActivity {
    activityName?: string;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IPerformReferralActivity) {
        super(data);
        this._discriminator = "PerformReferralActivity";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): PerformReferralActivity {
        data = typeof data === 'object' ? data : {};
        let result = new PerformReferralActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPerformReferralActivity extends IReferralCommand {
    activityName?: string;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class UploadReferralForm extends ReferralCommand implements IUploadReferralForm {
    completedAtUtc?: Date;
    formName?: string;
    uploadedFileName?: string;
    uploadedDocumentId?: string;

    constructor(data?: IUploadReferralForm) {
        super(data);
        this._discriminator = "UploadReferralForm";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.formName = _data["formName"];
            this.uploadedFileName = _data["uploadedFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): UploadReferralForm {
        data = typeof data === 'object' ? data : {};
        let result = new UploadReferralForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["formName"] = this.formName;
        data["uploadedFileName"] = this.uploadedFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUploadReferralForm extends IReferralCommand {
    completedAtUtc?: Date;
    formName?: string;
    uploadedFileName?: string;
    uploadedDocumentId?: string;
}

export abstract class ArrangementCommand implements IArrangementCommand {
    referralId?: string;
    arrangementId?: string;

    protected _discriminator: string;

    constructor(data?: IArrangementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ArrangementCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.referralId = _data["referralId"];
            this.arrangementId = _data["arrangementId"];
        }
    }

    static fromJS(data: any): ArrangementCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AssignIndividualVolunteer") {
            let result = new AssignIndividualVolunteer();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AssignPartneringFamilyChildren") {
            let result = new AssignPartneringFamilyChildren();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AssignVolunteerFamily") {
            let result = new AssignVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateArrangement") {
            let result = new CreateArrangement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EndArrangement") {
            let result = new EndArrangement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "InitiateArrangement") {
            let result = new InitiateArrangement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "PerformArrangementActivity") {
            let result = new PerformArrangementActivity();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "TrackChildrenLocationChange") {
            let result = new TrackChildrenLocationChange();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadArrangementForm") {
            let result = new UploadArrangementForm();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ArrangementCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["referralId"] = this.referralId;
        data["arrangementId"] = this.arrangementId;
        return data; 
    }
}

export interface IArrangementCommand {
    referralId?: string;
    arrangementId?: string;
}

export class AssignIndividualVolunteer extends ArrangementCommand implements IAssignIndividualVolunteer {
    personId?: string;
    arrangementFunction?: string;

    constructor(data?: IAssignIndividualVolunteer) {
        super(data);
        this._discriminator = "AssignIndividualVolunteer";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.personId = _data["personId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): AssignIndividualVolunteer {
        data = typeof data === 'object' ? data : {};
        let result = new AssignIndividualVolunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        data["arrangementFunction"] = this.arrangementFunction;
        super.toJSON(data);
        return data; 
    }
}

export interface IAssignIndividualVolunteer extends IArrangementCommand {
    personId?: string;
    arrangementFunction?: string;
}

export class AssignPartneringFamilyChildren extends ArrangementCommand implements IAssignPartneringFamilyChildren {
    childrenIds?: string[];

    constructor(data?: IAssignPartneringFamilyChildren) {
        super(data);
        this._discriminator = "AssignPartneringFamilyChildren";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["childrenIds"])) {
                this.childrenIds = [] as any;
                for (let item of _data["childrenIds"])
                    this.childrenIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AssignPartneringFamilyChildren {
        data = typeof data === 'object' ? data : {};
        let result = new AssignPartneringFamilyChildren();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.childrenIds)) {
            data["childrenIds"] = [];
            for (let item of this.childrenIds)
                data["childrenIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAssignPartneringFamilyChildren extends IArrangementCommand {
    childrenIds?: string[];
}

export class AssignVolunteerFamily extends ArrangementCommand implements IAssignVolunteerFamily {
    familyId?: string;
    arrangementFunction?: string;

    constructor(data?: IAssignVolunteerFamily) {
        super(data);
        this._discriminator = "AssignVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): AssignVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new AssignVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["arrangementFunction"] = this.arrangementFunction;
        super.toJSON(data);
        return data; 
    }
}

export interface IAssignVolunteerFamily extends IArrangementCommand {
    familyId?: string;
    arrangementFunction?: string;
}

export class CreateArrangement extends ArrangementCommand implements ICreateArrangement {
    policyVersion?: string;
    arrangementType?: string;

    constructor(data?: ICreateArrangement) {
        super(data);
        this._discriminator = "CreateArrangement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.policyVersion = _data["policyVersion"];
            this.arrangementType = _data["arrangementType"];
        }
    }

    static fromJS(data: any): CreateArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new CreateArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["policyVersion"] = this.policyVersion;
        data["arrangementType"] = this.arrangementType;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateArrangement extends IArrangementCommand {
    policyVersion?: string;
    arrangementType?: string;
}

export class EndArrangement extends ArrangementCommand implements IEndArrangement {
    endedAtUtc?: Date;

    constructor(data?: IEndArrangement) {
        super(data);
        this._discriminator = "EndArrangement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.endedAtUtc = _data["endedAtUtc"] ? new Date(_data["endedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EndArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new EndArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endedAtUtc"] = this.endedAtUtc ? this.endedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IEndArrangement extends IArrangementCommand {
    endedAtUtc?: Date;
}

export class InitiateArrangement extends ArrangementCommand implements IInitiateArrangement {
    initiatedAtUtc?: Date;

    constructor(data?: IInitiateArrangement) {
        super(data);
        this._discriminator = "InitiateArrangement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.initiatedAtUtc = _data["initiatedAtUtc"] ? new Date(_data["initiatedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): InitiateArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new InitiateArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["initiatedAtUtc"] = this.initiatedAtUtc ? this.initiatedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IInitiateArrangement extends IArrangementCommand {
    initiatedAtUtc?: Date;
}

export class PerformArrangementActivity extends ArrangementCommand implements IPerformArrangementActivity {
    activityName?: string;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IPerformArrangementActivity) {
        super(data);
        this._discriminator = "PerformArrangementActivity";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): PerformArrangementActivity {
        data = typeof data === 'object' ? data : {};
        let result = new PerformArrangementActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPerformArrangementActivity extends IArrangementCommand {
    activityName?: string;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class TrackChildrenLocationChange extends ArrangementCommand implements ITrackChildrenLocationChange {
    changedAtUtc?: Date;
    childrenIds?: string[];
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string;

    constructor(data?: ITrackChildrenLocationChange) {
        super(data);
        this._discriminator = "TrackChildrenLocationChange";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.changedAtUtc = _data["changedAtUtc"] ? new Date(_data["changedAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["childrenIds"])) {
                this.childrenIds = [] as any;
                for (let item of _data["childrenIds"])
                    this.childrenIds!.push(item);
            }
            this.familyId = _data["familyId"];
            this.plan = _data["plan"];
            this.additionalExplanation = _data["additionalExplanation"];
        }
    }

    static fromJS(data: any): TrackChildrenLocationChange {
        data = typeof data === 'object' ? data : {};
        let result = new TrackChildrenLocationChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["changedAtUtc"] = this.changedAtUtc ? this.changedAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.childrenIds)) {
            data["childrenIds"] = [];
            for (let item of this.childrenIds)
                data["childrenIds"].push(item);
        }
        data["familyId"] = this.familyId;
        data["plan"] = this.plan;
        data["additionalExplanation"] = this.additionalExplanation;
        super.toJSON(data);
        return data; 
    }
}

export interface ITrackChildrenLocationChange extends IArrangementCommand {
    changedAtUtc?: Date;
    childrenIds?: string[];
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string;
}

export class UploadArrangementForm extends ArrangementCommand implements IUploadArrangementForm {
    completedAtUtc?: Date;
    formName?: string;
    formVersion?: string;
    uploadedFileName?: string;
    uploadedDocumentId?: string;

    constructor(data?: IUploadArrangementForm) {
        super(data);
        this._discriminator = "UploadArrangementForm";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.formName = _data["formName"];
            this.formVersion = _data["formVersion"];
            this.uploadedFileName = _data["uploadedFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): UploadArrangementForm {
        data = typeof data === 'object' ? data : {};
        let result = new UploadArrangementForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["formName"] = this.formName;
        data["formVersion"] = this.formVersion;
        data["uploadedFileName"] = this.uploadedFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUploadArrangementForm extends IArrangementCommand {
    completedAtUtc?: Date;
    formName?: string;
    formVersion?: string;
    uploadedFileName?: string;
    uploadedDocumentId?: string;
}

export abstract class ArrangementNoteCommand implements IArrangementNoteCommand {
    referralId?: string;
    arrangementId?: string;
    noteId?: string;

    protected _discriminator: string;

    constructor(data?: IArrangementNoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ArrangementNoteCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.referralId = _data["referralId"];
            this.arrangementId = _data["arrangementId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): ArrangementNoteCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ApproveArrangementNote") {
            let result = new ApproveArrangementNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateDraftArrangementNote") {
            let result = new CreateDraftArrangementNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "DiscardDraftArrangementNote") {
            let result = new DiscardDraftArrangementNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EditDraftArrangementNote") {
            let result = new EditDraftArrangementNote();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ArrangementNoteCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["referralId"] = this.referralId;
        data["arrangementId"] = this.arrangementId;
        data["noteId"] = this.noteId;
        return data; 
    }
}

export interface IArrangementNoteCommand {
    referralId?: string;
    arrangementId?: string;
    noteId?: string;
}

export class ApproveArrangementNote extends ArrangementNoteCommand implements IApproveArrangementNote {
    finalizedNoteContents?: string;

    constructor(data?: IApproveArrangementNote) {
        super(data);
        this._discriminator = "ApproveArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.finalizedNoteContents = _data["finalizedNoteContents"];
        }
    }

    static fromJS(data: any): ApproveArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new ApproveArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["finalizedNoteContents"] = this.finalizedNoteContents;
        super.toJSON(data);
        return data; 
    }
}

export interface IApproveArrangementNote extends IArrangementNoteCommand {
    finalizedNoteContents?: string;
}

export class CreateDraftArrangementNote extends ArrangementNoteCommand implements ICreateDraftArrangementNote {
    draftNoteContents?: string | undefined;

    constructor(data?: ICreateDraftArrangementNote) {
        super(data);
        this._discriminator = "CreateDraftArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftNoteContents = _data["draftNoteContents"];
        }
    }

    static fromJS(data: any): CreateDraftArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDraftArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftNoteContents"] = this.draftNoteContents;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateDraftArrangementNote extends IArrangementNoteCommand {
    draftNoteContents?: string | undefined;
}

export class DiscardDraftArrangementNote extends ArrangementNoteCommand implements IDiscardDraftArrangementNote {

    constructor(data?: IDiscardDraftArrangementNote) {
        super(data);
        this._discriminator = "DiscardDraftArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): DiscardDraftArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new DiscardDraftArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDiscardDraftArrangementNote extends IArrangementNoteCommand {
}

export class EditDraftArrangementNote extends ArrangementNoteCommand implements IEditDraftArrangementNote {
    draftNoteContents?: string | undefined;

    constructor(data?: IEditDraftArrangementNote) {
        super(data);
        this._discriminator = "EditDraftArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftNoteContents = _data["draftNoteContents"];
        }
    }

    static fromJS(data: any): EditDraftArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new EditDraftArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftNoteContents"] = this.draftNoteContents;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditDraftArrangementNote extends IArrangementNoteCommand {
    draftNoteContents?: string | undefined;
}

export class UserTenantAccessSummary implements IUserTenantAccessSummary {
    organizationId?: string;
    locationIds?: string[];

    constructor(data?: IUserTenantAccessSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationId = _data["organizationId"];
            if (Array.isArray(_data["locationIds"])) {
                this.locationIds = [] as any;
                for (let item of _data["locationIds"])
                    this.locationIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UserTenantAccessSummary {
        data = typeof data === 'object' ? data : {};
        let result = new UserTenantAccessSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationId"] = this.organizationId;
        if (Array.isArray(this.locationIds)) {
            data["locationIds"] = [];
            for (let item of this.locationIds)
                data["locationIds"].push(item);
        }
        return data; 
    }
}

export interface IUserTenantAccessSummary {
    organizationId?: string;
    locationIds?: string[];
}

export class VolunteerFamily implements IVolunteerFamily {
    family?: Family;
    completedRequirements?: CompletedRequirementInfo[];
    uploadedDocuments?: UploadedDocumentInfo[];
    missingRequirements?: string[];
    availableApplications?: string[];
    familyRoleApprovals?: { [key: string]: RoleApprovalStatus; };
    individualVolunteers?: { [key: string]: Volunteer; };
    contactInfo?: { [key: string]: ContactInfo; };

    constructor(data?: IVolunteerFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.family = _data["family"] ? Family.fromJS(_data["family"]) : <any>undefined;
            if (Array.isArray(_data["completedRequirements"])) {
                this.completedRequirements = [] as any;
                for (let item of _data["completedRequirements"])
                    this.completedRequirements!.push(CompletedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["uploadedDocuments"])) {
                this.uploadedDocuments = [] as any;
                for (let item of _data["uploadedDocuments"])
                    this.uploadedDocuments!.push(UploadedDocumentInfo.fromJS(item));
            }
            if (Array.isArray(_data["missingRequirements"])) {
                this.missingRequirements = [] as any;
                for (let item of _data["missingRequirements"])
                    this.missingRequirements!.push(item);
            }
            if (Array.isArray(_data["availableApplications"])) {
                this.availableApplications = [] as any;
                for (let item of _data["availableApplications"])
                    this.availableApplications!.push(item);
            }
            if (_data["familyRoleApprovals"]) {
                this.familyRoleApprovals = {} as any;
                for (let key in _data["familyRoleApprovals"]) {
                    if (_data["familyRoleApprovals"].hasOwnProperty(key))
                        (<any>this.familyRoleApprovals)![key] = _data["familyRoleApprovals"][key];
                }
            }
            if (_data["individualVolunteers"]) {
                this.individualVolunteers = {} as any;
                for (let key in _data["individualVolunteers"]) {
                    if (_data["individualVolunteers"].hasOwnProperty(key))
                        (<any>this.individualVolunteers)![key] = _data["individualVolunteers"][key] ? Volunteer.fromJS(_data["individualVolunteers"][key]) : new Volunteer();
                }
            }
            if (_data["contactInfo"]) {
                this.contactInfo = {} as any;
                for (let key in _data["contactInfo"]) {
                    if (_data["contactInfo"].hasOwnProperty(key))
                        (<any>this.contactInfo)![key] = _data["contactInfo"][key] ? ContactInfo.fromJS(_data["contactInfo"][key]) : new ContactInfo();
                }
            }
        }
    }

    static fromJS(data: any): VolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["family"] = this.family ? this.family.toJSON() : <any>undefined;
        if (Array.isArray(this.completedRequirements)) {
            data["completedRequirements"] = [];
            for (let item of this.completedRequirements)
                data["completedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.uploadedDocuments)) {
            data["uploadedDocuments"] = [];
            for (let item of this.uploadedDocuments)
                data["uploadedDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.missingRequirements)) {
            data["missingRequirements"] = [];
            for (let item of this.missingRequirements)
                data["missingRequirements"].push(item);
        }
        if (Array.isArray(this.availableApplications)) {
            data["availableApplications"] = [];
            for (let item of this.availableApplications)
                data["availableApplications"].push(item);
        }
        if (this.familyRoleApprovals) {
            data["familyRoleApprovals"] = {};
            for (let key in this.familyRoleApprovals) {
                if (this.familyRoleApprovals.hasOwnProperty(key))
                    (<any>data["familyRoleApprovals"])[key] = this.familyRoleApprovals[key];
            }
        }
        if (this.individualVolunteers) {
            data["individualVolunteers"] = {};
            for (let key in this.individualVolunteers) {
                if (this.individualVolunteers.hasOwnProperty(key))
                    (<any>data["individualVolunteers"])[key] = this.individualVolunteers[key] ? this.individualVolunteers[key].toJSON() : <any>undefined;
            }
        }
        if (this.contactInfo) {
            data["contactInfo"] = {};
            for (let key in this.contactInfo) {
                if (this.contactInfo.hasOwnProperty(key))
                    (<any>data["contactInfo"])[key] = this.contactInfo[key] ? this.contactInfo[key].toJSON() : <any>undefined;
            }
        }
        return data; 
    }
}

export interface IVolunteerFamily {
    family?: Family;
    completedRequirements?: CompletedRequirementInfo[];
    uploadedDocuments?: UploadedDocumentInfo[];
    missingRequirements?: string[];
    availableApplications?: string[];
    familyRoleApprovals?: { [key: string]: RoleApprovalStatus; };
    individualVolunteers?: { [key: string]: Volunteer; };
    contactInfo?: { [key: string]: ContactInfo; };
}

export class CompletedRequirementInfo implements ICompletedRequirementInfo {
    userId?: string;
    timestampUtc?: Date;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;

    constructor(data?: ICompletedRequirementInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): CompletedRequirementInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CompletedRequirementInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        return data; 
    }
}

export interface ICompletedRequirementInfo {
    userId?: string;
    timestampUtc?: Date;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
}

export class UploadedDocumentInfo implements IUploadedDocumentInfo {
    userId?: string;
    timestampUtc?: Date;
    uploadedDocumentId?: string;
    uploadedFileName?: string;

    constructor(data?: IUploadedDocumentInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.uploadedFileName = _data["uploadedFileName"];
        }
    }

    static fromJS(data: any): UploadedDocumentInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UploadedDocumentInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["uploadedFileName"] = this.uploadedFileName;
        return data; 
    }
}

export interface IUploadedDocumentInfo {
    userId?: string;
    timestampUtc?: Date;
    uploadedDocumentId?: string;
    uploadedFileName?: string;
}

export enum RoleApprovalStatus {
    Prospective = 0,
    Approved = 1,
    Onboarded = 2,
}

export class Volunteer implements IVolunteer {
    completedRequirements?: CompletedRequirementInfo[];
    missingRequirements?: string[];
    availableApplications?: string[];
    individualRoleApprovals?: { [key: string]: RoleApprovalStatus; };

    constructor(data?: IVolunteer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["completedRequirements"])) {
                this.completedRequirements = [] as any;
                for (let item of _data["completedRequirements"])
                    this.completedRequirements!.push(CompletedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["missingRequirements"])) {
                this.missingRequirements = [] as any;
                for (let item of _data["missingRequirements"])
                    this.missingRequirements!.push(item);
            }
            if (Array.isArray(_data["availableApplications"])) {
                this.availableApplications = [] as any;
                for (let item of _data["availableApplications"])
                    this.availableApplications!.push(item);
            }
            if (_data["individualRoleApprovals"]) {
                this.individualRoleApprovals = {} as any;
                for (let key in _data["individualRoleApprovals"]) {
                    if (_data["individualRoleApprovals"].hasOwnProperty(key))
                        (<any>this.individualRoleApprovals)![key] = _data["individualRoleApprovals"][key];
                }
            }
        }
    }

    static fromJS(data: any): Volunteer {
        data = typeof data === 'object' ? data : {};
        let result = new Volunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.completedRequirements)) {
            data["completedRequirements"] = [];
            for (let item of this.completedRequirements)
                data["completedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.missingRequirements)) {
            data["missingRequirements"] = [];
            for (let item of this.missingRequirements)
                data["missingRequirements"].push(item);
        }
        if (Array.isArray(this.availableApplications)) {
            data["availableApplications"] = [];
            for (let item of this.availableApplications)
                data["availableApplications"].push(item);
        }
        if (this.individualRoleApprovals) {
            data["individualRoleApprovals"] = {};
            for (let key in this.individualRoleApprovals) {
                if (this.individualRoleApprovals.hasOwnProperty(key))
                    (<any>data["individualRoleApprovals"])[key] = this.individualRoleApprovals[key];
            }
        }
        return data; 
    }
}

export interface IVolunteer {
    completedRequirements?: CompletedRequirementInfo[];
    missingRequirements?: string[];
    availableApplications?: string[];
    individualRoleApprovals?: { [key: string]: RoleApprovalStatus; };
}

export abstract class VolunteerFamilyCommand implements IVolunteerFamilyCommand {
    familyId?: string;

    protected _discriminator: string;

    constructor(data?: IVolunteerFamilyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerFamilyCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): VolunteerFamilyCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ActivateVolunteerFamily") {
            let result = new ActivateVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CompleteVolunteerFamilyRequirement") {
            let result = new CompleteVolunteerFamilyRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "DeactivateVolunteerFamily") {
            let result = new DeactivateVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "SetVolunteerFamilyNote") {
            let result = new SetVolunteerFamilyNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadVolunteerFamilyDocument") {
            let result = new UploadVolunteerFamilyDocument();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerFamilyCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["familyId"] = this.familyId;
        return data; 
    }
}

export interface IVolunteerFamilyCommand {
    familyId?: string;
}

export class ActivateVolunteerFamily extends VolunteerFamilyCommand implements IActivateVolunteerFamily {

    constructor(data?: IActivateVolunteerFamily) {
        super(data);
        this._discriminator = "ActivateVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ActivateVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new ActivateVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IActivateVolunteerFamily extends IVolunteerFamilyCommand {
}

export class CompleteVolunteerFamilyRequirement extends VolunteerFamilyCommand implements ICompleteVolunteerFamilyRequirement {
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;

    constructor(data?: ICompleteVolunteerFamilyRequirement) {
        super(data);
        this._discriminator = "CompleteVolunteerFamilyRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): CompleteVolunteerFamilyRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteVolunteerFamilyRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICompleteVolunteerFamilyRequirement extends IVolunteerFamilyCommand {
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
}

export class DeactivateVolunteerFamily extends VolunteerFamilyCommand implements IDeactivateVolunteerFamily {
    reason?: string;

    constructor(data?: IDeactivateVolunteerFamily) {
        super(data);
        this._discriminator = "DeactivateVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): DeactivateVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new DeactivateVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reason"] = this.reason;
        super.toJSON(data);
        return data; 
    }
}

export interface IDeactivateVolunteerFamily extends IVolunteerFamilyCommand {
    reason?: string;
}

export class SetVolunteerFamilyNote extends VolunteerFamilyCommand implements ISetVolunteerFamilyNote {
    note?: string;

    constructor(data?: ISetVolunteerFamilyNote) {
        super(data);
        this._discriminator = "SetVolunteerFamilyNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): SetVolunteerFamilyNote {
        data = typeof data === 'object' ? data : {};
        let result = new SetVolunteerFamilyNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note"] = this.note;
        super.toJSON(data);
        return data; 
    }
}

export interface ISetVolunteerFamilyNote extends IVolunteerFamilyCommand {
    note?: string;
}

export class UploadVolunteerFamilyDocument extends VolunteerFamilyCommand implements IUploadVolunteerFamilyDocument {
    uploadedDocumentId?: string;
    uploadedFileName?: string;

    constructor(data?: IUploadVolunteerFamilyDocument) {
        super(data);
        this._discriminator = "UploadVolunteerFamilyDocument";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.uploadedFileName = _data["uploadedFileName"];
        }
    }

    static fromJS(data: any): UploadVolunteerFamilyDocument {
        data = typeof data === 'object' ? data : {};
        let result = new UploadVolunteerFamilyDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["uploadedFileName"] = this.uploadedFileName;
        super.toJSON(data);
        return data; 
    }
}

export interface IUploadVolunteerFamilyDocument extends IVolunteerFamilyCommand {
    uploadedDocumentId?: string;
    uploadedFileName?: string;
}

export abstract class VolunteerCommand implements IVolunteerCommand {
    familyId?: string;
    personId?: string;

    protected _discriminator: string;

    constructor(data?: IVolunteerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): VolunteerCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "CompleteVolunteerRequirement") {
            let result = new CompleteVolunteerRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "DeactivateVolunteer") {
            let result = new DeactivateVolunteer();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ReactivateVolunteer") {
            let result = new ReactivateVolunteer();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "SetVolunteerNote") {
            let result = new SetVolunteerNote();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["familyId"] = this.familyId;
        data["personId"] = this.personId;
        return data; 
    }
}

export interface IVolunteerCommand {
    familyId?: string;
    personId?: string;
}

export class CompleteVolunteerRequirement extends VolunteerCommand implements ICompleteVolunteerRequirement {
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;

    constructor(data?: ICompleteVolunteerRequirement) {
        super(data);
        this._discriminator = "CompleteVolunteerRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): CompleteVolunteerRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteVolunteerRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICompleteVolunteerRequirement extends IVolunteerCommand {
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
}

export class DeactivateVolunteer extends VolunteerCommand implements IDeactivateVolunteer {
    reason?: string;

    constructor(data?: IDeactivateVolunteer) {
        super(data);
        this._discriminator = "DeactivateVolunteer";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): DeactivateVolunteer {
        data = typeof data === 'object' ? data : {};
        let result = new DeactivateVolunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reason"] = this.reason;
        super.toJSON(data);
        return data; 
    }
}

export interface IDeactivateVolunteer extends IVolunteerCommand {
    reason?: string;
}

export class ReactivateVolunteer extends VolunteerCommand implements IReactivateVolunteer {

    constructor(data?: IReactivateVolunteer) {
        super(data);
        this._discriminator = "ReactivateVolunteer";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ReactivateVolunteer {
        data = typeof data === 'object' ? data : {};
        let result = new ReactivateVolunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IReactivateVolunteer extends IVolunteerCommand {
}

export class SetVolunteerNote extends VolunteerCommand implements ISetVolunteerNote {
    note?: string;

    constructor(data?: ISetVolunteerNote) {
        super(data);
        this._discriminator = "SetVolunteerNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): SetVolunteerNote {
        data = typeof data === 'object' ? data : {};
        let result = new SetVolunteerNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note"] = this.note;
        super.toJSON(data);
        return data; 
    }
}

export interface ISetVolunteerNote extends IVolunteerCommand {
    note?: string;
}

export abstract class ApprovalCommand implements IApprovalCommand {

    protected _discriminator: string;

    constructor(data?: IApprovalCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ApprovalCommand";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ApprovalCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AddAdultToFamilyCommand") {
            let result = new AddAdultToFamilyCommand();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AddChildToFamilyCommand") {
            let result = new AddChildToFamilyCommand();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateVolunteerFamilyWithNewAdultCommand") {
            let result = new CreateVolunteerFamilyWithNewAdultCommand();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ApprovalCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        return data; 
    }
}

export interface IApprovalCommand {
}

export class AddAdultToFamilyCommand extends ApprovalCommand implements IAddAdultToFamilyCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address | undefined;
    phoneNumber?: PhoneNumber | undefined;
    emailAddress?: EmailAddress | undefined;

    constructor(data?: IAddAdultToFamilyCommand) {
        super(data);
        this._discriminator = "AddAdultToFamilyCommand";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            this.familyAdultRelationshipInfo = _data["familyAdultRelationshipInfo"] ? FamilyAdultRelationshipInfo.fromJS(_data["familyAdultRelationshipInfo"]) : <any>undefined;
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddAdultToFamilyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddAdultToFamilyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        data["familyAdultRelationshipInfo"] = this.familyAdultRelationshipInfo ? this.familyAdultRelationshipInfo.toJSON() : <any>undefined;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddAdultToFamilyCommand extends IApprovalCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address | undefined;
    phoneNumber?: PhoneNumber | undefined;
    emailAddress?: EmailAddress | undefined;
}

export class AddChildToFamilyCommand extends ApprovalCommand implements IAddChildToFamilyCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    custodialRelationships?: CustodialRelationship[];
    concerns?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IAddChildToFamilyCommand) {
        super(data);
        this._discriminator = "AddChildToFamilyCommand";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            if (Array.isArray(_data["custodialRelationships"])) {
                this.custodialRelationships = [] as any;
                for (let item of _data["custodialRelationships"])
                    this.custodialRelationships!.push(CustodialRelationship.fromJS(item));
            }
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): AddChildToFamilyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddChildToFamilyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        if (Array.isArray(this.custodialRelationships)) {
            data["custodialRelationships"] = [];
            for (let item of this.custodialRelationships)
                data["custodialRelationships"].push(item.toJSON());
        }
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddChildToFamilyCommand extends IApprovalCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    custodialRelationships?: CustodialRelationship[];
    concerns?: string | undefined;
    notes?: string | undefined;
}

export class CreateVolunteerFamilyWithNewAdultCommand extends ApprovalCommand implements ICreateVolunteerFamilyWithNewAdultCommand {
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address;
    phoneNumber?: PhoneNumber;
    emailAddress?: EmailAddress;

    constructor(data?: ICreateVolunteerFamilyWithNewAdultCommand) {
        super(data);
        this._discriminator = "CreateVolunteerFamilyWithNewAdultCommand";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            this.familyAdultRelationshipInfo = _data["familyAdultRelationshipInfo"] ? FamilyAdultRelationshipInfo.fromJS(_data["familyAdultRelationshipInfo"]) : <any>undefined;
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateVolunteerFamilyWithNewAdultCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVolunteerFamilyWithNewAdultCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        data["familyAdultRelationshipInfo"] = this.familyAdultRelationshipInfo ? this.familyAdultRelationshipInfo.toJSON() : <any>undefined;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateVolunteerFamilyWithNewAdultCommand extends IApprovalCommand {
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address;
    phoneNumber?: PhoneNumber;
    emailAddress?: EmailAddress;
}

export abstract class PersonCommand implements IPersonCommand {
    personId?: string;

    protected _discriminator: string;

    constructor(data?: IPersonCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "PersonCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): PersonCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "CreatePerson") {
            let result = new CreatePerson();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonAge") {
            let result = new UpdatePersonAge();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonConcerns") {
            let result = new UpdatePersonConcerns();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonName") {
            let result = new UpdatePersonName();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonNotes") {
            let result = new UpdatePersonNotes();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonUserLink") {
            let result = new UpdatePersonUserLink();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'PersonCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["personId"] = this.personId;
        return data; 
    }
}

export interface IPersonCommand {
    personId?: string;
}

export class CreatePerson extends PersonCommand implements ICreatePerson {
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    concerns?: string | undefined;
    notes?: string | undefined;

    constructor(data?: ICreatePerson) {
        super(data);
        this._discriminator = "CreatePerson";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreatePerson {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreatePerson extends IPersonCommand {
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    concerns?: string | undefined;
    notes?: string | undefined;
}

export class UpdatePersonAge extends PersonCommand implements IUpdatePersonAge {
    age?: Age;

    constructor(data?: IUpdatePersonAge) {
        super(data);
        this._discriminator = "UpdatePersonAge";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdatePersonAge {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonAge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdatePersonAge extends IPersonCommand {
    age?: Age;
}

export class UpdatePersonConcerns extends PersonCommand implements IUpdatePersonConcerns {
    concerns?: string | undefined;

    constructor(data?: IUpdatePersonConcerns) {
        super(data);
        this._discriminator = "UpdatePersonConcerns";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.concerns = _data["concerns"];
        }
    }

    static fromJS(data: any): UpdatePersonConcerns {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonConcerns();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["concerns"] = this.concerns;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdatePersonConcerns extends IPersonCommand {
    concerns?: string | undefined;
}

export class UpdatePersonName extends PersonCommand implements IUpdatePersonName {
    firstName?: string;
    lastName?: string;

    constructor(data?: IUpdatePersonName) {
        super(data);
        this._discriminator = "UpdatePersonName";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UpdatePersonName {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdatePersonName extends IPersonCommand {
    firstName?: string;
    lastName?: string;
}

export class UpdatePersonNotes extends PersonCommand implements IUpdatePersonNotes {
    notes?: string | undefined;

    constructor(data?: IUpdatePersonNotes) {
        super(data);
        this._discriminator = "UpdatePersonNotes";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): UpdatePersonNotes {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonNotes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notes"] = this.notes;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdatePersonNotes extends IPersonCommand {
    notes?: string | undefined;
}

export class UpdatePersonUserLink extends PersonCommand implements IUpdatePersonUserLink {
    userId?: string | undefined;

    constructor(data?: IUpdatePersonUserLink) {
        super(data);
        this._discriminator = "UpdatePersonUserLink";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): UpdatePersonUserLink {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonUserLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdatePersonUserLink extends IPersonCommand {
    userId?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}