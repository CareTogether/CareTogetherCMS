//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ConfigurationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getOrganizationConfiguration(organizationId: string): Promise<OrganizationConfiguration> {
        let url_ = this.baseUrl + "/api/{organizationId}/Configuration";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrganizationConfiguration(_response);
        });
    }

    protected processGetOrganizationConfiguration(response: Response): Promise<OrganizationConfiguration> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationConfiguration.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrganizationConfiguration>(null as any);
    }

    getEffectiveLocationPolicy(organizationId: string, locationId: string): Promise<EffectiveLocationPolicy> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Configuration/policy";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEffectiveLocationPolicy(_response);
        });
    }

    protected processGetEffectiveLocationPolicy(response: Response): Promise<EffectiveLocationPolicy> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EffectiveLocationPolicy.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EffectiveLocationPolicy>(null as any);
    }

    getLocationFlags(organizationId: string, locationId: string): Promise<CurrentFeatureFlags> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Configuration/flags";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLocationFlags(_response);
        });
    }

    protected processGetLocationFlags(response: Response): Promise<CurrentFeatureFlags> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CurrentFeatureFlags.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CurrentFeatureFlags>(null as any);
    }
}

export class DirectoryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listVisibleFamilies(organizationId: string, locationId: string): Promise<CombinedFamilyInfo[]> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Directory";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListVisibleFamilies(_response);
        });
    }

    protected processListVisibleFamilies(response: Response): Promise<CombinedFamilyInfo[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CombinedFamilyInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo[]>(null as any);
    }

    submitDirectoryCommand(organizationId: string, locationId: string, command: DirectoryCommand): Promise<CombinedFamilyInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Directory/directoryCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitDirectoryCommand(_response);
        });
    }

    protected processSubmitDirectoryCommand(response: Response): Promise<CombinedFamilyInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CombinedFamilyInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo>(null as any);
    }

    submitFamilyCommand(organizationId: string, locationId: string, familyId: string | undefined, command: FamilyCommand): Promise<CombinedFamilyInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Directory/familyCommand?";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        if (familyId === null)
            throw new Error("The parameter 'familyId' cannot be null.");
        else if (familyId !== undefined)
            url_ += "familyId=" + encodeURIComponent("" + familyId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitFamilyCommand(_response);
        });
    }

    protected processSubmitFamilyCommand(response: Response): Promise<CombinedFamilyInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CombinedFamilyInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo>(null as any);
    }

    submitPersonCommand(organizationId: string, locationId: string, familyId: string | undefined, command: PersonCommand): Promise<CombinedFamilyInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Directory/personCommand?";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        if (familyId === null)
            throw new Error("The parameter 'familyId' cannot be null.");
        else if (familyId !== undefined)
            url_ += "familyId=" + encodeURIComponent("" + familyId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitPersonCommand(_response);
        });
    }

    protected processSubmitPersonCommand(response: Response): Promise<CombinedFamilyInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CombinedFamilyInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo>(null as any);
    }

    submitNoteCommand(organizationId: string, locationId: string, command: NoteCommand): Promise<NoteCommandResult> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Directory/noteCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitNoteCommand(_response);
        });
    }

    protected processSubmitNoteCommand(response: Response): Promise<NoteCommandResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NoteCommandResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NoteCommandResult>(null as any);
    }
}

export class FilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getReadValetUrl(organizationId: string, locationId: string, documentId: string): Promise<string> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Files/{documentId}";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReadValetUrl(_response);
        });
    }

    protected processGetReadValetUrl(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    generateUploadValetUrl(organizationId: string, locationId: string): Promise<DocumentUploadInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Files/upload";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateUploadValetUrl(_response);
        });
    }

    protected processGenerateUploadValetUrl(response: Response): Promise<DocumentUploadInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentUploadInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentUploadInfo>(null as any);
    }
}

export class ReferralsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    submitReferralCommand(organizationId: string, locationId: string, command: ReferralCommand): Promise<CombinedFamilyInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/referralCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitReferralCommand(_response);
        });
    }

    protected processSubmitReferralCommand(response: Response): Promise<CombinedFamilyInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CombinedFamilyInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo>(null as any);
    }

    submitArrangementsCommand(organizationId: string, locationId: string, command: ArrangementsCommand): Promise<CombinedFamilyInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/arrangementCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitArrangementsCommand(_response);
        });
    }

    protected processSubmitArrangementsCommand(response: Response): Promise<CombinedFamilyInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CombinedFamilyInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo>(null as any);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getUserOrganizationAccess(): Promise<UserOrganizationAccess> {
        let url_ = this.baseUrl + "/api/Users/me/tenantAccess";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserOrganizationAccess(_response);
        });
    }

    protected processGetUserOrganizationAccess(response: Response): Promise<UserOrganizationAccess> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserOrganizationAccess.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserOrganizationAccess>(null as any);
    }
}

export class VolunteersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    submitVolunteerFamilyCommand(organizationId: string, locationId: string, command: VolunteerFamilyCommand): Promise<CombinedFamilyInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Volunteers/volunteerFamilyCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitVolunteerFamilyCommand(_response);
        });
    }

    protected processSubmitVolunteerFamilyCommand(response: Response): Promise<CombinedFamilyInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CombinedFamilyInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo>(null as any);
    }

    submitVolunteerCommand(organizationId: string, locationId: string, command: VolunteerCommand): Promise<CombinedFamilyInfo> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Volunteers/volunteerCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitVolunteerCommand(_response);
        });
    }

    protected processSubmitVolunteerCommand(response: Response): Promise<CombinedFamilyInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CombinedFamilyInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CombinedFamilyInfo>(null as any);
    }
}

export class OrganizationConfiguration implements IOrganizationConfiguration {
    organizationName?: string;
    locations?: LocationConfiguration[];
    roles?: RoleDefinition[];
    users?: { [key: string]: UserAccessConfiguration; };

    constructor(data?: IOrganizationConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationName = _data["organizationName"];
            if (Array.isArray(_data["locations"])) {
                this.locations = [] as any;
                for (let item of _data["locations"])
                    this.locations!.push(LocationConfiguration.fromJS(item));
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(RoleDefinition.fromJS(item));
            }
            if (_data["users"]) {
                this.users = {} as any;
                for (let key in _data["users"]) {
                    if (_data["users"].hasOwnProperty(key))
                        (<any>this.users)![key] = _data["users"][key] ? UserAccessConfiguration.fromJS(_data["users"][key]) : new UserAccessConfiguration();
                }
            }
        }
    }

    static fromJS(data: any): OrganizationConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationName"] = this.organizationName;
        if (Array.isArray(this.locations)) {
            data["locations"] = [];
            for (let item of this.locations)
                data["locations"].push(item.toJSON());
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (this.users) {
            data["users"] = {};
            for (let key in this.users) {
                if (this.users.hasOwnProperty(key))
                    (<any>data["users"])[key] = this.users[key] ? this.users[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

export interface IOrganizationConfiguration {
    organizationName?: string;
    locations?: LocationConfiguration[];
    roles?: RoleDefinition[];
    users?: { [key: string]: UserAccessConfiguration; };
}

export class LocationConfiguration implements ILocationConfiguration {
    id?: string;
    name?: string;
    ethnicities?: string[];
    adultFamilyRelationships?: string[];

    constructor(data?: ILocationConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["ethnicities"])) {
                this.ethnicities = [] as any;
                for (let item of _data["ethnicities"])
                    this.ethnicities!.push(item);
            }
            if (Array.isArray(_data["adultFamilyRelationships"])) {
                this.adultFamilyRelationships = [] as any;
                for (let item of _data["adultFamilyRelationships"])
                    this.adultFamilyRelationships!.push(item);
            }
        }
    }

    static fromJS(data: any): LocationConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new LocationConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.ethnicities)) {
            data["ethnicities"] = [];
            for (let item of this.ethnicities)
                data["ethnicities"].push(item);
        }
        if (Array.isArray(this.adultFamilyRelationships)) {
            data["adultFamilyRelationships"] = [];
            for (let item of this.adultFamilyRelationships)
                data["adultFamilyRelationships"].push(item);
        }
        return data;
    }
}

export interface ILocationConfiguration {
    id?: string;
    name?: string;
    ethnicities?: string[];
    adultFamilyRelationships?: string[];
}

export class RoleDefinition implements IRoleDefinition {
    roleName?: string;
    permissions?: Permission[];

    constructor(data?: IRoleDefinition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleName = _data["roleName"];
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
        }
    }

    static fromJS(data: any): RoleDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDefinition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data;
    }
}

export interface IRoleDefinition {
    roleName?: string;
    permissions?: Permission[];
}

export enum Permission {
    ReadDocuments = 1,
    UploadStandaloneDocuments = 2,
    ViewAllFamilies = 100,
    ViewLinkedFamilies = 101,
    ViewApprovalStatus = 200,
    EditApprovalRequirementCompletion = 201,
    EditApprovalRequirementExemption = 202,
    EditVolunteerRoleParticipation = 203,
}

export class UserAccessConfiguration implements IUserAccessConfiguration {
    personId?: string;
    locationRoles?: UserLocationRole[];

    constructor(data?: IUserAccessConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
            if (Array.isArray(_data["locationRoles"])) {
                this.locationRoles = [] as any;
                for (let item of _data["locationRoles"])
                    this.locationRoles!.push(UserLocationRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAccessConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new UserAccessConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        if (Array.isArray(this.locationRoles)) {
            data["locationRoles"] = [];
            for (let item of this.locationRoles)
                data["locationRoles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserAccessConfiguration {
    personId?: string;
    locationRoles?: UserLocationRole[];
}

export class UserLocationRole implements IUserLocationRole {
    locationId?: string;
    roleName?: string;

    constructor(data?: IUserLocationRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationId = _data["locationId"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): UserLocationRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserLocationRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId;
        data["roleName"] = this.roleName;
        return data;
    }
}

export interface IUserLocationRole {
    locationId?: string;
    roleName?: string;
}

export class EffectiveLocationPolicy implements IEffectiveLocationPolicy {
    actionDefinitions?: { [key: string]: ActionRequirement; };
    referralPolicy?: ReferralPolicy;
    volunteerPolicy?: VolunteerPolicy;

    constructor(data?: IEffectiveLocationPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["actionDefinitions"]) {
                this.actionDefinitions = {} as any;
                for (let key in _data["actionDefinitions"]) {
                    if (_data["actionDefinitions"].hasOwnProperty(key))
                        (<any>this.actionDefinitions)![key] = _data["actionDefinitions"][key] ? ActionRequirement.fromJS(_data["actionDefinitions"][key]) : new ActionRequirement();
                }
            }
            this.referralPolicy = _data["referralPolicy"] ? ReferralPolicy.fromJS(_data["referralPolicy"]) : <any>undefined;
            this.volunteerPolicy = _data["volunteerPolicy"] ? VolunteerPolicy.fromJS(_data["volunteerPolicy"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EffectiveLocationPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new EffectiveLocationPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.actionDefinitions) {
            data["actionDefinitions"] = {};
            for (let key in this.actionDefinitions) {
                if (this.actionDefinitions.hasOwnProperty(key))
                    (<any>data["actionDefinitions"])[key] = this.actionDefinitions[key] ? this.actionDefinitions[key].toJSON() : <any>undefined;
            }
        }
        data["referralPolicy"] = this.referralPolicy ? this.referralPolicy.toJSON() : <any>undefined;
        data["volunteerPolicy"] = this.volunteerPolicy ? this.volunteerPolicy.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEffectiveLocationPolicy {
    actionDefinitions?: { [key: string]: ActionRequirement; };
    referralPolicy?: ReferralPolicy;
    volunteerPolicy?: VolunteerPolicy;
}

export class ActionRequirement implements IActionRequirement {
    documentLink?: DocumentLinkRequirement;
    noteEntry?: NoteEntryRequirement;
    instructions?: string | undefined;
    infoLink?: string | undefined;

    constructor(data?: IActionRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentLink = _data["documentLink"];
            this.noteEntry = _data["noteEntry"];
            this.instructions = _data["instructions"];
            this.infoLink = _data["infoLink"];
        }
    }

    static fromJS(data: any): ActionRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new ActionRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentLink"] = this.documentLink;
        data["noteEntry"] = this.noteEntry;
        data["instructions"] = this.instructions;
        data["infoLink"] = this.infoLink;
        return data;
    }
}

export interface IActionRequirement {
    documentLink?: DocumentLinkRequirement;
    noteEntry?: NoteEntryRequirement;
    instructions?: string | undefined;
    infoLink?: string | undefined;
}

export enum DocumentLinkRequirement {
    None = 0,
    Allowed = 1,
    Required = 2,
}

export enum NoteEntryRequirement {
    None = 0,
    Allowed = 1,
    Required = 2,
}

export class ReferralPolicy implements IReferralPolicy {
    requiredIntakeActionNames?: string[];
    customFields?: CustomField[];
    arrangementPolicies?: ArrangementPolicy[];

    constructor(data?: IReferralPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["requiredIntakeActionNames"])) {
                this.requiredIntakeActionNames = [] as any;
                for (let item of _data["requiredIntakeActionNames"])
                    this.requiredIntakeActionNames!.push(item);
            }
            if (Array.isArray(_data["customFields"])) {
                this.customFields = [] as any;
                for (let item of _data["customFields"])
                    this.customFields!.push(CustomField.fromJS(item));
            }
            if (Array.isArray(_data["arrangementPolicies"])) {
                this.arrangementPolicies = [] as any;
                for (let item of _data["arrangementPolicies"])
                    this.arrangementPolicies!.push(ArrangementPolicy.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReferralPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new ReferralPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.requiredIntakeActionNames)) {
            data["requiredIntakeActionNames"] = [];
            for (let item of this.requiredIntakeActionNames)
                data["requiredIntakeActionNames"].push(item);
        }
        if (Array.isArray(this.customFields)) {
            data["customFields"] = [];
            for (let item of this.customFields)
                data["customFields"].push(item.toJSON());
        }
        if (Array.isArray(this.arrangementPolicies)) {
            data["arrangementPolicies"] = [];
            for (let item of this.arrangementPolicies)
                data["arrangementPolicies"].push(item.toJSON());
        }
        return data;
    }
}

export interface IReferralPolicy {
    requiredIntakeActionNames?: string[];
    customFields?: CustomField[];
    arrangementPolicies?: ArrangementPolicy[];
}

export class CustomField implements ICustomField {
    name?: string;
    type?: CustomFieldType;

    constructor(data?: ICustomField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CustomField {
        data = typeof data === 'object' ? data : {};
        let result = new CustomField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }
}

export interface ICustomField {
    name?: string;
    type?: CustomFieldType;
}

export enum CustomFieldType {
    Boolean = 0,
    String = 1,
}

export class ArrangementPolicy implements IArrangementPolicy {
    arrangementType?: string;
    childInvolvement?: ChildInvolvement;
    arrangementFunctions?: ArrangementFunction[];
    requiredSetupActionNames?: string[];
    requiredMonitoringActions?: MonitoringRequirement[];
    requiredCloseoutActionNames?: string[];

    constructor(data?: IArrangementPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.arrangementType = _data["arrangementType"];
            this.childInvolvement = _data["childInvolvement"];
            if (Array.isArray(_data["arrangementFunctions"])) {
                this.arrangementFunctions = [] as any;
                for (let item of _data["arrangementFunctions"])
                    this.arrangementFunctions!.push(ArrangementFunction.fromJS(item));
            }
            if (Array.isArray(_data["requiredSetupActionNames"])) {
                this.requiredSetupActionNames = [] as any;
                for (let item of _data["requiredSetupActionNames"])
                    this.requiredSetupActionNames!.push(item);
            }
            if (Array.isArray(_data["requiredMonitoringActions"])) {
                this.requiredMonitoringActions = [] as any;
                for (let item of _data["requiredMonitoringActions"])
                    this.requiredMonitoringActions!.push(MonitoringRequirement.fromJS(item));
            }
            if (Array.isArray(_data["requiredCloseoutActionNames"])) {
                this.requiredCloseoutActionNames = [] as any;
                for (let item of _data["requiredCloseoutActionNames"])
                    this.requiredCloseoutActionNames!.push(item);
            }
        }
    }

    static fromJS(data: any): ArrangementPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new ArrangementPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrangementType"] = this.arrangementType;
        data["childInvolvement"] = this.childInvolvement;
        if (Array.isArray(this.arrangementFunctions)) {
            data["arrangementFunctions"] = [];
            for (let item of this.arrangementFunctions)
                data["arrangementFunctions"].push(item.toJSON());
        }
        if (Array.isArray(this.requiredSetupActionNames)) {
            data["requiredSetupActionNames"] = [];
            for (let item of this.requiredSetupActionNames)
                data["requiredSetupActionNames"].push(item);
        }
        if (Array.isArray(this.requiredMonitoringActions)) {
            data["requiredMonitoringActions"] = [];
            for (let item of this.requiredMonitoringActions)
                data["requiredMonitoringActions"].push(item.toJSON());
        }
        if (Array.isArray(this.requiredCloseoutActionNames)) {
            data["requiredCloseoutActionNames"] = [];
            for (let item of this.requiredCloseoutActionNames)
                data["requiredCloseoutActionNames"].push(item);
        }
        return data;
    }
}

export interface IArrangementPolicy {
    arrangementType?: string;
    childInvolvement?: ChildInvolvement;
    arrangementFunctions?: ArrangementFunction[];
    requiredSetupActionNames?: string[];
    requiredMonitoringActions?: MonitoringRequirement[];
    requiredCloseoutActionNames?: string[];
}

export enum ChildInvolvement {
    ChildHousing = 0,
    DaytimeChildCareOnly = 1,
    NoChildInvolvement = 2,
}

export class ArrangementFunction implements IArrangementFunction {
    functionName?: string;
    requirement?: FunctionRequirement;
    eligibleIndividualVolunteerRoles?: string[];
    eligibleVolunteerFamilyRoles?: string[];
    eligiblePeople?: string[];

    constructor(data?: IArrangementFunction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.functionName = _data["functionName"];
            this.requirement = _data["requirement"];
            if (Array.isArray(_data["eligibleIndividualVolunteerRoles"])) {
                this.eligibleIndividualVolunteerRoles = [] as any;
                for (let item of _data["eligibleIndividualVolunteerRoles"])
                    this.eligibleIndividualVolunteerRoles!.push(item);
            }
            if (Array.isArray(_data["eligibleVolunteerFamilyRoles"])) {
                this.eligibleVolunteerFamilyRoles = [] as any;
                for (let item of _data["eligibleVolunteerFamilyRoles"])
                    this.eligibleVolunteerFamilyRoles!.push(item);
            }
            if (Array.isArray(_data["eligiblePeople"])) {
                this.eligiblePeople = [] as any;
                for (let item of _data["eligiblePeople"])
                    this.eligiblePeople!.push(item);
            }
        }
    }

    static fromJS(data: any): ArrangementFunction {
        data = typeof data === 'object' ? data : {};
        let result = new ArrangementFunction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["functionName"] = this.functionName;
        data["requirement"] = this.requirement;
        if (Array.isArray(this.eligibleIndividualVolunteerRoles)) {
            data["eligibleIndividualVolunteerRoles"] = [];
            for (let item of this.eligibleIndividualVolunteerRoles)
                data["eligibleIndividualVolunteerRoles"].push(item);
        }
        if (Array.isArray(this.eligibleVolunteerFamilyRoles)) {
            data["eligibleVolunteerFamilyRoles"] = [];
            for (let item of this.eligibleVolunteerFamilyRoles)
                data["eligibleVolunteerFamilyRoles"].push(item);
        }
        if (Array.isArray(this.eligiblePeople)) {
            data["eligiblePeople"] = [];
            for (let item of this.eligiblePeople)
                data["eligiblePeople"].push(item);
        }
        return data;
    }
}

export interface IArrangementFunction {
    functionName?: string;
    requirement?: FunctionRequirement;
    eligibleIndividualVolunteerRoles?: string[];
    eligibleVolunteerFamilyRoles?: string[];
    eligiblePeople?: string[];
}

export enum FunctionRequirement {
    ZeroOrMore = 0,
    ExactlyOne = 1,
    OneOrMore = 2,
}

export class MonitoringRequirement implements IMonitoringRequirement {
    actionName?: string;
    recurrence?: RecurrencePolicy;

    constructor(data?: IMonitoringRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionName = _data["actionName"];
            this.recurrence = _data["recurrence"] ? RecurrencePolicy.fromJS(_data["recurrence"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MonitoringRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new MonitoringRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionName"] = this.actionName;
        data["recurrence"] = this.recurrence ? this.recurrence.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMonitoringRequirement {
    actionName?: string;
    recurrence?: RecurrencePolicy;
}

export abstract class RecurrencePolicy implements IRecurrencePolicy {

    protected _discriminator: string;

    constructor(data?: IRecurrencePolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "RecurrencePolicy";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): RecurrencePolicy {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ChildCareOccurrenceBasedRecurrencePolicy") {
            let result = new ChildCareOccurrenceBasedRecurrencePolicy();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "DurationStagesRecurrencePolicy") {
            let result = new DurationStagesRecurrencePolicy();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'RecurrencePolicy' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        return data;
    }
}

export interface IRecurrencePolicy {
}

export class ChildCareOccurrenceBasedRecurrencePolicy extends RecurrencePolicy implements IChildCareOccurrenceBasedRecurrencePolicy {
    delay?: string;
    frequency?: number;
    initialSkipCount?: number;
    positive?: boolean;

    constructor(data?: IChildCareOccurrenceBasedRecurrencePolicy) {
        super(data);
        this._discriminator = "ChildCareOccurrenceBasedRecurrencePolicy";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.delay = _data["delay"];
            this.frequency = _data["frequency"];
            this.initialSkipCount = _data["initialSkipCount"];
            this.positive = _data["positive"];
        }
    }

    static fromJS(data: any): ChildCareOccurrenceBasedRecurrencePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new ChildCareOccurrenceBasedRecurrencePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["delay"] = this.delay;
        data["frequency"] = this.frequency;
        data["initialSkipCount"] = this.initialSkipCount;
        data["positive"] = this.positive;
        super.toJSON(data);
        return data;
    }
}

export interface IChildCareOccurrenceBasedRecurrencePolicy extends IRecurrencePolicy {
    delay?: string;
    frequency?: number;
    initialSkipCount?: number;
    positive?: boolean;
}

export class DurationStagesRecurrencePolicy extends RecurrencePolicy implements IDurationStagesRecurrencePolicy {
    stages?: RecurrencePolicyStage[];

    constructor(data?: IDurationStagesRecurrencePolicy) {
        super(data);
        this._discriminator = "DurationStagesRecurrencePolicy";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["stages"])) {
                this.stages = [] as any;
                for (let item of _data["stages"])
                    this.stages!.push(RecurrencePolicyStage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DurationStagesRecurrencePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new DurationStagesRecurrencePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.stages)) {
            data["stages"] = [];
            for (let item of this.stages)
                data["stages"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IDurationStagesRecurrencePolicy extends IRecurrencePolicy {
    stages?: RecurrencePolicyStage[];
}

export class RecurrencePolicyStage implements IRecurrencePolicyStage {
    delay?: string;
    maxOccurrences?: number | undefined;

    constructor(data?: IRecurrencePolicyStage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.delay = _data["delay"];
            this.maxOccurrences = _data["maxOccurrences"];
        }
    }

    static fromJS(data: any): RecurrencePolicyStage {
        data = typeof data === 'object' ? data : {};
        let result = new RecurrencePolicyStage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["delay"] = this.delay;
        data["maxOccurrences"] = this.maxOccurrences;
        return data;
    }
}

export interface IRecurrencePolicyStage {
    delay?: string;
    maxOccurrences?: number | undefined;
}

export class VolunteerPolicy implements IVolunteerPolicy {
    volunteerRoles?: { [key: string]: VolunteerRolePolicy; };
    volunteerFamilyRoles?: { [key: string]: VolunteerFamilyRolePolicy; };

    constructor(data?: IVolunteerPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["volunteerRoles"]) {
                this.volunteerRoles = {} as any;
                for (let key in _data["volunteerRoles"]) {
                    if (_data["volunteerRoles"].hasOwnProperty(key))
                        (<any>this.volunteerRoles)![key] = _data["volunteerRoles"][key] ? VolunteerRolePolicy.fromJS(_data["volunteerRoles"][key]) : new VolunteerRolePolicy();
                }
            }
            if (_data["volunteerFamilyRoles"]) {
                this.volunteerFamilyRoles = {} as any;
                for (let key in _data["volunteerFamilyRoles"]) {
                    if (_data["volunteerFamilyRoles"].hasOwnProperty(key))
                        (<any>this.volunteerFamilyRoles)![key] = _data["volunteerFamilyRoles"][key] ? VolunteerFamilyRolePolicy.fromJS(_data["volunteerFamilyRoles"][key]) : new VolunteerFamilyRolePolicy();
                }
            }
        }
    }

    static fromJS(data: any): VolunteerPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.volunteerRoles) {
            data["volunteerRoles"] = {};
            for (let key in this.volunteerRoles) {
                if (this.volunteerRoles.hasOwnProperty(key))
                    (<any>data["volunteerRoles"])[key] = this.volunteerRoles[key] ? this.volunteerRoles[key].toJSON() : <any>undefined;
            }
        }
        if (this.volunteerFamilyRoles) {
            data["volunteerFamilyRoles"] = {};
            for (let key in this.volunteerFamilyRoles) {
                if (this.volunteerFamilyRoles.hasOwnProperty(key))
                    (<any>data["volunteerFamilyRoles"])[key] = this.volunteerFamilyRoles[key] ? this.volunteerFamilyRoles[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

export interface IVolunteerPolicy {
    volunteerRoles?: { [key: string]: VolunteerRolePolicy; };
    volunteerFamilyRoles?: { [key: string]: VolunteerFamilyRolePolicy; };
}

export class VolunteerRolePolicy implements IVolunteerRolePolicy {
    volunteerRoleType?: string;
    policyVersions?: VolunteerRolePolicyVersion[];

    constructor(data?: IVolunteerRolePolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.volunteerRoleType = _data["volunteerRoleType"];
            if (Array.isArray(_data["policyVersions"])) {
                this.policyVersions = [] as any;
                for (let item of _data["policyVersions"])
                    this.policyVersions!.push(VolunteerRolePolicyVersion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerRolePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerRolePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volunteerRoleType"] = this.volunteerRoleType;
        if (Array.isArray(this.policyVersions)) {
            data["policyVersions"] = [];
            for (let item of this.policyVersions)
                data["policyVersions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVolunteerRolePolicy {
    volunteerRoleType?: string;
    policyVersions?: VolunteerRolePolicyVersion[];
}

export class VolunteerRolePolicyVersion implements IVolunteerRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerApprovalRequirement[];

    constructor(data?: IVolunteerRolePolicyVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.supersededAtUtc = _data["supersededAtUtc"] ? new Date(_data["supersededAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["requirements"])) {
                this.requirements = [] as any;
                for (let item of _data["requirements"])
                    this.requirements!.push(VolunteerApprovalRequirement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerRolePolicyVersion {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerRolePolicyVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["supersededAtUtc"] = this.supersededAtUtc ? this.supersededAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.requirements)) {
            data["requirements"] = [];
            for (let item of this.requirements)
                data["requirements"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVolunteerRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerApprovalRequirement[];
}

export class VolunteerApprovalRequirement implements IVolunteerApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;

    constructor(data?: IVolunteerApprovalRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stage = _data["stage"];
            this.actionName = _data["actionName"];
        }
    }

    static fromJS(data: any): VolunteerApprovalRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerApprovalRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stage"] = this.stage;
        data["actionName"] = this.actionName;
        return data;
    }
}

export interface IVolunteerApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;
}

export enum RequirementStage {
    Application = 0,
    Approval = 1,
    Onboarding = 2,
}

export class VolunteerFamilyRolePolicy implements IVolunteerFamilyRolePolicy {
    volunteerFamilyRoleType?: string;
    policyVersions?: VolunteerFamilyRolePolicyVersion[];

    constructor(data?: IVolunteerFamilyRolePolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.volunteerFamilyRoleType = _data["volunteerFamilyRoleType"];
            if (Array.isArray(_data["policyVersions"])) {
                this.policyVersions = [] as any;
                for (let item of _data["policyVersions"])
                    this.policyVersions!.push(VolunteerFamilyRolePolicyVersion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerFamilyRolePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamilyRolePolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volunteerFamilyRoleType"] = this.volunteerFamilyRoleType;
        if (Array.isArray(this.policyVersions)) {
            data["policyVersions"] = [];
            for (let item of this.policyVersions)
                data["policyVersions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVolunteerFamilyRolePolicy {
    volunteerFamilyRoleType?: string;
    policyVersions?: VolunteerFamilyRolePolicyVersion[];
}

export class VolunteerFamilyRolePolicyVersion implements IVolunteerFamilyRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerFamilyApprovalRequirement[];

    constructor(data?: IVolunteerFamilyRolePolicyVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.supersededAtUtc = _data["supersededAtUtc"] ? new Date(_data["supersededAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["requirements"])) {
                this.requirements = [] as any;
                for (let item of _data["requirements"])
                    this.requirements!.push(VolunteerFamilyApprovalRequirement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerFamilyRolePolicyVersion {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamilyRolePolicyVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["supersededAtUtc"] = this.supersededAtUtc ? this.supersededAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.requirements)) {
            data["requirements"] = [];
            for (let item of this.requirements)
                data["requirements"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVolunteerFamilyRolePolicyVersion {
    version?: string;
    supersededAtUtc?: Date | undefined;
    requirements?: VolunteerFamilyApprovalRequirement[];
}

export class VolunteerFamilyApprovalRequirement implements IVolunteerFamilyApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;
    scope?: VolunteerFamilyRequirementScope;

    constructor(data?: IVolunteerFamilyApprovalRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stage = _data["stage"];
            this.actionName = _data["actionName"];
            this.scope = _data["scope"];
        }
    }

    static fromJS(data: any): VolunteerFamilyApprovalRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamilyApprovalRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stage"] = this.stage;
        data["actionName"] = this.actionName;
        data["scope"] = this.scope;
        return data;
    }
}

export interface IVolunteerFamilyApprovalRequirement {
    stage?: RequirementStage;
    actionName?: string;
    scope?: VolunteerFamilyRequirementScope;
}

export enum VolunteerFamilyRequirementScope {
    OncePerFamily = 0,
    AllAdultsInTheFamily = 1,
    AllParticipatingAdultsInTheFamily = 2,
}

export class CurrentFeatureFlags implements ICurrentFeatureFlags {
    viewReferrals?: boolean;

    constructor(data?: ICurrentFeatureFlags) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.viewReferrals = _data["viewReferrals"];
        }
    }

    static fromJS(data: any): CurrentFeatureFlags {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentFeatureFlags();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["viewReferrals"] = this.viewReferrals;
        return data;
    }
}

export interface ICurrentFeatureFlags {
    viewReferrals?: boolean;
}

export class CombinedFamilyInfo implements ICombinedFamilyInfo {
    family?: Family;
    partneringFamilyInfo?: PartneringFamilyInfo | undefined;
    volunteerFamilyInfo?: VolunteerFamilyInfo | undefined;
    notes?: Note[];
    uploadedDocuments?: UploadedDocumentInfo[];

    constructor(data?: ICombinedFamilyInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.family = _data["family"] ? Family.fromJS(_data["family"]) : <any>undefined;
            this.partneringFamilyInfo = _data["partneringFamilyInfo"] ? PartneringFamilyInfo.fromJS(_data["partneringFamilyInfo"]) : <any>undefined;
            this.volunteerFamilyInfo = _data["volunteerFamilyInfo"] ? VolunteerFamilyInfo.fromJS(_data["volunteerFamilyInfo"]) : <any>undefined;
            if (Array.isArray(_data["notes"])) {
                this.notes = [] as any;
                for (let item of _data["notes"])
                    this.notes!.push(Note.fromJS(item));
            }
            if (Array.isArray(_data["uploadedDocuments"])) {
                this.uploadedDocuments = [] as any;
                for (let item of _data["uploadedDocuments"])
                    this.uploadedDocuments!.push(UploadedDocumentInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CombinedFamilyInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CombinedFamilyInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["family"] = this.family ? this.family.toJSON() : <any>undefined;
        data["partneringFamilyInfo"] = this.partneringFamilyInfo ? this.partneringFamilyInfo.toJSON() : <any>undefined;
        data["volunteerFamilyInfo"] = this.volunteerFamilyInfo ? this.volunteerFamilyInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item.toJSON());
        }
        if (Array.isArray(this.uploadedDocuments)) {
            data["uploadedDocuments"] = [];
            for (let item of this.uploadedDocuments)
                data["uploadedDocuments"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICombinedFamilyInfo {
    family?: Family;
    partneringFamilyInfo?: PartneringFamilyInfo | undefined;
    volunteerFamilyInfo?: VolunteerFamilyInfo | undefined;
    notes?: Note[];
    uploadedDocuments?: UploadedDocumentInfo[];
}

export class Family implements IFamily {
    id?: string;
    primaryFamilyContactPersonId?: string;
    adults?: ValueTupleOfPersonAndFamilyAdultRelationshipInfo[];
    children?: Person[];
    custodialRelationships?: CustodialRelationship[];
    uploadedDocuments?: UploadedDocumentInfo[];
    deletedDocuments?: string[];
    history?: Activity[];

    constructor(data?: IFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.primaryFamilyContactPersonId = _data["primaryFamilyContactPersonId"];
            if (Array.isArray(_data["adults"])) {
                this.adults = [] as any;
                for (let item of _data["adults"])
                    this.adults!.push(ValueTupleOfPersonAndFamilyAdultRelationshipInfo.fromJS(item));
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Person.fromJS(item));
            }
            if (Array.isArray(_data["custodialRelationships"])) {
                this.custodialRelationships = [] as any;
                for (let item of _data["custodialRelationships"])
                    this.custodialRelationships!.push(CustodialRelationship.fromJS(item));
            }
            if (Array.isArray(_data["uploadedDocuments"])) {
                this.uploadedDocuments = [] as any;
                for (let item of _data["uploadedDocuments"])
                    this.uploadedDocuments!.push(UploadedDocumentInfo.fromJS(item));
            }
            if (Array.isArray(_data["deletedDocuments"])) {
                this.deletedDocuments = [] as any;
                for (let item of _data["deletedDocuments"])
                    this.deletedDocuments!.push(item);
            }
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(Activity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Family {
        data = typeof data === 'object' ? data : {};
        let result = new Family();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["primaryFamilyContactPersonId"] = this.primaryFamilyContactPersonId;
        if (Array.isArray(this.adults)) {
            data["adults"] = [];
            for (let item of this.adults)
                data["adults"].push(item.toJSON());
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.custodialRelationships)) {
            data["custodialRelationships"] = [];
            for (let item of this.custodialRelationships)
                data["custodialRelationships"].push(item.toJSON());
        }
        if (Array.isArray(this.uploadedDocuments)) {
            data["uploadedDocuments"] = [];
            for (let item of this.uploadedDocuments)
                data["uploadedDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.deletedDocuments)) {
            data["deletedDocuments"] = [];
            for (let item of this.deletedDocuments)
                data["deletedDocuments"].push(item);
        }
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFamily {
    id?: string;
    primaryFamilyContactPersonId?: string;
    adults?: ValueTupleOfPersonAndFamilyAdultRelationshipInfo[];
    children?: Person[];
    custodialRelationships?: CustodialRelationship[];
    uploadedDocuments?: UploadedDocumentInfo[];
    deletedDocuments?: string[];
    history?: Activity[];
}

export class ValueTupleOfPersonAndFamilyAdultRelationshipInfo implements IValueTupleOfPersonAndFamilyAdultRelationshipInfo {
    item1?: Person;
    item2?: FamilyAdultRelationshipInfo;

    constructor(data?: IValueTupleOfPersonAndFamilyAdultRelationshipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            this.item2 = _data["item2"] ? FamilyAdultRelationshipInfo.fromJS(_data["item2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValueTupleOfPersonAndFamilyAdultRelationshipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfPersonAndFamilyAdultRelationshipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValueTupleOfPersonAndFamilyAdultRelationshipInfo {
    item1?: Person;
    item2?: FamilyAdultRelationshipInfo;
}

export class Person implements IPerson {
    id?: string;
    userId?: string | undefined;
    active?: boolean;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    addresses?: Address[];
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[];
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[];
    preferredEmailAddressId?: string | undefined;
    concerns?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.active = _data["active"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            this.currentAddressId = _data["currentAddressId"];
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(PhoneNumber.fromJS(item));
            }
            this.preferredPhoneNumberId = _data["preferredPhoneNumberId"];
            if (Array.isArray(_data["emailAddresses"])) {
                this.emailAddresses = [] as any;
                for (let item of _data["emailAddresses"])
                    this.emailAddresses!.push(EmailAddress.fromJS(item));
            }
            this.preferredEmailAddressId = _data["preferredEmailAddressId"];
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["active"] = this.active;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["currentAddressId"] = this.currentAddressId;
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item.toJSON());
        }
        data["preferredPhoneNumberId"] = this.preferredPhoneNumberId;
        if (Array.isArray(this.emailAddresses)) {
            data["emailAddresses"] = [];
            for (let item of this.emailAddresses)
                data["emailAddresses"].push(item.toJSON());
        }
        data["preferredEmailAddressId"] = this.preferredEmailAddressId;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IPerson {
    id?: string;
    userId?: string | undefined;
    active?: boolean;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    addresses?: Address[];
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[];
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[];
    preferredEmailAddressId?: string | undefined;
    concerns?: string | undefined;
    notes?: string | undefined;
}

export enum Gender {
    Male = 0,
    Female = 1,
    SeeNotes = 2,
}

export abstract class Age implements IAge {

    protected _discriminator: string;

    constructor(data?: IAge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Age";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Age {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AgeInYears") {
            let result = new AgeInYears();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExactAge") {
            let result = new ExactAge();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'Age' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        return data;
    }
}

export interface IAge {
}

export class AgeInYears extends Age implements IAgeInYears {
    years?: number;
    asOf?: Date;

    constructor(data?: IAgeInYears) {
        super(data);
        this._discriminator = "AgeInYears";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.years = _data["years"];
            this.asOf = _data["asOf"] ? new Date(_data["asOf"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AgeInYears {
        data = typeof data === 'object' ? data : {};
        let result = new AgeInYears();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["years"] = this.years;
        data["asOf"] = this.asOf ? this.asOf.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAgeInYears extends IAge {
    years?: number;
    asOf?: Date;
}

export class ExactAge extends Age implements IExactAge {
    dateOfBirth?: Date;

    constructor(data?: IExactAge) {
        super(data);
        this._discriminator = "ExactAge";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExactAge {
        data = typeof data === 'object' ? data : {};
        let result = new ExactAge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IExactAge extends IAge {
    dateOfBirth?: Date;
}

export class Address implements IAddress {
    id?: string;
    line1?: string;
    line2?: string | undefined;
    city?: string;
    state?: string;
    postalCode?: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        return data;
    }
}

export interface IAddress {
    id?: string;
    line1?: string;
    line2?: string | undefined;
    city?: string;
    state?: string;
    postalCode?: string;
}

export class PhoneNumber implements IPhoneNumber {
    id?: string;
    number?: string;
    type?: PhoneNumberType;

    constructor(data?: IPhoneNumber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.number = _data["number"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): PhoneNumber {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["number"] = this.number;
        data["type"] = this.type;
        return data;
    }
}

export interface IPhoneNumber {
    id?: string;
    number?: string;
    type?: PhoneNumberType;
}

export enum PhoneNumberType {
    Mobile = 0,
    Home = 1,
    Work = 2,
    Fax = 3,
}

export class EmailAddress implements IEmailAddress {
    id?: string;
    address?: string;
    type?: EmailAddressType;

    constructor(data?: IEmailAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address = _data["address"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): EmailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new EmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["type"] = this.type;
        return data;
    }
}

export interface IEmailAddress {
    id?: string;
    address?: string;
    type?: EmailAddressType;
}

export enum EmailAddressType {
    Personal = 0,
    Work = 1,
}

export class FamilyAdultRelationshipInfo implements IFamilyAdultRelationshipInfo {
    relationshipToFamily?: string;
    isInHousehold?: boolean;

    constructor(data?: IFamilyAdultRelationshipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relationshipToFamily = _data["relationshipToFamily"];
            this.isInHousehold = _data["isInHousehold"];
        }
    }

    static fromJS(data: any): FamilyAdultRelationshipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyAdultRelationshipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationshipToFamily"] = this.relationshipToFamily;
        data["isInHousehold"] = this.isInHousehold;
        return data;
    }
}

export interface IFamilyAdultRelationshipInfo {
    relationshipToFamily?: string;
    isInHousehold?: boolean;
}

export class CustodialRelationship implements ICustodialRelationship {
    childId?: string;
    personId?: string;
    type?: CustodialRelationshipType;

    constructor(data?: ICustodialRelationship) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.childId = _data["childId"];
            this.personId = _data["personId"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CustodialRelationship {
        data = typeof data === 'object' ? data : {};
        let result = new CustodialRelationship();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childId"] = this.childId;
        data["personId"] = this.personId;
        data["type"] = this.type;
        return data;
    }
}

export interface ICustodialRelationship {
    childId?: string;
    personId?: string;
    type?: CustodialRelationshipType;
}

export enum CustodialRelationshipType {
    ParentWithCustody = 0,
    ParentWithCourtAppointedCustody = 1,
    LegalGuardian = 2,
}

export class UploadedDocumentInfo implements IUploadedDocumentInfo {
    userId?: string;
    timestampUtc?: Date;
    uploadedDocumentId?: string;
    uploadedFileName?: string;

    constructor(data?: IUploadedDocumentInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.uploadedFileName = _data["uploadedFileName"];
        }
    }

    static fromJS(data: any): UploadedDocumentInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UploadedDocumentInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["uploadedFileName"] = this.uploadedFileName;
        return data;
    }
}

export interface IUploadedDocumentInfo {
    userId?: string;
    timestampUtc?: Date;
    uploadedDocumentId?: string;
    uploadedFileName?: string;
}

export abstract class Activity implements IActivity {
    userId?: string;
    timestampUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;

    protected _discriminator: string;

    constructor(data?: IActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Activity";
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ArrangementRequirementCompleted") {
            let result = new ArrangementRequirementCompleted();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ChildLocationChanged") {
            let result = new ChildLocationChanged();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ReferralOpened") {
            let result = new ReferralOpened();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ReferralRequirementCompleted") {
            let result = new ReferralRequirementCompleted();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'Activity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["noteId"] = this.noteId;
        return data;
    }
}

export interface IActivity {
    userId?: string;
    timestampUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;
}

export class ArrangementRequirementCompleted extends Activity implements IArrangementRequirementCompleted {
    arrangementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;

    constructor(data?: IArrangementRequirementCompleted) {
        super(data);
        this._discriminator = "ArrangementRequirementCompleted";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.arrangementId = _data["arrangementId"];
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ArrangementRequirementCompleted {
        data = typeof data === 'object' ? data : {};
        let result = new ArrangementRequirementCompleted();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrangementId"] = this.arrangementId;
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IArrangementRequirementCompleted extends IActivity {
    arrangementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
}

export class ChildLocationChanged extends Activity implements IChildLocationChanged {
    arrangementId?: string;
    changedAtUtc?: Date;
    childLocationFamilyId?: string;
    childLocationReceivingAdultId?: string;
    plan?: ChildLocationPlan;

    constructor(data?: IChildLocationChanged) {
        super(data);
        this._discriminator = "ChildLocationChanged";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.arrangementId = _data["arrangementId"];
            this.changedAtUtc = _data["changedAtUtc"] ? new Date(_data["changedAtUtc"].toString()) : <any>undefined;
            this.childLocationFamilyId = _data["childLocationFamilyId"];
            this.childLocationReceivingAdultId = _data["childLocationReceivingAdultId"];
            this.plan = _data["plan"];
        }
    }

    static fromJS(data: any): ChildLocationChanged {
        data = typeof data === 'object' ? data : {};
        let result = new ChildLocationChanged();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrangementId"] = this.arrangementId;
        data["changedAtUtc"] = this.changedAtUtc ? this.changedAtUtc.toISOString() : <any>undefined;
        data["childLocationFamilyId"] = this.childLocationFamilyId;
        data["childLocationReceivingAdultId"] = this.childLocationReceivingAdultId;
        data["plan"] = this.plan;
        super.toJSON(data);
        return data;
    }
}

export interface IChildLocationChanged extends IActivity {
    arrangementId?: string;
    changedAtUtc?: Date;
    childLocationFamilyId?: string;
    childLocationReceivingAdultId?: string;
    plan?: ChildLocationPlan;
}

export enum ChildLocationPlan {
    OvernightHousing = 0,
    DaytimeChildCare = 1,
    WithParent = 2,
}

export class ReferralOpened extends Activity implements IReferralOpened {
    openedAtUtc?: Date;

    constructor(data?: IReferralOpened) {
        super(data);
        this._discriminator = "ReferralOpened";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.openedAtUtc = _data["openedAtUtc"] ? new Date(_data["openedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ReferralOpened {
        data = typeof data === 'object' ? data : {};
        let result = new ReferralOpened();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["openedAtUtc"] = this.openedAtUtc ? this.openedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IReferralOpened extends IActivity {
    openedAtUtc?: Date;
}

export class ReferralRequirementCompleted extends Activity implements IReferralRequirementCompleted {
    requirementName?: string;
    completedAtUtc?: Date;

    constructor(data?: IReferralRequirementCompleted) {
        super(data);
        this._discriminator = "ReferralRequirementCompleted";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ReferralRequirementCompleted {
        data = typeof data === 'object' ? data : {};
        let result = new ReferralRequirementCompleted();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IReferralRequirementCompleted extends IActivity {
    requirementName?: string;
    completedAtUtc?: Date;
}

export class PartneringFamilyInfo implements IPartneringFamilyInfo {
    openReferral?: Referral | undefined;
    closedReferrals?: Referral[];
    history?: Activity[];

    constructor(data?: IPartneringFamilyInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.openReferral = _data["openReferral"] ? Referral.fromJS(_data["openReferral"]) : <any>undefined;
            if (Array.isArray(_data["closedReferrals"])) {
                this.closedReferrals = [] as any;
                for (let item of _data["closedReferrals"])
                    this.closedReferrals!.push(Referral.fromJS(item));
            }
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(Activity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PartneringFamilyInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PartneringFamilyInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["openReferral"] = this.openReferral ? this.openReferral.toJSON() : <any>undefined;
        if (Array.isArray(this.closedReferrals)) {
            data["closedReferrals"] = [];
            for (let item of this.closedReferrals)
                data["closedReferrals"].push(item.toJSON());
        }
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPartneringFamilyInfo {
    openReferral?: Referral | undefined;
    closedReferrals?: Referral[];
    history?: Activity[];
}

export class Referral implements IReferral {
    id?: string;
    openedAtUtc?: Date;
    closedAtUtc?: Date | undefined;
    closeReason?: ReferralCloseReason | undefined;
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    missingRequirements?: string[];
    completedCustomFields?: CompletedCustomFieldInfo[];
    missingCustomFields?: string[];
    arrangements?: Arrangement[];

    constructor(data?: IReferral) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.openedAtUtc = _data["openedAtUtc"] ? new Date(_data["openedAtUtc"].toString()) : <any>undefined;
            this.closedAtUtc = _data["closedAtUtc"] ? new Date(_data["closedAtUtc"].toString()) : <any>undefined;
            this.closeReason = _data["closeReason"];
            if (Array.isArray(_data["completedRequirements"])) {
                this.completedRequirements = [] as any;
                for (let item of _data["completedRequirements"])
                    this.completedRequirements!.push(CompletedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["exemptedRequirements"])) {
                this.exemptedRequirements = [] as any;
                for (let item of _data["exemptedRequirements"])
                    this.exemptedRequirements!.push(ExemptedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["missingRequirements"])) {
                this.missingRequirements = [] as any;
                for (let item of _data["missingRequirements"])
                    this.missingRequirements!.push(item);
            }
            if (Array.isArray(_data["completedCustomFields"])) {
                this.completedCustomFields = [] as any;
                for (let item of _data["completedCustomFields"])
                    this.completedCustomFields!.push(CompletedCustomFieldInfo.fromJS(item));
            }
            if (Array.isArray(_data["missingCustomFields"])) {
                this.missingCustomFields = [] as any;
                for (let item of _data["missingCustomFields"])
                    this.missingCustomFields!.push(item);
            }
            if (Array.isArray(_data["arrangements"])) {
                this.arrangements = [] as any;
                for (let item of _data["arrangements"])
                    this.arrangements!.push(Arrangement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Referral {
        data = typeof data === 'object' ? data : {};
        let result = new Referral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["openedAtUtc"] = this.openedAtUtc ? this.openedAtUtc.toISOString() : <any>undefined;
        data["closedAtUtc"] = this.closedAtUtc ? this.closedAtUtc.toISOString() : <any>undefined;
        data["closeReason"] = this.closeReason;
        if (Array.isArray(this.completedRequirements)) {
            data["completedRequirements"] = [];
            for (let item of this.completedRequirements)
                data["completedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.exemptedRequirements)) {
            data["exemptedRequirements"] = [];
            for (let item of this.exemptedRequirements)
                data["exemptedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.missingRequirements)) {
            data["missingRequirements"] = [];
            for (let item of this.missingRequirements)
                data["missingRequirements"].push(item);
        }
        if (Array.isArray(this.completedCustomFields)) {
            data["completedCustomFields"] = [];
            for (let item of this.completedCustomFields)
                data["completedCustomFields"].push(item.toJSON());
        }
        if (Array.isArray(this.missingCustomFields)) {
            data["missingCustomFields"] = [];
            for (let item of this.missingCustomFields)
                data["missingCustomFields"].push(item);
        }
        if (Array.isArray(this.arrangements)) {
            data["arrangements"] = [];
            for (let item of this.arrangements)
                data["arrangements"].push(item.toJSON());
        }
        return data;
    }
}

export interface IReferral {
    id?: string;
    openedAtUtc?: Date;
    closedAtUtc?: Date | undefined;
    closeReason?: ReferralCloseReason | undefined;
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    missingRequirements?: string[];
    completedCustomFields?: CompletedCustomFieldInfo[];
    missingCustomFields?: string[];
    arrangements?: Arrangement[];
}

export enum ReferralCloseReason {
    NotAppropriate = 0,
    NoCapacity = 1,
    NoLongerNeeded = 2,
    Resourced = 3,
    NeedMet = 4,
}

export class CompletedRequirementInfo implements ICompletedRequirementInfo {
    userId?: string;
    timestampUtc?: Date;
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;

    constructor(data?: ICompletedRequirementInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): CompletedRequirementInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CompletedRequirementInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["noteId"] = this.noteId;
        return data;
    }
}

export interface ICompletedRequirementInfo {
    userId?: string;
    timestampUtc?: Date;
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;
}

export class ExemptedRequirementInfo implements IExemptedRequirementInfo {
    userId?: string;
    timestampUtc?: Date;
    requirementName?: string;
    dueDate?: Date | undefined;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;

    constructor(data?: IExemptedRequirementInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.requirementName = _data["requirementName"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
            this.additionalComments = _data["additionalComments"];
            this.exemptionExpiresAtUtc = _data["exemptionExpiresAtUtc"] ? new Date(_data["exemptionExpiresAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExemptedRequirementInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ExemptedRequirementInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["requirementName"] = this.requirementName;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["additionalComments"] = this.additionalComments;
        data["exemptionExpiresAtUtc"] = this.exemptionExpiresAtUtc ? this.exemptionExpiresAtUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IExemptedRequirementInfo {
    userId?: string;
    timestampUtc?: Date;
    requirementName?: string;
    dueDate?: Date | undefined;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;
}

export class CompletedCustomFieldInfo implements ICompletedCustomFieldInfo {
    userId?: string;
    timestampUtc?: Date;
    completedCustomFieldId?: string;
    customFieldName?: string;
    customFieldType?: CustomFieldType;
    value?: any | undefined;

    constructor(data?: ICompletedCustomFieldInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.completedCustomFieldId = _data["completedCustomFieldId"];
            this.customFieldName = _data["customFieldName"];
            this.customFieldType = _data["customFieldType"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CompletedCustomFieldInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CompletedCustomFieldInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["completedCustomFieldId"] = this.completedCustomFieldId;
        data["customFieldName"] = this.customFieldName;
        data["customFieldType"] = this.customFieldType;
        data["value"] = this.value;
        return data;
    }
}

export interface ICompletedCustomFieldInfo {
    userId?: string;
    timestampUtc?: Date;
    completedCustomFieldId?: string;
    customFieldName?: string;
    customFieldType?: CustomFieldType;
    value?: any | undefined;
}

export class Arrangement implements IArrangement {
    id?: string;
    arrangementType?: string;
    partneringFamilyPersonId?: string;
    phase?: ArrangementPhase;
    requestedAtUtc?: Date;
    startedAtUtc?: Date | undefined;
    endedAtUtc?: Date | undefined;
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    missingRequirements?: MissingArrangementRequirement[];
    individualVolunteerAssignments?: IndividualVolunteerAssignment[];
    familyVolunteerAssignments?: FamilyVolunteerAssignment[];
    childrenLocationHistory?: ChildLocationHistoryEntry[];

    constructor(data?: IArrangement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.arrangementType = _data["arrangementType"];
            this.partneringFamilyPersonId = _data["partneringFamilyPersonId"];
            this.phase = _data["phase"];
            this.requestedAtUtc = _data["requestedAtUtc"] ? new Date(_data["requestedAtUtc"].toString()) : <any>undefined;
            this.startedAtUtc = _data["startedAtUtc"] ? new Date(_data["startedAtUtc"].toString()) : <any>undefined;
            this.endedAtUtc = _data["endedAtUtc"] ? new Date(_data["endedAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["completedRequirements"])) {
                this.completedRequirements = [] as any;
                for (let item of _data["completedRequirements"])
                    this.completedRequirements!.push(CompletedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["exemptedRequirements"])) {
                this.exemptedRequirements = [] as any;
                for (let item of _data["exemptedRequirements"])
                    this.exemptedRequirements!.push(ExemptedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["missingRequirements"])) {
                this.missingRequirements = [] as any;
                for (let item of _data["missingRequirements"])
                    this.missingRequirements!.push(MissingArrangementRequirement.fromJS(item));
            }
            if (Array.isArray(_data["individualVolunteerAssignments"])) {
                this.individualVolunteerAssignments = [] as any;
                for (let item of _data["individualVolunteerAssignments"])
                    this.individualVolunteerAssignments!.push(IndividualVolunteerAssignment.fromJS(item));
            }
            if (Array.isArray(_data["familyVolunteerAssignments"])) {
                this.familyVolunteerAssignments = [] as any;
                for (let item of _data["familyVolunteerAssignments"])
                    this.familyVolunteerAssignments!.push(FamilyVolunteerAssignment.fromJS(item));
            }
            if (Array.isArray(_data["childrenLocationHistory"])) {
                this.childrenLocationHistory = [] as any;
                for (let item of _data["childrenLocationHistory"])
                    this.childrenLocationHistory!.push(ChildLocationHistoryEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Arrangement {
        data = typeof data === 'object' ? data : {};
        let result = new Arrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["arrangementType"] = this.arrangementType;
        data["partneringFamilyPersonId"] = this.partneringFamilyPersonId;
        data["phase"] = this.phase;
        data["requestedAtUtc"] = this.requestedAtUtc ? this.requestedAtUtc.toISOString() : <any>undefined;
        data["startedAtUtc"] = this.startedAtUtc ? this.startedAtUtc.toISOString() : <any>undefined;
        data["endedAtUtc"] = this.endedAtUtc ? this.endedAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.completedRequirements)) {
            data["completedRequirements"] = [];
            for (let item of this.completedRequirements)
                data["completedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.exemptedRequirements)) {
            data["exemptedRequirements"] = [];
            for (let item of this.exemptedRequirements)
                data["exemptedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.missingRequirements)) {
            data["missingRequirements"] = [];
            for (let item of this.missingRequirements)
                data["missingRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.individualVolunteerAssignments)) {
            data["individualVolunteerAssignments"] = [];
            for (let item of this.individualVolunteerAssignments)
                data["individualVolunteerAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.familyVolunteerAssignments)) {
            data["familyVolunteerAssignments"] = [];
            for (let item of this.familyVolunteerAssignments)
                data["familyVolunteerAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.childrenLocationHistory)) {
            data["childrenLocationHistory"] = [];
            for (let item of this.childrenLocationHistory)
                data["childrenLocationHistory"].push(item.toJSON());
        }
        return data;
    }
}

export interface IArrangement {
    id?: string;
    arrangementType?: string;
    partneringFamilyPersonId?: string;
    phase?: ArrangementPhase;
    requestedAtUtc?: Date;
    startedAtUtc?: Date | undefined;
    endedAtUtc?: Date | undefined;
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    missingRequirements?: MissingArrangementRequirement[];
    individualVolunteerAssignments?: IndividualVolunteerAssignment[];
    familyVolunteerAssignments?: FamilyVolunteerAssignment[];
    childrenLocationHistory?: ChildLocationHistoryEntry[];
}

export enum ArrangementPhase {
    SettingUp = 0,
    ReadyToStart = 1,
    Started = 2,
    Ended = 3,
    Cancelled = 4,
}

export class MissingArrangementRequirement implements IMissingArrangementRequirement {
    actionName?: string;
    dueBy?: Date | undefined;
    pastDueSince?: Date | undefined;

    constructor(data?: IMissingArrangementRequirement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionName = _data["actionName"];
            this.dueBy = _data["dueBy"] ? new Date(_data["dueBy"].toString()) : <any>undefined;
            this.pastDueSince = _data["pastDueSince"] ? new Date(_data["pastDueSince"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MissingArrangementRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new MissingArrangementRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionName"] = this.actionName;
        data["dueBy"] = this.dueBy ? this.dueBy.toISOString() : <any>undefined;
        data["pastDueSince"] = this.pastDueSince ? this.pastDueSince.toISOString() : <any>undefined;
        return data;
    }
}

export interface IMissingArrangementRequirement {
    actionName?: string;
    dueBy?: Date | undefined;
    pastDueSince?: Date | undefined;
}

export class IndividualVolunteerAssignment implements IIndividualVolunteerAssignment {
    familyId?: string;
    personId?: string;
    arrangementFunction?: string;

    constructor(data?: IIndividualVolunteerAssignment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.personId = _data["personId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): IndividualVolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new IndividualVolunteerAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["personId"] = this.personId;
        data["arrangementFunction"] = this.arrangementFunction;
        return data;
    }
}

export interface IIndividualVolunteerAssignment {
    familyId?: string;
    personId?: string;
    arrangementFunction?: string;
}

export class FamilyVolunteerAssignment implements IFamilyVolunteerAssignment {
    familyId?: string;
    arrangementFunction?: string;

    constructor(data?: IFamilyVolunteerAssignment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): FamilyVolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyVolunteerAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["arrangementFunction"] = this.arrangementFunction;
        return data;
    }
}

export interface IFamilyVolunteerAssignment {
    familyId?: string;
    arrangementFunction?: string;
}

export class ChildLocationHistoryEntry implements IChildLocationHistoryEntry {
    userId?: string;
    timestampUtc?: Date;
    childLocationFamilyId?: string;
    childLocationReceivingAdultId?: string;
    plan?: ChildLocationPlan;
    noteId?: string | undefined;

    constructor(data?: IChildLocationHistoryEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.childLocationFamilyId = _data["childLocationFamilyId"];
            this.childLocationReceivingAdultId = _data["childLocationReceivingAdultId"];
            this.plan = _data["plan"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): ChildLocationHistoryEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ChildLocationHistoryEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["childLocationFamilyId"] = this.childLocationFamilyId;
        data["childLocationReceivingAdultId"] = this.childLocationReceivingAdultId;
        data["plan"] = this.plan;
        data["noteId"] = this.noteId;
        return data;
    }
}

export interface IChildLocationHistoryEntry {
    userId?: string;
    timestampUtc?: Date;
    childLocationFamilyId?: string;
    childLocationReceivingAdultId?: string;
    plan?: ChildLocationPlan;
    noteId?: string | undefined;
}

export class VolunteerFamilyInfo implements IVolunteerFamilyInfo {
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    removedRoles?: RemovedRole[];
    missingRequirements?: string[];
    availableApplications?: string[];
    familyRoleApprovals?: { [key: string]: RoleVersionApproval[]; };
    individualVolunteers?: { [key: string]: VolunteerInfo; };
    history?: Activity[];

    constructor(data?: IVolunteerFamilyInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["completedRequirements"])) {
                this.completedRequirements = [] as any;
                for (let item of _data["completedRequirements"])
                    this.completedRequirements!.push(CompletedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["exemptedRequirements"])) {
                this.exemptedRequirements = [] as any;
                for (let item of _data["exemptedRequirements"])
                    this.exemptedRequirements!.push(ExemptedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["removedRoles"])) {
                this.removedRoles = [] as any;
                for (let item of _data["removedRoles"])
                    this.removedRoles!.push(RemovedRole.fromJS(item));
            }
            if (Array.isArray(_data["missingRequirements"])) {
                this.missingRequirements = [] as any;
                for (let item of _data["missingRequirements"])
                    this.missingRequirements!.push(item);
            }
            if (Array.isArray(_data["availableApplications"])) {
                this.availableApplications = [] as any;
                for (let item of _data["availableApplications"])
                    this.availableApplications!.push(item);
            }
            if (_data["familyRoleApprovals"]) {
                this.familyRoleApprovals = {} as any;
                for (let key in _data["familyRoleApprovals"]) {
                    if (_data["familyRoleApprovals"].hasOwnProperty(key))
                        (<any>this.familyRoleApprovals)![key] = _data["familyRoleApprovals"][key] ? _data["familyRoleApprovals"][key].map((i: any) => RoleVersionApproval.fromJS(i)) : [];
                }
            }
            if (_data["individualVolunteers"]) {
                this.individualVolunteers = {} as any;
                for (let key in _data["individualVolunteers"]) {
                    if (_data["individualVolunteers"].hasOwnProperty(key))
                        (<any>this.individualVolunteers)![key] = _data["individualVolunteers"][key] ? VolunteerInfo.fromJS(_data["individualVolunteers"][key]) : new VolunteerInfo();
                }
            }
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(Activity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VolunteerFamilyInfo {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamilyInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.completedRequirements)) {
            data["completedRequirements"] = [];
            for (let item of this.completedRequirements)
                data["completedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.exemptedRequirements)) {
            data["exemptedRequirements"] = [];
            for (let item of this.exemptedRequirements)
                data["exemptedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.removedRoles)) {
            data["removedRoles"] = [];
            for (let item of this.removedRoles)
                data["removedRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.missingRequirements)) {
            data["missingRequirements"] = [];
            for (let item of this.missingRequirements)
                data["missingRequirements"].push(item);
        }
        if (Array.isArray(this.availableApplications)) {
            data["availableApplications"] = [];
            for (let item of this.availableApplications)
                data["availableApplications"].push(item);
        }
        if (this.familyRoleApprovals) {
            data["familyRoleApprovals"] = {};
            for (let key in this.familyRoleApprovals) {
                if (this.familyRoleApprovals.hasOwnProperty(key))
                    (<any>data["familyRoleApprovals"])[key] = this.familyRoleApprovals[key];
            }
        }
        if (this.individualVolunteers) {
            data["individualVolunteers"] = {};
            for (let key in this.individualVolunteers) {
                if (this.individualVolunteers.hasOwnProperty(key))
                    (<any>data["individualVolunteers"])[key] = this.individualVolunteers[key] ? this.individualVolunteers[key].toJSON() : <any>undefined;
            }
        }
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVolunteerFamilyInfo {
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    removedRoles?: RemovedRole[];
    missingRequirements?: string[];
    availableApplications?: string[];
    familyRoleApprovals?: { [key: string]: RoleVersionApproval[]; };
    individualVolunteers?: { [key: string]: VolunteerInfo; };
    history?: Activity[];
}

export class RemovedRole implements IRemovedRole {
    roleName?: string;
    reason?: RoleRemovalReason;
    additionalComments?: string | undefined;

    constructor(data?: IRemovedRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleName = _data["roleName"];
            this.reason = _data["reason"];
            this.additionalComments = _data["additionalComments"];
        }
    }

    static fromJS(data: any): RemovedRole {
        data = typeof data === 'object' ? data : {};
        let result = new RemovedRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        data["reason"] = this.reason;
        data["additionalComments"] = this.additionalComments;
        return data;
    }
}

export interface IRemovedRole {
    roleName?: string;
    reason?: RoleRemovalReason;
    additionalComments?: string | undefined;
}

export enum RoleRemovalReason {
    Inactive = 0,
    OptOut = 1,
    Denied = 2,
}

export class RoleVersionApproval implements IRoleVersionApproval {
    version?: string;
    approvalStatus?: RoleApprovalStatus;

    constructor(data?: IRoleVersionApproval) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.approvalStatus = _data["approvalStatus"];
        }
    }

    static fromJS(data: any): RoleVersionApproval {
        data = typeof data === 'object' ? data : {};
        let result = new RoleVersionApproval();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["approvalStatus"] = this.approvalStatus;
        return data;
    }
}

export interface IRoleVersionApproval {
    version?: string;
    approvalStatus?: RoleApprovalStatus;
}

export enum RoleApprovalStatus {
    Prospective = 0,
    Approved = 1,
    Onboarded = 2,
}

export class VolunteerInfo implements IVolunteerInfo {
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    removedRoles?: RemovedRole[];
    missingRequirements?: string[];
    availableApplications?: string[];
    individualRoleApprovals?: { [key: string]: RoleVersionApproval[]; };

    constructor(data?: IVolunteerInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["completedRequirements"])) {
                this.completedRequirements = [] as any;
                for (let item of _data["completedRequirements"])
                    this.completedRequirements!.push(CompletedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["exemptedRequirements"])) {
                this.exemptedRequirements = [] as any;
                for (let item of _data["exemptedRequirements"])
                    this.exemptedRequirements!.push(ExemptedRequirementInfo.fromJS(item));
            }
            if (Array.isArray(_data["removedRoles"])) {
                this.removedRoles = [] as any;
                for (let item of _data["removedRoles"])
                    this.removedRoles!.push(RemovedRole.fromJS(item));
            }
            if (Array.isArray(_data["missingRequirements"])) {
                this.missingRequirements = [] as any;
                for (let item of _data["missingRequirements"])
                    this.missingRequirements!.push(item);
            }
            if (Array.isArray(_data["availableApplications"])) {
                this.availableApplications = [] as any;
                for (let item of _data["availableApplications"])
                    this.availableApplications!.push(item);
            }
            if (_data["individualRoleApprovals"]) {
                this.individualRoleApprovals = {} as any;
                for (let key in _data["individualRoleApprovals"]) {
                    if (_data["individualRoleApprovals"].hasOwnProperty(key))
                        (<any>this.individualRoleApprovals)![key] = _data["individualRoleApprovals"][key] ? _data["individualRoleApprovals"][key].map((i: any) => RoleVersionApproval.fromJS(i)) : [];
                }
            }
        }
    }

    static fromJS(data: any): VolunteerInfo {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.completedRequirements)) {
            data["completedRequirements"] = [];
            for (let item of this.completedRequirements)
                data["completedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.exemptedRequirements)) {
            data["exemptedRequirements"] = [];
            for (let item of this.exemptedRequirements)
                data["exemptedRequirements"].push(item.toJSON());
        }
        if (Array.isArray(this.removedRoles)) {
            data["removedRoles"] = [];
            for (let item of this.removedRoles)
                data["removedRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.missingRequirements)) {
            data["missingRequirements"] = [];
            for (let item of this.missingRequirements)
                data["missingRequirements"].push(item);
        }
        if (Array.isArray(this.availableApplications)) {
            data["availableApplications"] = [];
            for (let item of this.availableApplications)
                data["availableApplications"].push(item);
        }
        if (this.individualRoleApprovals) {
            data["individualRoleApprovals"] = {};
            for (let key in this.individualRoleApprovals) {
                if (this.individualRoleApprovals.hasOwnProperty(key))
                    (<any>data["individualRoleApprovals"])[key] = this.individualRoleApprovals[key];
            }
        }
        return data;
    }
}

export interface IVolunteerInfo {
    completedRequirements?: CompletedRequirementInfo[];
    exemptedRequirements?: ExemptedRequirementInfo[];
    removedRoles?: RemovedRole[];
    missingRequirements?: string[];
    availableApplications?: string[];
    individualRoleApprovals?: { [key: string]: RoleVersionApproval[]; };
}

export class Note implements INote {
    id?: string;
    authorId?: string;
    timestampUtc?: Date;
    contents?: string | undefined;
    status?: NoteStatus;

    constructor(data?: INote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.authorId = _data["authorId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.contents = _data["contents"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Note {
        data = typeof data === 'object' ? data : {};
        let result = new Note();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["authorId"] = this.authorId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["contents"] = this.contents;
        data["status"] = this.status;
        return data;
    }
}

export interface INote {
    id?: string;
    authorId?: string;
    timestampUtc?: Date;
    contents?: string | undefined;
    status?: NoteStatus;
}

export enum NoteStatus {
    Draft = 0,
    Approved = 1,
}

export abstract class DirectoryCommand implements IDirectoryCommand {

    protected _discriminator: string;

    constructor(data?: IDirectoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "DirectoryCommand";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DirectoryCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AddAdultToFamilyCommand") {
            let result = new AddAdultToFamilyCommand();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AddChildToFamilyCommand") {
            let result = new AddChildToFamilyCommand();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreatePartneringFamilyWithNewAdultCommand") {
            let result = new CreatePartneringFamilyWithNewAdultCommand();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateVolunteerFamilyWithNewAdultCommand") {
            let result = new CreateVolunteerFamilyWithNewAdultCommand();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'DirectoryCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        return data;
    }
}

export interface IDirectoryCommand {
}

export class AddAdultToFamilyCommand extends DirectoryCommand implements IAddAdultToFamilyCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address | undefined;
    phoneNumber?: PhoneNumber | undefined;
    emailAddress?: EmailAddress | undefined;

    constructor(data?: IAddAdultToFamilyCommand) {
        super(data);
        this._discriminator = "AddAdultToFamilyCommand";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            this.familyAdultRelationshipInfo = _data["familyAdultRelationshipInfo"] ? FamilyAdultRelationshipInfo.fromJS(_data["familyAdultRelationshipInfo"]) : <any>undefined;
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddAdultToFamilyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddAdultToFamilyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        data["familyAdultRelationshipInfo"] = this.familyAdultRelationshipInfo ? this.familyAdultRelationshipInfo.toJSON() : <any>undefined;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAddAdultToFamilyCommand extends IDirectoryCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address | undefined;
    phoneNumber?: PhoneNumber | undefined;
    emailAddress?: EmailAddress | undefined;
}

export class AddChildToFamilyCommand extends DirectoryCommand implements IAddChildToFamilyCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    custodialRelationships?: CustodialRelationship[];
    concerns?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IAddChildToFamilyCommand) {
        super(data);
        this._discriminator = "AddChildToFamilyCommand";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            if (Array.isArray(_data["custodialRelationships"])) {
                this.custodialRelationships = [] as any;
                for (let item of _data["custodialRelationships"])
                    this.custodialRelationships!.push(CustodialRelationship.fromJS(item));
            }
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): AddChildToFamilyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddChildToFamilyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        if (Array.isArray(this.custodialRelationships)) {
            data["custodialRelationships"] = [];
            for (let item of this.custodialRelationships)
                data["custodialRelationships"].push(item.toJSON());
        }
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        super.toJSON(data);
        return data;
    }
}

export interface IAddChildToFamilyCommand extends IDirectoryCommand {
    familyId?: string;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    custodialRelationships?: CustodialRelationship[];
    concerns?: string | undefined;
    notes?: string | undefined;
}

export class CreatePartneringFamilyWithNewAdultCommand extends DirectoryCommand implements ICreatePartneringFamilyWithNewAdultCommand {
    referralOpenedAtUtc?: Date;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address;
    phoneNumber?: PhoneNumber;
    emailAddress?: EmailAddress;

    constructor(data?: ICreatePartneringFamilyWithNewAdultCommand) {
        super(data);
        this._discriminator = "CreatePartneringFamilyWithNewAdultCommand";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.referralOpenedAtUtc = _data["referralOpenedAtUtc"] ? new Date(_data["referralOpenedAtUtc"].toString()) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            this.familyAdultRelationshipInfo = _data["familyAdultRelationshipInfo"] ? FamilyAdultRelationshipInfo.fromJS(_data["familyAdultRelationshipInfo"]) : <any>undefined;
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreatePartneringFamilyWithNewAdultCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePartneringFamilyWithNewAdultCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referralOpenedAtUtc"] = this.referralOpenedAtUtc ? this.referralOpenedAtUtc.toISOString() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        data["familyAdultRelationshipInfo"] = this.familyAdultRelationshipInfo ? this.familyAdultRelationshipInfo.toJSON() : <any>undefined;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICreatePartneringFamilyWithNewAdultCommand extends IDirectoryCommand {
    referralOpenedAtUtc?: Date;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address;
    phoneNumber?: PhoneNumber;
    emailAddress?: EmailAddress;
}

export class CreateVolunteerFamilyWithNewAdultCommand extends DirectoryCommand implements ICreateVolunteerFamilyWithNewAdultCommand {
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address;
    phoneNumber?: PhoneNumber;
    emailAddress?: EmailAddress;

    constructor(data?: ICreateVolunteerFamilyWithNewAdultCommand) {
        super(data);
        this._discriminator = "CreateVolunteerFamilyWithNewAdultCommand";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            this.familyAdultRelationshipInfo = _data["familyAdultRelationshipInfo"] ? FamilyAdultRelationshipInfo.fromJS(_data["familyAdultRelationshipInfo"]) : <any>undefined;
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateVolunteerFamilyWithNewAdultCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVolunteerFamilyWithNewAdultCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        data["familyAdultRelationshipInfo"] = this.familyAdultRelationshipInfo ? this.familyAdultRelationshipInfo.toJSON() : <any>undefined;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateVolunteerFamilyWithNewAdultCommand extends IDirectoryCommand {
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    familyAdultRelationshipInfo?: FamilyAdultRelationshipInfo;
    concerns?: string | undefined;
    notes?: string | undefined;
    address?: Address;
    phoneNumber?: PhoneNumber;
    emailAddress?: EmailAddress;
}

export abstract class FamilyCommand implements IFamilyCommand {
    familyId?: string;

    protected _discriminator: string;

    constructor(data?: IFamilyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "FamilyCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): FamilyCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AddAdultToFamily") {
            let result = new AddAdultToFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AddChildToFamily") {
            let result = new AddChildToFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AddCustodialRelationship") {
            let result = new AddCustodialRelationship();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateFamily") {
            let result = new CreateFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "DeleteUploadedFamilyDocument") {
            let result = new DeleteUploadedFamilyDocument();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "RemoveCustodialRelationship") {
            let result = new RemoveCustodialRelationship();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdateAdultRelationshipToFamily") {
            let result = new UpdateAdultRelationshipToFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdateCustodialRelationshipType") {
            let result = new UpdateCustodialRelationshipType();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadFamilyDocument") {
            let result = new UploadFamilyDocument();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'FamilyCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["familyId"] = this.familyId;
        return data;
    }
}

export interface IFamilyCommand {
    familyId?: string;
}

export class AddAdultToFamily extends FamilyCommand implements IAddAdultToFamily {
    adultPersonId?: string;
    relationshipToFamily?: FamilyAdultRelationshipInfo;

    constructor(data?: IAddAdultToFamily) {
        super(data);
        this._discriminator = "AddAdultToFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adultPersonId = _data["adultPersonId"];
            this.relationshipToFamily = _data["relationshipToFamily"] ? FamilyAdultRelationshipInfo.fromJS(_data["relationshipToFamily"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddAdultToFamily {
        data = typeof data === 'object' ? data : {};
        let result = new AddAdultToFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adultPersonId"] = this.adultPersonId;
        data["relationshipToFamily"] = this.relationshipToFamily ? this.relationshipToFamily.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAddAdultToFamily extends IFamilyCommand {
    adultPersonId?: string;
    relationshipToFamily?: FamilyAdultRelationshipInfo;
}

export class AddChildToFamily extends FamilyCommand implements IAddChildToFamily {
    childPersonId?: string;
    custodialRelationships?: CustodialRelationship[];

    constructor(data?: IAddChildToFamily) {
        super(data);
        this._discriminator = "AddChildToFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.childPersonId = _data["childPersonId"];
            if (Array.isArray(_data["custodialRelationships"])) {
                this.custodialRelationships = [] as any;
                for (let item of _data["custodialRelationships"])
                    this.custodialRelationships!.push(CustodialRelationship.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddChildToFamily {
        data = typeof data === 'object' ? data : {};
        let result = new AddChildToFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childPersonId"] = this.childPersonId;
        if (Array.isArray(this.custodialRelationships)) {
            data["custodialRelationships"] = [];
            for (let item of this.custodialRelationships)
                data["custodialRelationships"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IAddChildToFamily extends IFamilyCommand {
    childPersonId?: string;
    custodialRelationships?: CustodialRelationship[];
}

export class AddCustodialRelationship extends FamilyCommand implements IAddCustodialRelationship {
    custodialRelationship?: CustodialRelationship;

    constructor(data?: IAddCustodialRelationship) {
        super(data);
        this._discriminator = "AddCustodialRelationship";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.custodialRelationship = _data["custodialRelationship"] ? CustodialRelationship.fromJS(_data["custodialRelationship"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddCustodialRelationship {
        data = typeof data === 'object' ? data : {};
        let result = new AddCustodialRelationship();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custodialRelationship"] = this.custodialRelationship ? this.custodialRelationship.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAddCustodialRelationship extends IFamilyCommand {
    custodialRelationship?: CustodialRelationship;
}

export class CreateFamily extends FamilyCommand implements ICreateFamily {
    primaryFamilyContactPersonId?: string;
    adults?: ValueTupleOfGuidAndFamilyAdultRelationshipInfo[];
    children?: string[];
    custodialRelationships?: CustodialRelationship[];

    constructor(data?: ICreateFamily) {
        super(data);
        this._discriminator = "CreateFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.primaryFamilyContactPersonId = _data["primaryFamilyContactPersonId"];
            if (Array.isArray(_data["adults"])) {
                this.adults = [] as any;
                for (let item of _data["adults"])
                    this.adults!.push(ValueTupleOfGuidAndFamilyAdultRelationshipInfo.fromJS(item));
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(item);
            }
            if (Array.isArray(_data["custodialRelationships"])) {
                this.custodialRelationships = [] as any;
                for (let item of _data["custodialRelationships"])
                    this.custodialRelationships!.push(CustodialRelationship.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateFamily {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["primaryFamilyContactPersonId"] = this.primaryFamilyContactPersonId;
        if (Array.isArray(this.adults)) {
            data["adults"] = [];
            for (let item of this.adults)
                data["adults"].push(item.toJSON());
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item);
        }
        if (Array.isArray(this.custodialRelationships)) {
            data["custodialRelationships"] = [];
            for (let item of this.custodialRelationships)
                data["custodialRelationships"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICreateFamily extends IFamilyCommand {
    primaryFamilyContactPersonId?: string;
    adults?: ValueTupleOfGuidAndFamilyAdultRelationshipInfo[];
    children?: string[];
    custodialRelationships?: CustodialRelationship[];
}

export class ValueTupleOfGuidAndFamilyAdultRelationshipInfo implements IValueTupleOfGuidAndFamilyAdultRelationshipInfo {
    item1?: string;
    item2?: FamilyAdultRelationshipInfo;

    constructor(data?: IValueTupleOfGuidAndFamilyAdultRelationshipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"];
            this.item2 = _data["item2"] ? FamilyAdultRelationshipInfo.fromJS(_data["item2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValueTupleOfGuidAndFamilyAdultRelationshipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfGuidAndFamilyAdultRelationshipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValueTupleOfGuidAndFamilyAdultRelationshipInfo {
    item1?: string;
    item2?: FamilyAdultRelationshipInfo;
}

export class DeleteUploadedFamilyDocument extends FamilyCommand implements IDeleteUploadedFamilyDocument {
    uploadedDocumentId?: string;

    constructor(data?: IDeleteUploadedFamilyDocument) {
        super(data);
        this._discriminator = "DeleteUploadedFamilyDocument";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): DeleteUploadedFamilyDocument {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteUploadedFamilyDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data;
    }
}

export interface IDeleteUploadedFamilyDocument extends IFamilyCommand {
    uploadedDocumentId?: string;
}

export class RemoveCustodialRelationship extends FamilyCommand implements IRemoveCustodialRelationship {
    childPersonId?: string;
    adultPersonId?: string;

    constructor(data?: IRemoveCustodialRelationship) {
        super(data);
        this._discriminator = "RemoveCustodialRelationship";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.childPersonId = _data["childPersonId"];
            this.adultPersonId = _data["adultPersonId"];
        }
    }

    static fromJS(data: any): RemoveCustodialRelationship {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveCustodialRelationship();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childPersonId"] = this.childPersonId;
        data["adultPersonId"] = this.adultPersonId;
        super.toJSON(data);
        return data;
    }
}

export interface IRemoveCustodialRelationship extends IFamilyCommand {
    childPersonId?: string;
    adultPersonId?: string;
}

export class UpdateAdultRelationshipToFamily extends FamilyCommand implements IUpdateAdultRelationshipToFamily {
    adultPersonId?: string;
    relationshipToFamily?: FamilyAdultRelationshipInfo;

    constructor(data?: IUpdateAdultRelationshipToFamily) {
        super(data);
        this._discriminator = "UpdateAdultRelationshipToFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adultPersonId = _data["adultPersonId"];
            this.relationshipToFamily = _data["relationshipToFamily"] ? FamilyAdultRelationshipInfo.fromJS(_data["relationshipToFamily"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateAdultRelationshipToFamily {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAdultRelationshipToFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adultPersonId"] = this.adultPersonId;
        data["relationshipToFamily"] = this.relationshipToFamily ? this.relationshipToFamily.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateAdultRelationshipToFamily extends IFamilyCommand {
    adultPersonId?: string;
    relationshipToFamily?: FamilyAdultRelationshipInfo;
}

export class UpdateCustodialRelationshipType extends FamilyCommand implements IUpdateCustodialRelationshipType {
    childPersonId?: string;
    adultPersonId?: string;
    type?: CustodialRelationshipType;

    constructor(data?: IUpdateCustodialRelationshipType) {
        super(data);
        this._discriminator = "UpdateCustodialRelationshipType";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.childPersonId = _data["childPersonId"];
            this.adultPersonId = _data["adultPersonId"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UpdateCustodialRelationshipType {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustodialRelationshipType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childPersonId"] = this.childPersonId;
        data["adultPersonId"] = this.adultPersonId;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateCustodialRelationshipType extends IFamilyCommand {
    childPersonId?: string;
    adultPersonId?: string;
    type?: CustodialRelationshipType;
}

export class UploadFamilyDocument extends FamilyCommand implements IUploadFamilyDocument {
    uploadedDocumentId?: string;
    uploadedFileName?: string;

    constructor(data?: IUploadFamilyDocument) {
        super(data);
        this._discriminator = "UploadFamilyDocument";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.uploadedFileName = _data["uploadedFileName"];
        }
    }

    static fromJS(data: any): UploadFamilyDocument {
        data = typeof data === 'object' ? data : {};
        let result = new UploadFamilyDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["uploadedFileName"] = this.uploadedFileName;
        super.toJSON(data);
        return data;
    }
}

export interface IUploadFamilyDocument extends IFamilyCommand {
    uploadedDocumentId?: string;
    uploadedFileName?: string;
}

export abstract class PersonCommand implements IPersonCommand {
    personId?: string;

    protected _discriminator: string;

    constructor(data?: IPersonCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "PersonCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): PersonCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AddPersonAddress") {
            let result = new AddPersonAddress();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AddPersonEmailAddress") {
            let result = new AddPersonEmailAddress();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AddPersonPhoneNumber") {
            let result = new AddPersonPhoneNumber();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreatePerson") {
            let result = new CreatePerson();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UndoCreatePerson") {
            let result = new UndoCreatePerson();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonAddress") {
            let result = new UpdatePersonAddress();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonAge") {
            let result = new UpdatePersonAge();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonConcerns") {
            let result = new UpdatePersonConcerns();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonEmailAddress") {
            let result = new UpdatePersonEmailAddress();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonName") {
            let result = new UpdatePersonName();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonNotes") {
            let result = new UpdatePersonNotes();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonPhoneNumber") {
            let result = new UpdatePersonPhoneNumber();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdatePersonUserLink") {
            let result = new UpdatePersonUserLink();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'PersonCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["personId"] = this.personId;
        return data;
    }
}

export interface IPersonCommand {
    personId?: string;
}

export class AddPersonAddress extends PersonCommand implements IAddPersonAddress {
    address?: Address;
    isCurrentAddress?: boolean;

    constructor(data?: IAddPersonAddress) {
        super(data);
        this._discriminator = "AddPersonAddress";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.isCurrentAddress = _data["isCurrentAddress"];
        }
    }

    static fromJS(data: any): AddPersonAddress {
        data = typeof data === 'object' ? data : {};
        let result = new AddPersonAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["isCurrentAddress"] = this.isCurrentAddress;
        super.toJSON(data);
        return data;
    }
}

export interface IAddPersonAddress extends IPersonCommand {
    address?: Address;
    isCurrentAddress?: boolean;
}

export class AddPersonEmailAddress extends PersonCommand implements IAddPersonEmailAddress {
    emailAddress?: EmailAddress;
    isPreferredEmailAddress?: boolean;

    constructor(data?: IAddPersonEmailAddress) {
        super(data);
        this._discriminator = "AddPersonEmailAddress";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
            this.isPreferredEmailAddress = _data["isPreferredEmailAddress"];
        }
    }

    static fromJS(data: any): AddPersonEmailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new AddPersonEmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        data["isPreferredEmailAddress"] = this.isPreferredEmailAddress;
        super.toJSON(data);
        return data;
    }
}

export interface IAddPersonEmailAddress extends IPersonCommand {
    emailAddress?: EmailAddress;
    isPreferredEmailAddress?: boolean;
}

export class AddPersonPhoneNumber extends PersonCommand implements IAddPersonPhoneNumber {
    phoneNumber?: PhoneNumber;
    isPreferredPhoneNumber?: boolean;

    constructor(data?: IAddPersonPhoneNumber) {
        super(data);
        this._discriminator = "AddPersonPhoneNumber";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
            this.isPreferredPhoneNumber = _data["isPreferredPhoneNumber"];
        }
    }

    static fromJS(data: any): AddPersonPhoneNumber {
        data = typeof data === 'object' ? data : {};
        let result = new AddPersonPhoneNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        data["isPreferredPhoneNumber"] = this.isPreferredPhoneNumber;
        super.toJSON(data);
        return data;
    }
}

export interface IAddPersonPhoneNumber extends IPersonCommand {
    phoneNumber?: PhoneNumber;
    isPreferredPhoneNumber?: boolean;
}

export class CreatePerson extends PersonCommand implements ICreatePerson {
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    addresses?: Address[];
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[];
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[];
    preferredEmailAddressId?: string | undefined;
    concerns?: string | undefined;
    notes?: string | undefined;

    constructor(data?: ICreatePerson) {
        super(data);
        this._discriminator = "CreatePerson";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
            this.ethnicity = _data["ethnicity"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            this.currentAddressId = _data["currentAddressId"];
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(PhoneNumber.fromJS(item));
            }
            this.preferredPhoneNumberId = _data["preferredPhoneNumberId"];
            if (Array.isArray(_data["emailAddresses"])) {
                this.emailAddresses = [] as any;
                for (let item of _data["emailAddresses"])
                    this.emailAddresses!.push(EmailAddress.fromJS(item));
            }
            this.preferredEmailAddressId = _data["preferredEmailAddressId"];
            this.concerns = _data["concerns"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreatePerson {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        data["ethnicity"] = this.ethnicity;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["currentAddressId"] = this.currentAddressId;
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item.toJSON());
        }
        data["preferredPhoneNumberId"] = this.preferredPhoneNumberId;
        if (Array.isArray(this.emailAddresses)) {
            data["emailAddresses"] = [];
            for (let item of this.emailAddresses)
                data["emailAddresses"].push(item.toJSON());
        }
        data["preferredEmailAddressId"] = this.preferredEmailAddressId;
        data["concerns"] = this.concerns;
        data["notes"] = this.notes;
        super.toJSON(data);
        return data;
    }
}

export interface ICreatePerson extends IPersonCommand {
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    gender?: Gender;
    age?: Age;
    ethnicity?: string;
    addresses?: Address[];
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[];
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[];
    preferredEmailAddressId?: string | undefined;
    concerns?: string | undefined;
    notes?: string | undefined;
}

export class UndoCreatePerson extends PersonCommand implements IUndoCreatePerson {

    constructor(data?: IUndoCreatePerson) {
        super(data);
        this._discriminator = "UndoCreatePerson";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): UndoCreatePerson {
        data = typeof data === 'object' ? data : {};
        let result = new UndoCreatePerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IUndoCreatePerson extends IPersonCommand {
}

export class UpdatePersonAddress extends PersonCommand implements IUpdatePersonAddress {
    address?: Address;
    isCurrentAddress?: boolean;

    constructor(data?: IUpdatePersonAddress) {
        super(data);
        this._discriminator = "UpdatePersonAddress";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.isCurrentAddress = _data["isCurrentAddress"];
        }
    }

    static fromJS(data: any): UpdatePersonAddress {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["isCurrentAddress"] = this.isCurrentAddress;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonAddress extends IPersonCommand {
    address?: Address;
    isCurrentAddress?: boolean;
}

export class UpdatePersonAge extends PersonCommand implements IUpdatePersonAge {
    age?: Age;

    constructor(data?: IUpdatePersonAge) {
        super(data);
        this._discriminator = "UpdatePersonAge";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdatePersonAge {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonAge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonAge extends IPersonCommand {
    age?: Age;
}

export class UpdatePersonConcerns extends PersonCommand implements IUpdatePersonConcerns {
    concerns?: string | undefined;

    constructor(data?: IUpdatePersonConcerns) {
        super(data);
        this._discriminator = "UpdatePersonConcerns";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.concerns = _data["concerns"];
        }
    }

    static fromJS(data: any): UpdatePersonConcerns {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonConcerns();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["concerns"] = this.concerns;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonConcerns extends IPersonCommand {
    concerns?: string | undefined;
}

export class UpdatePersonEmailAddress extends PersonCommand implements IUpdatePersonEmailAddress {
    emailAddress?: EmailAddress;
    isPreferredEmailAddress?: boolean;

    constructor(data?: IUpdatePersonEmailAddress) {
        super(data);
        this._discriminator = "UpdatePersonEmailAddress";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
            this.isPreferredEmailAddress = _data["isPreferredEmailAddress"];
        }
    }

    static fromJS(data: any): UpdatePersonEmailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonEmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        data["isPreferredEmailAddress"] = this.isPreferredEmailAddress;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonEmailAddress extends IPersonCommand {
    emailAddress?: EmailAddress;
    isPreferredEmailAddress?: boolean;
}

export class UpdatePersonName extends PersonCommand implements IUpdatePersonName {
    firstName?: string;
    lastName?: string;

    constructor(data?: IUpdatePersonName) {
        super(data);
        this._discriminator = "UpdatePersonName";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UpdatePersonName {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonName extends IPersonCommand {
    firstName?: string;
    lastName?: string;
}

export class UpdatePersonNotes extends PersonCommand implements IUpdatePersonNotes {
    notes?: string | undefined;

    constructor(data?: IUpdatePersonNotes) {
        super(data);
        this._discriminator = "UpdatePersonNotes";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): UpdatePersonNotes {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonNotes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notes"] = this.notes;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonNotes extends IPersonCommand {
    notes?: string | undefined;
}

export class UpdatePersonPhoneNumber extends PersonCommand implements IUpdatePersonPhoneNumber {
    phoneNumber?: PhoneNumber;
    isPreferredPhoneNumber?: boolean;

    constructor(data?: IUpdatePersonPhoneNumber) {
        super(data);
        this._discriminator = "UpdatePersonPhoneNumber";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
            this.isPreferredPhoneNumber = _data["isPreferredPhoneNumber"];
        }
    }

    static fromJS(data: any): UpdatePersonPhoneNumber {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonPhoneNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        data["isPreferredPhoneNumber"] = this.isPreferredPhoneNumber;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonPhoneNumber extends IPersonCommand {
    phoneNumber?: PhoneNumber;
    isPreferredPhoneNumber?: boolean;
}

export class UpdatePersonUserLink extends PersonCommand implements IUpdatePersonUserLink {
    userId?: string | undefined;

    constructor(data?: IUpdatePersonUserLink) {
        super(data);
        this._discriminator = "UpdatePersonUserLink";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): UpdatePersonUserLink {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonUserLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdatePersonUserLink extends IPersonCommand {
    userId?: string | undefined;
}

export class NoteCommandResult implements INoteCommandResult {
    family?: CombinedFamilyInfo;
    note?: Note | undefined;

    constructor(data?: INoteCommandResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.family = _data["family"] ? CombinedFamilyInfo.fromJS(_data["family"]) : <any>undefined;
            this.note = _data["note"] ? Note.fromJS(_data["note"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NoteCommandResult {
        data = typeof data === 'object' ? data : {};
        let result = new NoteCommandResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["family"] = this.family ? this.family.toJSON() : <any>undefined;
        data["note"] = this.note ? this.note.toJSON() : <any>undefined;
        return data;
    }
}

export interface INoteCommandResult {
    family?: CombinedFamilyInfo;
    note?: Note | undefined;
}

export abstract class NoteCommand implements INoteCommand {
    familyId?: string;
    noteId?: string;

    protected _discriminator: string;

    constructor(data?: INoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "NoteCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): NoteCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ApproveNote") {
            let result = new ApproveNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateDraftNote") {
            let result = new CreateDraftNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "DiscardDraftNote") {
            let result = new DiscardDraftNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EditDraftNote") {
            let result = new EditDraftNote();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'NoteCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["familyId"] = this.familyId;
        data["noteId"] = this.noteId;
        return data;
    }
}

export interface INoteCommand {
    familyId?: string;
    noteId?: string;
}

export class ApproveNote extends NoteCommand implements IApproveNote {
    finalizedNoteContents?: string;

    constructor(data?: IApproveNote) {
        super(data);
        this._discriminator = "ApproveNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.finalizedNoteContents = _data["finalizedNoteContents"];
        }
    }

    static fromJS(data: any): ApproveNote {
        data = typeof data === 'object' ? data : {};
        let result = new ApproveNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["finalizedNoteContents"] = this.finalizedNoteContents;
        super.toJSON(data);
        return data;
    }
}

export interface IApproveNote extends INoteCommand {
    finalizedNoteContents?: string;
}

export class CreateDraftNote extends NoteCommand implements ICreateDraftNote {
    draftNoteContents?: string | undefined;

    constructor(data?: ICreateDraftNote) {
        super(data);
        this._discriminator = "CreateDraftNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftNoteContents = _data["draftNoteContents"];
        }
    }

    static fromJS(data: any): CreateDraftNote {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDraftNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftNoteContents"] = this.draftNoteContents;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateDraftNote extends INoteCommand {
    draftNoteContents?: string | undefined;
}

export class DiscardDraftNote extends NoteCommand implements IDiscardDraftNote {

    constructor(data?: IDiscardDraftNote) {
        super(data);
        this._discriminator = "DiscardDraftNote";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): DiscardDraftNote {
        data = typeof data === 'object' ? data : {};
        let result = new DiscardDraftNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IDiscardDraftNote extends INoteCommand {
}

export class EditDraftNote extends NoteCommand implements IEditDraftNote {
    draftNoteContents?: string | undefined;

    constructor(data?: IEditDraftNote) {
        super(data);
        this._discriminator = "EditDraftNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftNoteContents = _data["draftNoteContents"];
        }
    }

    static fromJS(data: any): EditDraftNote {
        data = typeof data === 'object' ? data : {};
        let result = new EditDraftNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftNoteContents"] = this.draftNoteContents;
        super.toJSON(data);
        return data;
    }
}

export interface IEditDraftNote extends INoteCommand {
    draftNoteContents?: string | undefined;
}

export class DocumentUploadInfo implements IDocumentUploadInfo {
    documentId?: string;
    valetUrl?: string;

    constructor(data?: IDocumentUploadInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentId = _data["documentId"];
            this.valetUrl = _data["valetUrl"];
        }
    }

    static fromJS(data: any): DocumentUploadInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentUploadInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["valetUrl"] = this.valetUrl;
        return data;
    }
}

export interface IDocumentUploadInfo {
    documentId?: string;
    valetUrl?: string;
}

export abstract class ReferralCommand implements IReferralCommand {
    familyId?: string;
    referralId?: string;

    protected _discriminator: string;

    constructor(data?: IReferralCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ReferralCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.referralId = _data["referralId"];
        }
    }

    static fromJS(data: any): ReferralCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "CloseReferral") {
            let result = new CloseReferral();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CompleteReferralRequirement") {
            let result = new CompleteReferralRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateReferral") {
            let result = new CreateReferral();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExemptReferralRequirement") {
            let result = new ExemptReferralRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "MarkReferralRequirementIncomplete") {
            let result = new MarkReferralRequirementIncomplete();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UnexemptReferralRequirement") {
            let result = new UnexemptReferralRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UpdateCustomReferralField") {
            let result = new UpdateCustomReferralField();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ReferralCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["familyId"] = this.familyId;
        data["referralId"] = this.referralId;
        return data;
    }
}

export interface IReferralCommand {
    familyId?: string;
    referralId?: string;
}

export class CloseReferral extends ReferralCommand implements ICloseReferral {
    closeReason?: ReferralCloseReason;
    closedAtUtc?: Date;

    constructor(data?: ICloseReferral) {
        super(data);
        this._discriminator = "CloseReferral";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.closeReason = _data["closeReason"];
            this.closedAtUtc = _data["closedAtUtc"] ? new Date(_data["closedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CloseReferral {
        data = typeof data === 'object' ? data : {};
        let result = new CloseReferral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["closeReason"] = this.closeReason;
        data["closedAtUtc"] = this.closedAtUtc ? this.closedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICloseReferral extends IReferralCommand {
    closeReason?: ReferralCloseReason;
    closedAtUtc?: Date;
}

export class CompleteReferralRequirement extends ReferralCommand implements ICompleteReferralRequirement {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;

    constructor(data?: ICompleteReferralRequirement) {
        super(data);
        this._discriminator = "CompleteReferralRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): CompleteReferralRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteReferralRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["noteId"] = this.noteId;
        super.toJSON(data);
        return data;
    }
}

export interface ICompleteReferralRequirement extends IReferralCommand {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;
}

export class CreateReferral extends ReferralCommand implements ICreateReferral {
    openedAtUtc?: Date;

    constructor(data?: ICreateReferral) {
        super(data);
        this._discriminator = "CreateReferral";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.openedAtUtc = _data["openedAtUtc"] ? new Date(_data["openedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateReferral {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReferral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["openedAtUtc"] = this.openedAtUtc ? this.openedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateReferral extends IReferralCommand {
    openedAtUtc?: Date;
}

export class ExemptReferralRequirement extends ReferralCommand implements IExemptReferralRequirement {
    requirementName?: string;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;

    constructor(data?: IExemptReferralRequirement) {
        super(data);
        this._discriminator = "ExemptReferralRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.additionalComments = _data["additionalComments"];
            this.exemptionExpiresAtUtc = _data["exemptionExpiresAtUtc"] ? new Date(_data["exemptionExpiresAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExemptReferralRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new ExemptReferralRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["additionalComments"] = this.additionalComments;
        data["exemptionExpiresAtUtc"] = this.exemptionExpiresAtUtc ? this.exemptionExpiresAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IExemptReferralRequirement extends IReferralCommand {
    requirementName?: string;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;
}

export class MarkReferralRequirementIncomplete extends ReferralCommand implements IMarkReferralRequirementIncomplete {
    completedRequirementId?: string;
    requirementName?: string;

    constructor(data?: IMarkReferralRequirementIncomplete) {
        super(data);
        this._discriminator = "MarkReferralRequirementIncomplete";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
        }
    }

    static fromJS(data: any): MarkReferralRequirementIncomplete {
        data = typeof data === 'object' ? data : {};
        let result = new MarkReferralRequirementIncomplete();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        super.toJSON(data);
        return data;
    }
}

export interface IMarkReferralRequirementIncomplete extends IReferralCommand {
    completedRequirementId?: string;
    requirementName?: string;
}

export class UnexemptReferralRequirement extends ReferralCommand implements IUnexemptReferralRequirement {
    requirementName?: string;

    constructor(data?: IUnexemptReferralRequirement) {
        super(data);
        this._discriminator = "UnexemptReferralRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
        }
    }

    static fromJS(data: any): UnexemptReferralRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new UnexemptReferralRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        super.toJSON(data);
        return data;
    }
}

export interface IUnexemptReferralRequirement extends IReferralCommand {
    requirementName?: string;
}

export class UpdateCustomReferralField extends ReferralCommand implements IUpdateCustomReferralField {
    completedCustomFieldId?: string;
    customFieldName?: string;
    customFieldType?: CustomFieldType;
    value?: any | undefined;

    constructor(data?: IUpdateCustomReferralField) {
        super(data);
        this._discriminator = "UpdateCustomReferralField";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedCustomFieldId = _data["completedCustomFieldId"];
            this.customFieldName = _data["customFieldName"];
            this.customFieldType = _data["customFieldType"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): UpdateCustomReferralField {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomReferralField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedCustomFieldId"] = this.completedCustomFieldId;
        data["customFieldName"] = this.customFieldName;
        data["customFieldType"] = this.customFieldType;
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateCustomReferralField extends IReferralCommand {
    completedCustomFieldId?: string;
    customFieldName?: string;
    customFieldType?: CustomFieldType;
    value?: any | undefined;
}

export abstract class ArrangementsCommand implements IArrangementsCommand {
    familyId?: string;
    referralId?: string;
    arrangementIds?: string[];

    protected _discriminator: string;

    constructor(data?: IArrangementsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ArrangementsCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.referralId = _data["referralId"];
            if (Array.isArray(_data["arrangementIds"])) {
                this.arrangementIds = [] as any;
                for (let item of _data["arrangementIds"])
                    this.arrangementIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ArrangementsCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AssignIndividualVolunteer") {
            let result = new AssignIndividualVolunteer();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AssignVolunteerFamily") {
            let result = new AssignVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CancelArrangementsSetup") {
            let result = new CancelArrangementsSetup();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CompleteArrangementRequirement") {
            let result = new CompleteArrangementRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateArrangement") {
            let result = new CreateArrangement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EndArrangements") {
            let result = new EndArrangements();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExemptArrangementRequirement") {
            let result = new ExemptArrangementRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "MarkArrangementRequirementIncomplete") {
            let result = new MarkArrangementRequirementIncomplete();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "StartArrangements") {
            let result = new StartArrangements();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "TrackChildLocationChange") {
            let result = new TrackChildLocationChange();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UnexemptArrangementRequirement") {
            let result = new UnexemptArrangementRequirement();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ArrangementsCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["familyId"] = this.familyId;
        data["referralId"] = this.referralId;
        if (Array.isArray(this.arrangementIds)) {
            data["arrangementIds"] = [];
            for (let item of this.arrangementIds)
                data["arrangementIds"].push(item);
        }
        return data;
    }
}

export interface IArrangementsCommand {
    familyId?: string;
    referralId?: string;
    arrangementIds?: string[];
}

export class AssignIndividualVolunteer extends ArrangementsCommand implements IAssignIndividualVolunteer {
    volunteerFamilyId?: string;
    personId?: string;
    arrangementFunction?: string;

    constructor(data?: IAssignIndividualVolunteer) {
        super(data);
        this._discriminator = "AssignIndividualVolunteer";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.volunteerFamilyId = _data["volunteerFamilyId"];
            this.personId = _data["personId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): AssignIndividualVolunteer {
        data = typeof data === 'object' ? data : {};
        let result = new AssignIndividualVolunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volunteerFamilyId"] = this.volunteerFamilyId;
        data["personId"] = this.personId;
        data["arrangementFunction"] = this.arrangementFunction;
        super.toJSON(data);
        return data;
    }
}

export interface IAssignIndividualVolunteer extends IArrangementsCommand {
    volunteerFamilyId?: string;
    personId?: string;
    arrangementFunction?: string;
}

export class AssignVolunteerFamily extends ArrangementsCommand implements IAssignVolunteerFamily {
    volunteerFamilyId?: string;
    arrangementFunction?: string;

    constructor(data?: IAssignVolunteerFamily) {
        super(data);
        this._discriminator = "AssignVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.volunteerFamilyId = _data["volunteerFamilyId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): AssignVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new AssignVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volunteerFamilyId"] = this.volunteerFamilyId;
        data["arrangementFunction"] = this.arrangementFunction;
        super.toJSON(data);
        return data;
    }
}

export interface IAssignVolunteerFamily extends IArrangementsCommand {
    volunteerFamilyId?: string;
    arrangementFunction?: string;
}

export class CancelArrangementsSetup extends ArrangementsCommand implements ICancelArrangementsSetup {
    cancellationRequestedAtUtc?: Date;

    constructor(data?: ICancelArrangementsSetup) {
        super(data);
        this._discriminator = "CancelArrangementsSetup";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cancellationRequestedAtUtc = _data["cancellationRequestedAtUtc"] ? new Date(_data["cancellationRequestedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CancelArrangementsSetup {
        data = typeof data === 'object' ? data : {};
        let result = new CancelArrangementsSetup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cancellationRequestedAtUtc"] = this.cancellationRequestedAtUtc ? this.cancellationRequestedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICancelArrangementsSetup extends IArrangementsCommand {
    cancellationRequestedAtUtc?: Date;
}

export class CompleteArrangementRequirement extends ArrangementsCommand implements ICompleteArrangementRequirement {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;

    constructor(data?: ICompleteArrangementRequirement) {
        super(data);
        this._discriminator = "CompleteArrangementRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): CompleteArrangementRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteArrangementRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["noteId"] = this.noteId;
        super.toJSON(data);
        return data;
    }
}

export interface ICompleteArrangementRequirement extends IArrangementsCommand {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;
}

export class CreateArrangement extends ArrangementsCommand implements ICreateArrangement {
    arrangementType?: string;
    requestedAtUtc?: Date;
    partneringFamilyPersonId?: string;

    constructor(data?: ICreateArrangement) {
        super(data);
        this._discriminator = "CreateArrangement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.arrangementType = _data["arrangementType"];
            this.requestedAtUtc = _data["requestedAtUtc"] ? new Date(_data["requestedAtUtc"].toString()) : <any>undefined;
            this.partneringFamilyPersonId = _data["partneringFamilyPersonId"];
        }
    }

    static fromJS(data: any): CreateArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new CreateArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrangementType"] = this.arrangementType;
        data["requestedAtUtc"] = this.requestedAtUtc ? this.requestedAtUtc.toISOString() : <any>undefined;
        data["partneringFamilyPersonId"] = this.partneringFamilyPersonId;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateArrangement extends IArrangementsCommand {
    arrangementType?: string;
    requestedAtUtc?: Date;
    partneringFamilyPersonId?: string;
}

export class EndArrangements extends ArrangementsCommand implements IEndArrangements {
    endedAtUtc?: Date;

    constructor(data?: IEndArrangements) {
        super(data);
        this._discriminator = "EndArrangements";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.endedAtUtc = _data["endedAtUtc"] ? new Date(_data["endedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EndArrangements {
        data = typeof data === 'object' ? data : {};
        let result = new EndArrangements();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endedAtUtc"] = this.endedAtUtc ? this.endedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IEndArrangements extends IArrangementsCommand {
    endedAtUtc?: Date;
}

export class ExemptArrangementRequirement extends ArrangementsCommand implements IExemptArrangementRequirement {
    requirementName?: string;
    dueDate?: Date | undefined;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;

    constructor(data?: IExemptArrangementRequirement) {
        super(data);
        this._discriminator = "ExemptArrangementRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
            this.additionalComments = _data["additionalComments"];
            this.exemptionExpiresAtUtc = _data["exemptionExpiresAtUtc"] ? new Date(_data["exemptionExpiresAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExemptArrangementRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new ExemptArrangementRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["additionalComments"] = this.additionalComments;
        data["exemptionExpiresAtUtc"] = this.exemptionExpiresAtUtc ? this.exemptionExpiresAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IExemptArrangementRequirement extends IArrangementsCommand {
    requirementName?: string;
    dueDate?: Date | undefined;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;
}

export class MarkArrangementRequirementIncomplete extends ArrangementsCommand implements IMarkArrangementRequirementIncomplete {
    completedRequirementId?: string;
    requirementName?: string;

    constructor(data?: IMarkArrangementRequirementIncomplete) {
        super(data);
        this._discriminator = "MarkArrangementRequirementIncomplete";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
        }
    }

    static fromJS(data: any): MarkArrangementRequirementIncomplete {
        data = typeof data === 'object' ? data : {};
        let result = new MarkArrangementRequirementIncomplete();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        super.toJSON(data);
        return data;
    }
}

export interface IMarkArrangementRequirementIncomplete extends IArrangementsCommand {
    completedRequirementId?: string;
    requirementName?: string;
}

export class StartArrangements extends ArrangementsCommand implements IStartArrangements {
    startedAtUtc?: Date;

    constructor(data?: IStartArrangements) {
        super(data);
        this._discriminator = "StartArrangements";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.startedAtUtc = _data["startedAtUtc"] ? new Date(_data["startedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): StartArrangements {
        data = typeof data === 'object' ? data : {};
        let result = new StartArrangements();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startedAtUtc"] = this.startedAtUtc ? this.startedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStartArrangements extends IArrangementsCommand {
    startedAtUtc?: Date;
}

export class TrackChildLocationChange extends ArrangementsCommand implements ITrackChildLocationChange {
    changedAtUtc?: Date;
    childLocationFamilyId?: string;
    childLocationReceivingAdultId?: string;
    plan?: ChildLocationPlan;
    noteId?: string | undefined;

    constructor(data?: ITrackChildLocationChange) {
        super(data);
        this._discriminator = "TrackChildLocationChange";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.changedAtUtc = _data["changedAtUtc"] ? new Date(_data["changedAtUtc"].toString()) : <any>undefined;
            this.childLocationFamilyId = _data["childLocationFamilyId"];
            this.childLocationReceivingAdultId = _data["childLocationReceivingAdultId"];
            this.plan = _data["plan"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): TrackChildLocationChange {
        data = typeof data === 'object' ? data : {};
        let result = new TrackChildLocationChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["changedAtUtc"] = this.changedAtUtc ? this.changedAtUtc.toISOString() : <any>undefined;
        data["childLocationFamilyId"] = this.childLocationFamilyId;
        data["childLocationReceivingAdultId"] = this.childLocationReceivingAdultId;
        data["plan"] = this.plan;
        data["noteId"] = this.noteId;
        super.toJSON(data);
        return data;
    }
}

export interface ITrackChildLocationChange extends IArrangementsCommand {
    changedAtUtc?: Date;
    childLocationFamilyId?: string;
    childLocationReceivingAdultId?: string;
    plan?: ChildLocationPlan;
    noteId?: string | undefined;
}

export class UnexemptArrangementRequirement extends ArrangementsCommand implements IUnexemptArrangementRequirement {
    requirementName?: string;
    dueDate?: Date | undefined;

    constructor(data?: IUnexemptArrangementRequirement) {
        super(data);
        this._discriminator = "UnexemptArrangementRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UnexemptArrangementRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new UnexemptArrangementRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUnexemptArrangementRequirement extends IArrangementsCommand {
    requirementName?: string;
    dueDate?: Date | undefined;
}

export class UserOrganizationAccess implements IUserOrganizationAccess {
    organizationId?: string;
    locationIds?: UserLocationAccess[];

    constructor(data?: IUserOrganizationAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationId = _data["organizationId"];
            if (Array.isArray(_data["locationIds"])) {
                this.locationIds = [] as any;
                for (let item of _data["locationIds"])
                    this.locationIds!.push(UserLocationAccess.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserOrganizationAccess {
        data = typeof data === 'object' ? data : {};
        let result = new UserOrganizationAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationId"] = this.organizationId;
        if (Array.isArray(this.locationIds)) {
            data["locationIds"] = [];
            for (let item of this.locationIds)
                data["locationIds"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserOrganizationAccess {
    organizationId?: string;
    locationIds?: UserLocationAccess[];
}

export class UserLocationAccess implements IUserLocationAccess {
    locationId?: string;
    roles?: string[];
    permissions?: Permission[];

    constructor(data?: IUserLocationAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationId = _data["locationId"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
        }
    }

    static fromJS(data: any): UserLocationAccess {
        data = typeof data === 'object' ? data : {};
        let result = new UserLocationAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data;
    }
}

export interface IUserLocationAccess {
    locationId?: string;
    roles?: string[];
    permissions?: Permission[];
}

export abstract class VolunteerFamilyCommand implements IVolunteerFamilyCommand {
    familyId?: string;

    protected _discriminator: string;

    constructor(data?: IVolunteerFamilyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerFamilyCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): VolunteerFamilyCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ActivateVolunteerFamily") {
            let result = new ActivateVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CompleteVolunteerFamilyRequirement") {
            let result = new CompleteVolunteerFamilyRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExemptVolunteerFamilyRequirement") {
            let result = new ExemptVolunteerFamilyRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "MarkVolunteerFamilyRequirementIncomplete") {
            let result = new MarkVolunteerFamilyRequirementIncomplete();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "RemoveVolunteerFamilyRole") {
            let result = new RemoveVolunteerFamilyRole();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ResetVolunteerFamilyRole") {
            let result = new ResetVolunteerFamilyRole();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UnexemptVolunteerFamilyRequirement") {
            let result = new UnexemptVolunteerFamilyRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadVolunteerFamilyDocument") {
            let result = new UploadVolunteerFamilyDocument();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerFamilyCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["familyId"] = this.familyId;
        return data;
    }
}

export interface IVolunteerFamilyCommand {
    familyId?: string;
}

export class ActivateVolunteerFamily extends VolunteerFamilyCommand implements IActivateVolunteerFamily {

    constructor(data?: IActivateVolunteerFamily) {
        super(data);
        this._discriminator = "ActivateVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ActivateVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new ActivateVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IActivateVolunteerFamily extends IVolunteerFamilyCommand {
}

export class CompleteVolunteerFamilyRequirement extends VolunteerFamilyCommand implements ICompleteVolunteerFamilyRequirement {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;

    constructor(data?: ICompleteVolunteerFamilyRequirement) {
        super(data);
        this._discriminator = "CompleteVolunteerFamilyRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): CompleteVolunteerFamilyRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteVolunteerFamilyRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["noteId"] = this.noteId;
        super.toJSON(data);
        return data;
    }
}

export interface ICompleteVolunteerFamilyRequirement extends IVolunteerFamilyCommand {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;
}

export class ExemptVolunteerFamilyRequirement extends VolunteerFamilyCommand implements IExemptVolunteerFamilyRequirement {
    requirementName?: string;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;

    constructor(data?: IExemptVolunteerFamilyRequirement) {
        super(data);
        this._discriminator = "ExemptVolunteerFamilyRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.additionalComments = _data["additionalComments"];
            this.exemptionExpiresAtUtc = _data["exemptionExpiresAtUtc"] ? new Date(_data["exemptionExpiresAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExemptVolunteerFamilyRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new ExemptVolunteerFamilyRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["additionalComments"] = this.additionalComments;
        data["exemptionExpiresAtUtc"] = this.exemptionExpiresAtUtc ? this.exemptionExpiresAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IExemptVolunteerFamilyRequirement extends IVolunteerFamilyCommand {
    requirementName?: string;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;
}

export class MarkVolunteerFamilyRequirementIncomplete extends VolunteerFamilyCommand implements IMarkVolunteerFamilyRequirementIncomplete {
    completedRequirementId?: string;
    requirementName?: string;

    constructor(data?: IMarkVolunteerFamilyRequirementIncomplete) {
        super(data);
        this._discriminator = "MarkVolunteerFamilyRequirementIncomplete";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
        }
    }

    static fromJS(data: any): MarkVolunteerFamilyRequirementIncomplete {
        data = typeof data === 'object' ? data : {};
        let result = new MarkVolunteerFamilyRequirementIncomplete();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        super.toJSON(data);
        return data;
    }
}

export interface IMarkVolunteerFamilyRequirementIncomplete extends IVolunteerFamilyCommand {
    completedRequirementId?: string;
    requirementName?: string;
}

export class RemoveVolunteerFamilyRole extends VolunteerFamilyCommand implements IRemoveVolunteerFamilyRole {
    roleName?: string;
    reason?: RoleRemovalReason;
    additionalComments?: string | undefined;

    constructor(data?: IRemoveVolunteerFamilyRole) {
        super(data);
        this._discriminator = "RemoveVolunteerFamilyRole";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.roleName = _data["roleName"];
            this.reason = _data["reason"];
            this.additionalComments = _data["additionalComments"];
        }
    }

    static fromJS(data: any): RemoveVolunteerFamilyRole {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveVolunteerFamilyRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        data["reason"] = this.reason;
        data["additionalComments"] = this.additionalComments;
        super.toJSON(data);
        return data;
    }
}

export interface IRemoveVolunteerFamilyRole extends IVolunteerFamilyCommand {
    roleName?: string;
    reason?: RoleRemovalReason;
    additionalComments?: string | undefined;
}

export class ResetVolunteerFamilyRole extends VolunteerFamilyCommand implements IResetVolunteerFamilyRole {
    roleName?: string;

    constructor(data?: IResetVolunteerFamilyRole) {
        super(data);
        this._discriminator = "ResetVolunteerFamilyRole";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): ResetVolunteerFamilyRole {
        data = typeof data === 'object' ? data : {};
        let result = new ResetVolunteerFamilyRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        super.toJSON(data);
        return data;
    }
}

export interface IResetVolunteerFamilyRole extends IVolunteerFamilyCommand {
    roleName?: string;
}

export class UnexemptVolunteerFamilyRequirement extends VolunteerFamilyCommand implements IUnexemptVolunteerFamilyRequirement {
    requirementName?: string;

    constructor(data?: IUnexemptVolunteerFamilyRequirement) {
        super(data);
        this._discriminator = "UnexemptVolunteerFamilyRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
        }
    }

    static fromJS(data: any): UnexemptVolunteerFamilyRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new UnexemptVolunteerFamilyRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        super.toJSON(data);
        return data;
    }
}

export interface IUnexemptVolunteerFamilyRequirement extends IVolunteerFamilyCommand {
    requirementName?: string;
}

export class UploadVolunteerFamilyDocument extends VolunteerFamilyCommand implements IUploadVolunteerFamilyDocument {
    uploadedDocumentId?: string;
    uploadedFileName?: string;

    constructor(data?: IUploadVolunteerFamilyDocument) {
        super(data);
        this._discriminator = "UploadVolunteerFamilyDocument";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.uploadedFileName = _data["uploadedFileName"];
        }
    }

    static fromJS(data: any): UploadVolunteerFamilyDocument {
        data = typeof data === 'object' ? data : {};
        let result = new UploadVolunteerFamilyDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["uploadedFileName"] = this.uploadedFileName;
        super.toJSON(data);
        return data;
    }
}

export interface IUploadVolunteerFamilyDocument extends IVolunteerFamilyCommand {
    uploadedDocumentId?: string;
    uploadedFileName?: string;
}

export abstract class VolunteerCommand implements IVolunteerCommand {
    familyId?: string;
    personId?: string;

    protected _discriminator: string;

    constructor(data?: IVolunteerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): VolunteerCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "CompleteVolunteerRequirement") {
            let result = new CompleteVolunteerRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExemptVolunteerRequirement") {
            let result = new ExemptVolunteerRequirement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "MarkVolunteerRequirementIncomplete") {
            let result = new MarkVolunteerRequirementIncomplete();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "RemoveVolunteerRole") {
            let result = new RemoveVolunteerRole();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ResetVolunteerRole") {
            let result = new ResetVolunteerRole();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UnexemptVolunteerRequirement") {
            let result = new UnexemptVolunteerRequirement();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["familyId"] = this.familyId;
        data["personId"] = this.personId;
        return data;
    }
}

export interface IVolunteerCommand {
    familyId?: string;
    personId?: string;
}

export class CompleteVolunteerRequirement extends VolunteerCommand implements ICompleteVolunteerRequirement {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;

    constructor(data?: ICompleteVolunteerRequirement) {
        super(data);
        this._discriminator = "CompleteVolunteerRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
            this.completedAtUtc = _data["completedAtUtc"] ? new Date(_data["completedAtUtc"].toString()) : <any>undefined;
            this.uploadedDocumentId = _data["uploadedDocumentId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): CompleteVolunteerRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteVolunteerRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        data["completedAtUtc"] = this.completedAtUtc ? this.completedAtUtc.toISOString() : <any>undefined;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        data["noteId"] = this.noteId;
        super.toJSON(data);
        return data;
    }
}

export interface ICompleteVolunteerRequirement extends IVolunteerCommand {
    completedRequirementId?: string;
    requirementName?: string;
    completedAtUtc?: Date;
    uploadedDocumentId?: string | undefined;
    noteId?: string | undefined;
}

export class ExemptVolunteerRequirement extends VolunteerCommand implements IExemptVolunteerRequirement {
    requirementName?: string;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;

    constructor(data?: IExemptVolunteerRequirement) {
        super(data);
        this._discriminator = "ExemptVolunteerRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
            this.additionalComments = _data["additionalComments"];
            this.exemptionExpiresAtUtc = _data["exemptionExpiresAtUtc"] ? new Date(_data["exemptionExpiresAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExemptVolunteerRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new ExemptVolunteerRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        data["additionalComments"] = this.additionalComments;
        data["exemptionExpiresAtUtc"] = this.exemptionExpiresAtUtc ? this.exemptionExpiresAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IExemptVolunteerRequirement extends IVolunteerCommand {
    requirementName?: string;
    additionalComments?: string;
    exemptionExpiresAtUtc?: Date | undefined;
}

export class MarkVolunteerRequirementIncomplete extends VolunteerCommand implements IMarkVolunteerRequirementIncomplete {
    completedRequirementId?: string;
    requirementName?: string;

    constructor(data?: IMarkVolunteerRequirementIncomplete) {
        super(data);
        this._discriminator = "MarkVolunteerRequirementIncomplete";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedRequirementId = _data["completedRequirementId"];
            this.requirementName = _data["requirementName"];
        }
    }

    static fromJS(data: any): MarkVolunteerRequirementIncomplete {
        data = typeof data === 'object' ? data : {};
        let result = new MarkVolunteerRequirementIncomplete();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedRequirementId"] = this.completedRequirementId;
        data["requirementName"] = this.requirementName;
        super.toJSON(data);
        return data;
    }
}

export interface IMarkVolunteerRequirementIncomplete extends IVolunteerCommand {
    completedRequirementId?: string;
    requirementName?: string;
}

export class RemoveVolunteerRole extends VolunteerCommand implements IRemoveVolunteerRole {
    roleName?: string;
    reason?: RoleRemovalReason;
    additionalComments?: string | undefined;

    constructor(data?: IRemoveVolunteerRole) {
        super(data);
        this._discriminator = "RemoveVolunteerRole";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.roleName = _data["roleName"];
            this.reason = _data["reason"];
            this.additionalComments = _data["additionalComments"];
        }
    }

    static fromJS(data: any): RemoveVolunteerRole {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveVolunteerRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        data["reason"] = this.reason;
        data["additionalComments"] = this.additionalComments;
        super.toJSON(data);
        return data;
    }
}

export interface IRemoveVolunteerRole extends IVolunteerCommand {
    roleName?: string;
    reason?: RoleRemovalReason;
    additionalComments?: string | undefined;
}

export class ResetVolunteerRole extends VolunteerCommand implements IResetVolunteerRole {
    roleName?: string;

    constructor(data?: IResetVolunteerRole) {
        super(data);
        this._discriminator = "ResetVolunteerRole";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): ResetVolunteerRole {
        data = typeof data === 'object' ? data : {};
        let result = new ResetVolunteerRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        super.toJSON(data);
        return data;
    }
}

export interface IResetVolunteerRole extends IVolunteerCommand {
    roleName?: string;
}

export class UnexemptVolunteerRequirement extends VolunteerCommand implements IUnexemptVolunteerRequirement {
    requirementName?: string;

    constructor(data?: IUnexemptVolunteerRequirement) {
        super(data);
        this._discriminator = "UnexemptVolunteerRequirement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.requirementName = _data["requirementName"];
        }
    }

    static fromJS(data: any): UnexemptVolunteerRequirement {
        data = typeof data === 'object' ? data : {};
        let result = new UnexemptVolunteerRequirement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requirementName"] = this.requirementName;
        super.toJSON(data);
        return data;
    }
}

export interface IUnexemptVolunteerRequirement extends IVolunteerCommand {
    requirementName?: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}