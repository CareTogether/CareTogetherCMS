/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ClaimsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Promise<string[]> {
        let url_ = this.baseUrl + "/Claims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class FilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getReadValetUrl(organizationId: string, locationId: string, documentId: string): Promise<string> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Files/{documentId}";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReadValetUrl(_response);
        });
    }

    protected processGetReadValetUrl(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    generateUploadValetUrl(organizationId: string, locationId: string): Promise<string> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Files/upload";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateUploadValetUrl(_response);
        });
    }

    protected processGenerateUploadValetUrl(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class PeopleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(organizationId: string, locationId: string): Promise<Person[]> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/People";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Person[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Person[]>(<any>null);
    }

    getContactInfo(organizationId: string, locationId: string, personId: string): Promise<PersonDetails> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/People/{personId}";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetContactInfo(_response);
        });
    }

    protected processGetContactInfo(response: Response): Promise<PersonDetails> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonDetails.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonDetails>(<any>null);
    }
}

export class ReferralsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listAllReferrals(organizationId: string, locationId: string): Promise<Referral[]> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListAllReferrals(_response);
        });
    }

    protected processListAllReferrals(response: Response): Promise<Referral[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Referral.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral[]>(<any>null);
    }

    submitReferralCommand(organizationId: string, locationId: string, command: ReferralCommand): Promise<Referral> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/referralCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitReferralCommand(_response);
        });
    }

    protected processSubmitReferralCommand(response: Response): Promise<Referral> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Referral.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral>(<any>null);
    }

    submitArrangementCommand(organizationId: string, locationId: string, command: ArrangementCommand): Promise<Referral> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/arrangementCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitArrangementCommand(_response);
        });
    }

    protected processSubmitArrangementCommand(response: Response): Promise<Referral> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Referral.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral>(<any>null);
    }

    submitArrangementNoteCommand(organizationId: string, locationId: string, command: ArrangementNoteCommand): Promise<Referral> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/Referrals/arrangementNoteCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitArrangementNoteCommand(_response);
        });
    }

    protected processSubmitArrangementNoteCommand(response: Response): Promise<Referral> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Referral.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Referral>(<any>null);
    }
}

export class VolunteerFamiliesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listAllVolunteerFamilies(organizationId: string, locationId: string): Promise<VolunteerFamily[]> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListAllVolunteerFamilies(_response);
        });
    }

    protected processListAllVolunteerFamilies(response: Response): Promise<VolunteerFamily[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VolunteerFamily.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily[]>(<any>null);
    }

    submitVolunteerFamilyCommand(organizationId: string, locationId: string, command: VolunteerFamilyCommand): Promise<VolunteerFamily> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies/volunteerFamilyCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitVolunteerFamilyCommand(_response);
        });
    }

    protected processSubmitVolunteerFamilyCommand(response: Response): Promise<VolunteerFamily> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VolunteerFamily.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily>(<any>null);
    }

    submitVolunteerCommand(organizationId: string, locationId: string, command: VolunteerCommand): Promise<VolunteerFamily> {
        let url_ = this.baseUrl + "/api/{organizationId}/{locationId}/VolunteerFamilies/volunteerCommand";
        if (organizationId === undefined || organizationId === null)
            throw new Error("The parameter 'organizationId' must be defined.");
        url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitVolunteerCommand(_response);
        });
    }

    protected processSubmitVolunteerCommand(response: Response): Promise<VolunteerFamily> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VolunteerFamily.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolunteerFamily>(<any>null);
    }
}

export class Person implements IPerson {
    id?: string;
    userId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    age?: Age | undefined;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.age = _data["age"] ? Age.fromJS(_data["age"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["age"] = this.age ? this.age.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPerson {
    id?: string;
    userId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    age?: Age | undefined;
}

export abstract class Age implements IAge {

    protected _discriminator: string;

    constructor(data?: IAge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Age";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Age {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AgeInYears") {
            let result = new AgeInYears();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ExactAge") {
            let result = new ExactAge();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'Age' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        return data; 
    }
}

export interface IAge {
}

export class AgeInYears extends Age implements IAgeInYears {
    years?: number;
    asOf?: Date;

    constructor(data?: IAgeInYears) {
        super(data);
        this._discriminator = "AgeInYears";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.years = _data["years"];
            this.asOf = _data["asOf"] ? new Date(_data["asOf"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AgeInYears {
        data = typeof data === 'object' ? data : {};
        let result = new AgeInYears();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["years"] = this.years;
        data["asOf"] = this.asOf ? this.asOf.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IAgeInYears extends IAge {
    years?: number;
    asOf?: Date;
}

export class ExactAge extends Age implements IExactAge {
    dateOfBirth?: Date;

    constructor(data?: IExactAge) {
        super(data);
        this._discriminator = "ExactAge";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExactAge {
        data = typeof data === 'object' ? data : {};
        let result = new ExactAge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IExactAge extends IAge {
    dateOfBirth?: Date;
}

export class PersonDetails implements IPersonDetails {
    person?: Person | undefined;
    contactInfo?: ContactInfo | undefined;

    constructor(data?: IPersonDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.person = _data["person"] ? Person.fromJS(_data["person"]) : <any>undefined;
            this.contactInfo = _data["contactInfo"] ? ContactInfo.fromJS(_data["contactInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PersonDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        data["contactInfo"] = this.contactInfo ? this.contactInfo.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonDetails {
    person?: Person | undefined;
    contactInfo?: ContactInfo | undefined;
}

export class ContactInfo implements IContactInfo {
    personId?: string;
    addresses?: Address[] | undefined;
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[] | undefined;
    preferredEmailAddressId?: string | undefined;
    contactMethodPreferenceNotes?: string | undefined;

    constructor(data?: IContactInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            this.currentAddressId = _data["currentAddressId"];
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(PhoneNumber.fromJS(item));
            }
            this.preferredPhoneNumberId = _data["preferredPhoneNumberId"];
            if (Array.isArray(_data["emailAddresses"])) {
                this.emailAddresses = [] as any;
                for (let item of _data["emailAddresses"])
                    this.emailAddresses!.push(EmailAddress.fromJS(item));
            }
            this.preferredEmailAddressId = _data["preferredEmailAddressId"];
            this.contactMethodPreferenceNotes = _data["contactMethodPreferenceNotes"];
        }
    }

    static fromJS(data: any): ContactInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ContactInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["currentAddressId"] = this.currentAddressId;
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item.toJSON());
        }
        data["preferredPhoneNumberId"] = this.preferredPhoneNumberId;
        if (Array.isArray(this.emailAddresses)) {
            data["emailAddresses"] = [];
            for (let item of this.emailAddresses)
                data["emailAddresses"].push(item.toJSON());
        }
        data["preferredEmailAddressId"] = this.preferredEmailAddressId;
        data["contactMethodPreferenceNotes"] = this.contactMethodPreferenceNotes;
        return data; 
    }
}

export interface IContactInfo {
    personId?: string;
    addresses?: Address[] | undefined;
    currentAddressId?: string | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    preferredPhoneNumberId?: string | undefined;
    emailAddresses?: EmailAddress[] | undefined;
    preferredEmailAddressId?: string | undefined;
    contactMethodPreferenceNotes?: string | undefined;
}

export class Address implements IAddress {
    id?: string;
    line1?: string | undefined;
    line2?: string | undefined;
    city?: string | undefined;
    stateId?: string;
    postalCode?: string | undefined;
    countryId?: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.city = _data["city"];
            this.stateId = _data["stateId"];
            this.postalCode = _data["postalCode"];
            this.countryId = _data["countryId"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["city"] = this.city;
        data["stateId"] = this.stateId;
        data["postalCode"] = this.postalCode;
        data["countryId"] = this.countryId;
        return data; 
    }
}

export interface IAddress {
    id?: string;
    line1?: string | undefined;
    line2?: string | undefined;
    city?: string | undefined;
    stateId?: string;
    postalCode?: string | undefined;
    countryId?: string;
}

export class PhoneNumber implements IPhoneNumber {
    id?: string;
    number?: string | undefined;
    type?: PhoneNumberType;

    constructor(data?: IPhoneNumber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.number = _data["number"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): PhoneNumber {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["number"] = this.number;
        data["type"] = this.type;
        return data; 
    }
}

export interface IPhoneNumber {
    id?: string;
    number?: string | undefined;
    type?: PhoneNumberType;
}

export enum PhoneNumberType {
    Mobile = 0,
    Home = 1,
    Work = 2,
    Fax = 3,
}

export class EmailAddress implements IEmailAddress {
    id?: string;
    address?: string | undefined;
    type?: EmailAddressType;

    constructor(data?: IEmailAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address = _data["address"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): EmailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new EmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["type"] = this.type;
        return data; 
    }
}

export interface IEmailAddress {
    id?: string;
    address?: string | undefined;
    type?: EmailAddressType;
}

export enum EmailAddressType {
    Personal = 0,
    Work = 1,
}

export class Referral implements IReferral {
    id?: string;
    policyVersion?: string | undefined;
    createdUtc?: Date;
    closeReason?: ReferralCloseReason | undefined;
    partneringFamily?: Family | undefined;
    contacts?: ContactInfo[] | undefined;
    referralFormUploads?: FormUploadInfo[] | undefined;
    referralActivitiesPerformed?: ActivityInfo[] | undefined;
    arrangements?: Arrangement[] | undefined;

    constructor(data?: IReferral) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.policyVersion = _data["policyVersion"];
            this.createdUtc = _data["createdUtc"] ? new Date(_data["createdUtc"].toString()) : <any>undefined;
            this.closeReason = _data["closeReason"];
            this.partneringFamily = _data["partneringFamily"] ? Family.fromJS(_data["partneringFamily"]) : <any>undefined;
            if (Array.isArray(_data["contacts"])) {
                this.contacts = [] as any;
                for (let item of _data["contacts"])
                    this.contacts!.push(ContactInfo.fromJS(item));
            }
            if (Array.isArray(_data["referralFormUploads"])) {
                this.referralFormUploads = [] as any;
                for (let item of _data["referralFormUploads"])
                    this.referralFormUploads!.push(FormUploadInfo.fromJS(item));
            }
            if (Array.isArray(_data["referralActivitiesPerformed"])) {
                this.referralActivitiesPerformed = [] as any;
                for (let item of _data["referralActivitiesPerformed"])
                    this.referralActivitiesPerformed!.push(ActivityInfo.fromJS(item));
            }
            if (Array.isArray(_data["arrangements"])) {
                this.arrangements = [] as any;
                for (let item of _data["arrangements"])
                    this.arrangements!.push(Arrangement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Referral {
        data = typeof data === 'object' ? data : {};
        let result = new Referral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["policyVersion"] = this.policyVersion;
        data["createdUtc"] = this.createdUtc ? this.createdUtc.toISOString() : <any>undefined;
        data["closeReason"] = this.closeReason;
        data["partneringFamily"] = this.partneringFamily ? this.partneringFamily.toJSON() : <any>undefined;
        if (Array.isArray(this.contacts)) {
            data["contacts"] = [];
            for (let item of this.contacts)
                data["contacts"].push(item.toJSON());
        }
        if (Array.isArray(this.referralFormUploads)) {
            data["referralFormUploads"] = [];
            for (let item of this.referralFormUploads)
                data["referralFormUploads"].push(item.toJSON());
        }
        if (Array.isArray(this.referralActivitiesPerformed)) {
            data["referralActivitiesPerformed"] = [];
            for (let item of this.referralActivitiesPerformed)
                data["referralActivitiesPerformed"].push(item.toJSON());
        }
        if (Array.isArray(this.arrangements)) {
            data["arrangements"] = [];
            for (let item of this.arrangements)
                data["arrangements"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReferral {
    id?: string;
    policyVersion?: string | undefined;
    createdUtc?: Date;
    closeReason?: ReferralCloseReason | undefined;
    partneringFamily?: Family | undefined;
    contacts?: ContactInfo[] | undefined;
    referralFormUploads?: FormUploadInfo[] | undefined;
    referralActivitiesPerformed?: ActivityInfo[] | undefined;
    arrangements?: Arrangement[] | undefined;
}

export enum ReferralCloseReason {
    NotAppropriate = 0,
    Resourced = 1,
    NoCapacity = 2,
    NoLongerNeeded = 3,
    NeedMet = 4,
}

export class Family implements IFamily {
    id?: string;
    adults?: ValueTupleOfPersonAndFamilyAdultRelationshipInfo[] | undefined;
    children?: Person[] | undefined;
    custodialRelationships?: CustodialRelationship[] | undefined;

    constructor(data?: IFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["adults"])) {
                this.adults = [] as any;
                for (let item of _data["adults"])
                    this.adults!.push(ValueTupleOfPersonAndFamilyAdultRelationshipInfo.fromJS(item));
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Person.fromJS(item));
            }
            if (Array.isArray(_data["custodialRelationships"])) {
                this.custodialRelationships = [] as any;
                for (let item of _data["custodialRelationships"])
                    this.custodialRelationships!.push(CustodialRelationship.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Family {
        data = typeof data === 'object' ? data : {};
        let result = new Family();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.adults)) {
            data["adults"] = [];
            for (let item of this.adults)
                data["adults"].push(item.toJSON());
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.custodialRelationships)) {
            data["custodialRelationships"] = [];
            for (let item of this.custodialRelationships)
                data["custodialRelationships"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFamily {
    id?: string;
    adults?: ValueTupleOfPersonAndFamilyAdultRelationshipInfo[] | undefined;
    children?: Person[] | undefined;
    custodialRelationships?: CustodialRelationship[] | undefined;
}

export class ValueTupleOfPersonAndFamilyAdultRelationshipInfo implements IValueTupleOfPersonAndFamilyAdultRelationshipInfo {
    item1?: Person;
    item2?: FamilyAdultRelationshipInfo;

    constructor(data?: IValueTupleOfPersonAndFamilyAdultRelationshipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            this.item2 = _data["item2"] ? FamilyAdultRelationshipInfo.fromJS(_data["item2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValueTupleOfPersonAndFamilyAdultRelationshipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfPersonAndFamilyAdultRelationshipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IValueTupleOfPersonAndFamilyAdultRelationshipInfo {
    item1?: Person;
    item2?: FamilyAdultRelationshipInfo;
}

export class FamilyAdultRelationshipInfo implements IFamilyAdultRelationshipInfo {
    relationshipToFamily?: FamilyAdultRelationshipType;
    familyRelationshipNotes?: string | undefined;
    isInHousehold?: boolean;
    isPrimaryFamilyContact?: boolean;
    safetyRiskNotes?: string | undefined;

    constructor(data?: IFamilyAdultRelationshipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relationshipToFamily = _data["relationshipToFamily"];
            this.familyRelationshipNotes = _data["familyRelationshipNotes"];
            this.isInHousehold = _data["isInHousehold"];
            this.isPrimaryFamilyContact = _data["isPrimaryFamilyContact"];
            this.safetyRiskNotes = _data["safetyRiskNotes"];
        }
    }

    static fromJS(data: any): FamilyAdultRelationshipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyAdultRelationshipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationshipToFamily"] = this.relationshipToFamily;
        data["familyRelationshipNotes"] = this.familyRelationshipNotes;
        data["isInHousehold"] = this.isInHousehold;
        data["isPrimaryFamilyContact"] = this.isPrimaryFamilyContact;
        data["safetyRiskNotes"] = this.safetyRiskNotes;
        return data; 
    }
}

export interface IFamilyAdultRelationshipInfo {
    relationshipToFamily?: FamilyAdultRelationshipType;
    familyRelationshipNotes?: string | undefined;
    isInHousehold?: boolean;
    isPrimaryFamilyContact?: boolean;
    safetyRiskNotes?: string | undefined;
}

export enum FamilyAdultRelationshipType {
    Single = 0,
    Dad = 1,
    Mom = 2,
    Relative = 3,
    Friend = 4,
    DomesticWorker = 5,
}

export class CustodialRelationship implements ICustodialRelationship {
    childId?: string;
    personId?: string;
    type?: CustodialRelationshipType;

    constructor(data?: ICustodialRelationship) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.childId = _data["childId"];
            this.personId = _data["personId"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CustodialRelationship {
        data = typeof data === 'object' ? data : {};
        let result = new CustodialRelationship();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childId"] = this.childId;
        data["personId"] = this.personId;
        data["type"] = this.type;
        return data; 
    }
}

export interface ICustodialRelationship {
    childId?: string;
    personId?: string;
    type?: CustodialRelationshipType;
}

export enum CustodialRelationshipType {
    ParentWithCustody = 0,
    ParentWithCourtAppointedCustody = 1,
    LegalGuardian = 2,
}

export class FormUploadInfo implements IFormUploadInfo {
    userId?: string;
    timestampUtc?: Date;
    formName?: string | undefined;
    formVersion?: string | undefined;
    originalFileName?: string | undefined;
    uploadedDocumentId?: string;

    constructor(data?: IFormUploadInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.formName = _data["formName"];
            this.formVersion = _data["formVersion"];
            this.originalFileName = _data["originalFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): FormUploadInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FormUploadInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["formName"] = this.formName;
        data["formVersion"] = this.formVersion;
        data["originalFileName"] = this.originalFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        return data; 
    }
}

export interface IFormUploadInfo {
    userId?: string;
    timestampUtc?: Date;
    formName?: string | undefined;
    formVersion?: string | undefined;
    originalFileName?: string | undefined;
    uploadedDocumentId?: string;
}

export class ActivityInfo implements IActivityInfo {
    userId?: string;
    timestampUtc?: Date;
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IActivityInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): ActivityInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ActivityInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        return data; 
    }
}

export interface IActivityInfo {
    userId?: string;
    timestampUtc?: Date;
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class Arrangement implements IArrangement {
    id?: string;
    policyVersion?: string | undefined;
    arrangementType?: string | undefined;
    state?: ArrangementState;
    arrangementFormUploads?: FormUploadInfo[] | undefined;
    arrangementActivitiesPerformed?: ActivityInfo[] | undefined;
    volunteerAssignments?: VolunteerAssignment[] | undefined;
    partneringFamilyChildAssignments?: PartneringFamilyChildAssignment[] | undefined;
    childrenLocationHistory?: ChildrenLocationHistoryEntry[] | undefined;
    notes?: Note[] | undefined;

    constructor(data?: IArrangement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.policyVersion = _data["policyVersion"];
            this.arrangementType = _data["arrangementType"];
            this.state = _data["state"];
            if (Array.isArray(_data["arrangementFormUploads"])) {
                this.arrangementFormUploads = [] as any;
                for (let item of _data["arrangementFormUploads"])
                    this.arrangementFormUploads!.push(FormUploadInfo.fromJS(item));
            }
            if (Array.isArray(_data["arrangementActivitiesPerformed"])) {
                this.arrangementActivitiesPerformed = [] as any;
                for (let item of _data["arrangementActivitiesPerformed"])
                    this.arrangementActivitiesPerformed!.push(ActivityInfo.fromJS(item));
            }
            if (Array.isArray(_data["volunteerAssignments"])) {
                this.volunteerAssignments = [] as any;
                for (let item of _data["volunteerAssignments"])
                    this.volunteerAssignments!.push(VolunteerAssignment.fromJS(item));
            }
            if (Array.isArray(_data["partneringFamilyChildAssignments"])) {
                this.partneringFamilyChildAssignments = [] as any;
                for (let item of _data["partneringFamilyChildAssignments"])
                    this.partneringFamilyChildAssignments!.push(PartneringFamilyChildAssignment.fromJS(item));
            }
            if (Array.isArray(_data["childrenLocationHistory"])) {
                this.childrenLocationHistory = [] as any;
                for (let item of _data["childrenLocationHistory"])
                    this.childrenLocationHistory!.push(ChildrenLocationHistoryEntry.fromJS(item));
            }
            if (Array.isArray(_data["notes"])) {
                this.notes = [] as any;
                for (let item of _data["notes"])
                    this.notes!.push(Note.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Arrangement {
        data = typeof data === 'object' ? data : {};
        let result = new Arrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["policyVersion"] = this.policyVersion;
        data["arrangementType"] = this.arrangementType;
        data["state"] = this.state;
        if (Array.isArray(this.arrangementFormUploads)) {
            data["arrangementFormUploads"] = [];
            for (let item of this.arrangementFormUploads)
                data["arrangementFormUploads"].push(item.toJSON());
        }
        if (Array.isArray(this.arrangementActivitiesPerformed)) {
            data["arrangementActivitiesPerformed"] = [];
            for (let item of this.arrangementActivitiesPerformed)
                data["arrangementActivitiesPerformed"].push(item.toJSON());
        }
        if (Array.isArray(this.volunteerAssignments)) {
            data["volunteerAssignments"] = [];
            for (let item of this.volunteerAssignments)
                data["volunteerAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.partneringFamilyChildAssignments)) {
            data["partneringFamilyChildAssignments"] = [];
            for (let item of this.partneringFamilyChildAssignments)
                data["partneringFamilyChildAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.childrenLocationHistory)) {
            data["childrenLocationHistory"] = [];
            for (let item of this.childrenLocationHistory)
                data["childrenLocationHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IArrangement {
    id?: string;
    policyVersion?: string | undefined;
    arrangementType?: string | undefined;
    state?: ArrangementState;
    arrangementFormUploads?: FormUploadInfo[] | undefined;
    arrangementActivitiesPerformed?: ActivityInfo[] | undefined;
    volunteerAssignments?: VolunteerAssignment[] | undefined;
    partneringFamilyChildAssignments?: PartneringFamilyChildAssignment[] | undefined;
    childrenLocationHistory?: ChildrenLocationHistoryEntry[] | undefined;
    notes?: Note[] | undefined;
}

export enum ArrangementState {
    Setup = 0,
    Open = 1,
    Closed = 2,
}

export abstract class VolunteerAssignment implements IVolunteerAssignment {
    arrangementFunction?: string | undefined;

    protected _discriminator: string;

    constructor(data?: IVolunteerAssignment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerAssignment";
    }

    init(_data?: any) {
        if (_data) {
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): VolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "FamilyVolunteerAssignment") {
            let result = new FamilyVolunteerAssignment();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "IndividualVolunteerAssignment") {
            let result = new IndividualVolunteerAssignment();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerAssignment' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["arrangementFunction"] = this.arrangementFunction;
        return data; 
    }
}

export interface IVolunteerAssignment {
    arrangementFunction?: string | undefined;
}

export class FamilyVolunteerAssignment extends VolunteerAssignment implements IFamilyVolunteerAssignment {
    familyId?: string;

    constructor(data?: IFamilyVolunteerAssignment) {
        super(data);
        this._discriminator = "FamilyVolunteerAssignment";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): FamilyVolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyVolunteerAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        super.toJSON(data);
        return data; 
    }
}

export interface IFamilyVolunteerAssignment extends IVolunteerAssignment {
    familyId?: string;
}

export class IndividualVolunteerAssignment extends VolunteerAssignment implements IIndividualVolunteerAssignment {
    personId?: string;

    constructor(data?: IIndividualVolunteerAssignment) {
        super(data);
        this._discriminator = "IndividualVolunteerAssignment";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): IndividualVolunteerAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new IndividualVolunteerAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        super.toJSON(data);
        return data; 
    }
}

export interface IIndividualVolunteerAssignment extends IVolunteerAssignment {
    personId?: string;
}

export class PartneringFamilyChildAssignment implements IPartneringFamilyChildAssignment {
    personId?: string;

    constructor(data?: IPartneringFamilyChildAssignment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): PartneringFamilyChildAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new PartneringFamilyChildAssignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        return data; 
    }
}

export interface IPartneringFamilyChildAssignment {
    personId?: string;
}

export class ChildrenLocationHistoryEntry implements IChildrenLocationHistoryEntry {
    userId?: string;
    timestampUtc?: Date;
    childrenIds?: string[] | undefined;
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string | undefined;

    constructor(data?: IChildrenLocationHistoryEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["childrenIds"])) {
                this.childrenIds = [] as any;
                for (let item of _data["childrenIds"])
                    this.childrenIds!.push(item);
            }
            this.familyId = _data["familyId"];
            this.plan = _data["plan"];
            this.additionalExplanation = _data["additionalExplanation"];
        }
    }

    static fromJS(data: any): ChildrenLocationHistoryEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ChildrenLocationHistoryEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.childrenIds)) {
            data["childrenIds"] = [];
            for (let item of this.childrenIds)
                data["childrenIds"].push(item);
        }
        data["familyId"] = this.familyId;
        data["plan"] = this.plan;
        data["additionalExplanation"] = this.additionalExplanation;
        return data; 
    }
}

export interface IChildrenLocationHistoryEntry {
    userId?: string;
    timestampUtc?: Date;
    childrenIds?: string[] | undefined;
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string | undefined;
}

export enum ChildrenLocationPlan {
    OvernightHousing = 0,
    DaytimeChildCare = 1,
    ReturnToFamily = 2,
}

export class Note implements INote {
    id?: string;
    authorId?: string;
    timestampUtc?: Date;
    contents?: string | undefined;
    status?: NoteStatus;

    constructor(data?: INote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.authorId = _data["authorId"];
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.contents = _data["contents"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Note {
        data = typeof data === 'object' ? data : {};
        let result = new Note();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["authorId"] = this.authorId;
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["contents"] = this.contents;
        data["status"] = this.status;
        return data; 
    }
}

export interface INote {
    id?: string;
    authorId?: string;
    timestampUtc?: Date;
    contents?: string | undefined;
    status?: NoteStatus;
}

export enum NoteStatus {
    Draft = 0,
    Approved = 1,
}

export abstract class ReferralCommand implements IReferralCommand {
    referralId?: string;

    protected _discriminator: string;

    constructor(data?: IReferralCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ReferralCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.referralId = _data["referralId"];
        }
    }

    static fromJS(data: any): ReferralCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "CloseReferral") {
            let result = new CloseReferral();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateReferral") {
            let result = new CreateReferral();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "PerformReferralActivity") {
            let result = new PerformReferralActivity();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadReferralForm") {
            let result = new UploadReferralForm();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ReferralCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["referralId"] = this.referralId;
        return data; 
    }
}

export interface IReferralCommand {
    referralId?: string;
}

export class CloseReferral extends ReferralCommand implements ICloseReferral {
    closeReason?: ReferralCloseReason;

    constructor(data?: ICloseReferral) {
        super(data);
        this._discriminator = "CloseReferral";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.closeReason = _data["closeReason"];
        }
    }

    static fromJS(data: any): CloseReferral {
        data = typeof data === 'object' ? data : {};
        let result = new CloseReferral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["closeReason"] = this.closeReason;
        super.toJSON(data);
        return data; 
    }
}

export interface ICloseReferral extends IReferralCommand {
    closeReason?: ReferralCloseReason;
}

export class CreateReferral extends ReferralCommand implements ICreateReferral {
    familyId?: string;
    policyVersion?: string | undefined;
    openedAtUtc?: Date;

    constructor(data?: ICreateReferral) {
        super(data);
        this._discriminator = "CreateReferral";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.policyVersion = _data["policyVersion"];
            this.openedAtUtc = _data["openedAtUtc"] ? new Date(_data["openedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateReferral {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReferral();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["policyVersion"] = this.policyVersion;
        data["openedAtUtc"] = this.openedAtUtc ? this.openedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateReferral extends IReferralCommand {
    familyId?: string;
    policyVersion?: string | undefined;
    openedAtUtc?: Date;
}

export class PerformReferralActivity extends ReferralCommand implements IPerformReferralActivity {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IPerformReferralActivity) {
        super(data);
        this._discriminator = "PerformReferralActivity";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): PerformReferralActivity {
        data = typeof data === 'object' ? data : {};
        let result = new PerformReferralActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPerformReferralActivity extends IReferralCommand {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class UploadReferralForm extends ReferralCommand implements IUploadReferralForm {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;

    constructor(data?: IUploadReferralForm) {
        super(data);
        this._discriminator = "UploadReferralForm";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.formName = _data["formName"];
            this.formVersion = _data["formVersion"];
            this.uploadedFileName = _data["uploadedFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): UploadReferralForm {
        data = typeof data === 'object' ? data : {};
        let result = new UploadReferralForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formName"] = this.formName;
        data["formVersion"] = this.formVersion;
        data["uploadedFileName"] = this.uploadedFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUploadReferralForm extends IReferralCommand {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;
}

export abstract class ArrangementCommand implements IArrangementCommand {
    referralId?: string;
    arrangementId?: string;

    protected _discriminator: string;

    constructor(data?: IArrangementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ArrangementCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.referralId = _data["referralId"];
            this.arrangementId = _data["arrangementId"];
        }
    }

    static fromJS(data: any): ArrangementCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AssignIndividualVolunteer") {
            let result = new AssignIndividualVolunteer();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AssignPartneringFamilyChildren") {
            let result = new AssignPartneringFamilyChildren();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "AssignVolunteerFamily") {
            let result = new AssignVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateArrangement") {
            let result = new CreateArrangement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EndArrangement") {
            let result = new EndArrangement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "InitiateArrangement") {
            let result = new InitiateArrangement();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "PerformArrangementActivity") {
            let result = new PerformArrangementActivity();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "TrackChildrenLocationChange") {
            let result = new TrackChildrenLocationChange();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadArrangementForm") {
            let result = new UploadArrangementForm();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ArrangementCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["referralId"] = this.referralId;
        data["arrangementId"] = this.arrangementId;
        return data; 
    }
}

export interface IArrangementCommand {
    referralId?: string;
    arrangementId?: string;
}

export class AssignIndividualVolunteer extends ArrangementCommand implements IAssignIndividualVolunteer {
    personId?: string;
    arrangementFunction?: string | undefined;

    constructor(data?: IAssignIndividualVolunteer) {
        super(data);
        this._discriminator = "AssignIndividualVolunteer";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.personId = _data["personId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): AssignIndividualVolunteer {
        data = typeof data === 'object' ? data : {};
        let result = new AssignIndividualVolunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        data["arrangementFunction"] = this.arrangementFunction;
        super.toJSON(data);
        return data; 
    }
}

export interface IAssignIndividualVolunteer extends IArrangementCommand {
    personId?: string;
    arrangementFunction?: string | undefined;
}

export class AssignPartneringFamilyChildren extends ArrangementCommand implements IAssignPartneringFamilyChildren {
    childrenIds?: string[] | undefined;

    constructor(data?: IAssignPartneringFamilyChildren) {
        super(data);
        this._discriminator = "AssignPartneringFamilyChildren";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["childrenIds"])) {
                this.childrenIds = [] as any;
                for (let item of _data["childrenIds"])
                    this.childrenIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AssignPartneringFamilyChildren {
        data = typeof data === 'object' ? data : {};
        let result = new AssignPartneringFamilyChildren();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.childrenIds)) {
            data["childrenIds"] = [];
            for (let item of this.childrenIds)
                data["childrenIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAssignPartneringFamilyChildren extends IArrangementCommand {
    childrenIds?: string[] | undefined;
}

export class AssignVolunteerFamily extends ArrangementCommand implements IAssignVolunteerFamily {
    familyId?: string;
    arrangementFunction?: string | undefined;

    constructor(data?: IAssignVolunteerFamily) {
        super(data);
        this._discriminator = "AssignVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.familyId = _data["familyId"];
            this.arrangementFunction = _data["arrangementFunction"];
        }
    }

    static fromJS(data: any): AssignVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new AssignVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyId"] = this.familyId;
        data["arrangementFunction"] = this.arrangementFunction;
        super.toJSON(data);
        return data; 
    }
}

export interface IAssignVolunteerFamily extends IArrangementCommand {
    familyId?: string;
    arrangementFunction?: string | undefined;
}

export class CreateArrangement extends ArrangementCommand implements ICreateArrangement {
    policyVersion?: string | undefined;
    arrangementType?: string | undefined;

    constructor(data?: ICreateArrangement) {
        super(data);
        this._discriminator = "CreateArrangement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.policyVersion = _data["policyVersion"];
            this.arrangementType = _data["arrangementType"];
        }
    }

    static fromJS(data: any): CreateArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new CreateArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["policyVersion"] = this.policyVersion;
        data["arrangementType"] = this.arrangementType;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateArrangement extends IArrangementCommand {
    policyVersion?: string | undefined;
    arrangementType?: string | undefined;
}

export class EndArrangement extends ArrangementCommand implements IEndArrangement {
    endedAtUtc?: Date;

    constructor(data?: IEndArrangement) {
        super(data);
        this._discriminator = "EndArrangement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.endedAtUtc = _data["endedAtUtc"] ? new Date(_data["endedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EndArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new EndArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endedAtUtc"] = this.endedAtUtc ? this.endedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IEndArrangement extends IArrangementCommand {
    endedAtUtc?: Date;
}

export class InitiateArrangement extends ArrangementCommand implements IInitiateArrangement {
    initiatedAtUtc?: Date;

    constructor(data?: IInitiateArrangement) {
        super(data);
        this._discriminator = "InitiateArrangement";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.initiatedAtUtc = _data["initiatedAtUtc"] ? new Date(_data["initiatedAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): InitiateArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new InitiateArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["initiatedAtUtc"] = this.initiatedAtUtc ? this.initiatedAtUtc.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IInitiateArrangement extends IArrangementCommand {
    initiatedAtUtc?: Date;
}

export class PerformArrangementActivity extends ArrangementCommand implements IPerformArrangementActivity {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IPerformArrangementActivity) {
        super(data);
        this._discriminator = "PerformArrangementActivity";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): PerformArrangementActivity {
        data = typeof data === 'object' ? data : {};
        let result = new PerformArrangementActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPerformArrangementActivity extends IArrangementCommand {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class TrackChildrenLocationChange extends ArrangementCommand implements ITrackChildrenLocationChange {
    changedAtUtc?: Date;
    childrenIds?: string[] | undefined;
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string | undefined;

    constructor(data?: ITrackChildrenLocationChange) {
        super(data);
        this._discriminator = "TrackChildrenLocationChange";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.changedAtUtc = _data["changedAtUtc"] ? new Date(_data["changedAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["childrenIds"])) {
                this.childrenIds = [] as any;
                for (let item of _data["childrenIds"])
                    this.childrenIds!.push(item);
            }
            this.familyId = _data["familyId"];
            this.plan = _data["plan"];
            this.additionalExplanation = _data["additionalExplanation"];
        }
    }

    static fromJS(data: any): TrackChildrenLocationChange {
        data = typeof data === 'object' ? data : {};
        let result = new TrackChildrenLocationChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["changedAtUtc"] = this.changedAtUtc ? this.changedAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.childrenIds)) {
            data["childrenIds"] = [];
            for (let item of this.childrenIds)
                data["childrenIds"].push(item);
        }
        data["familyId"] = this.familyId;
        data["plan"] = this.plan;
        data["additionalExplanation"] = this.additionalExplanation;
        super.toJSON(data);
        return data; 
    }
}

export interface ITrackChildrenLocationChange extends IArrangementCommand {
    changedAtUtc?: Date;
    childrenIds?: string[] | undefined;
    familyId?: string;
    plan?: ChildrenLocationPlan;
    additionalExplanation?: string | undefined;
}

export class UploadArrangementForm extends ArrangementCommand implements IUploadArrangementForm {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;

    constructor(data?: IUploadArrangementForm) {
        super(data);
        this._discriminator = "UploadArrangementForm";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.formName = _data["formName"];
            this.formVersion = _data["formVersion"];
            this.uploadedFileName = _data["uploadedFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): UploadArrangementForm {
        data = typeof data === 'object' ? data : {};
        let result = new UploadArrangementForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formName"] = this.formName;
        data["formVersion"] = this.formVersion;
        data["uploadedFileName"] = this.uploadedFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUploadArrangementForm extends IArrangementCommand {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;
}

export abstract class ArrangementNoteCommand implements IArrangementNoteCommand {
    referralId?: string;
    arrangementId?: string;
    noteId?: string;

    protected _discriminator: string;

    constructor(data?: IArrangementNoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ArrangementNoteCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.referralId = _data["referralId"];
            this.arrangementId = _data["arrangementId"];
            this.noteId = _data["noteId"];
        }
    }

    static fromJS(data: any): ArrangementNoteCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "ApproveArrangementNote") {
            let result = new ApproveArrangementNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "CreateDraftArrangementNote") {
            let result = new CreateDraftArrangementNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "DiscardDraftArrangementNote") {
            let result = new DiscardDraftArrangementNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EditDraftArrangementNote") {
            let result = new EditDraftArrangementNote();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ArrangementNoteCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["referralId"] = this.referralId;
        data["arrangementId"] = this.arrangementId;
        data["noteId"] = this.noteId;
        return data; 
    }
}

export interface IArrangementNoteCommand {
    referralId?: string;
    arrangementId?: string;
    noteId?: string;
}

export class ApproveArrangementNote extends ArrangementNoteCommand implements IApproveArrangementNote {
    finalizedNoteContents?: string | undefined;

    constructor(data?: IApproveArrangementNote) {
        super(data);
        this._discriminator = "ApproveArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.finalizedNoteContents = _data["finalizedNoteContents"];
        }
    }

    static fromJS(data: any): ApproveArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new ApproveArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["finalizedNoteContents"] = this.finalizedNoteContents;
        super.toJSON(data);
        return data; 
    }
}

export interface IApproveArrangementNote extends IArrangementNoteCommand {
    finalizedNoteContents?: string | undefined;
}

export class CreateDraftArrangementNote extends ArrangementNoteCommand implements ICreateDraftArrangementNote {
    draftNoteContents?: string | undefined;

    constructor(data?: ICreateDraftArrangementNote) {
        super(data);
        this._discriminator = "CreateDraftArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftNoteContents = _data["draftNoteContents"];
        }
    }

    static fromJS(data: any): CreateDraftArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDraftArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftNoteContents"] = this.draftNoteContents;
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateDraftArrangementNote extends IArrangementNoteCommand {
    draftNoteContents?: string | undefined;
}

export class DiscardDraftArrangementNote extends ArrangementNoteCommand implements IDiscardDraftArrangementNote {

    constructor(data?: IDiscardDraftArrangementNote) {
        super(data);
        this._discriminator = "DiscardDraftArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): DiscardDraftArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new DiscardDraftArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDiscardDraftArrangementNote extends IArrangementNoteCommand {
}

export class EditDraftArrangementNote extends ArrangementNoteCommand implements IEditDraftArrangementNote {
    draftNoteContents?: string | undefined;

    constructor(data?: IEditDraftArrangementNote) {
        super(data);
        this._discriminator = "EditDraftArrangementNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftNoteContents = _data["draftNoteContents"];
        }
    }

    static fromJS(data: any): EditDraftArrangementNote {
        data = typeof data === 'object' ? data : {};
        let result = new EditDraftArrangementNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftNoteContents"] = this.draftNoteContents;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditDraftArrangementNote extends IArrangementNoteCommand {
    draftNoteContents?: string | undefined;
}

export class VolunteerFamily implements IVolunteerFamily {
    family?: Family | undefined;
    approvalFormUploads?: FormUploadInfo[] | undefined;
    approvalActivitiesPerformed?: ActivityInfo[] | undefined;
    familyRoleApprovals?: { [key: string]: RoleApprovalStatus; } | undefined;
    individualVolunteers?: { [key: string]: Volunteer; } | undefined;

    constructor(data?: IVolunteerFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.family = _data["family"] ? Family.fromJS(_data["family"]) : <any>undefined;
            if (Array.isArray(_data["approvalFormUploads"])) {
                this.approvalFormUploads = [] as any;
                for (let item of _data["approvalFormUploads"])
                    this.approvalFormUploads!.push(FormUploadInfo.fromJS(item));
            }
            if (Array.isArray(_data["approvalActivitiesPerformed"])) {
                this.approvalActivitiesPerformed = [] as any;
                for (let item of _data["approvalActivitiesPerformed"])
                    this.approvalActivitiesPerformed!.push(ActivityInfo.fromJS(item));
            }
            if (_data["familyRoleApprovals"]) {
                this.familyRoleApprovals = {} as any;
                for (let key in _data["familyRoleApprovals"]) {
                    if (_data["familyRoleApprovals"].hasOwnProperty(key))
                        (<any>this.familyRoleApprovals)![key] = _data["familyRoleApprovals"][key];
                }
            }
            if (_data["individualVolunteers"]) {
                this.individualVolunteers = {} as any;
                for (let key in _data["individualVolunteers"]) {
                    if (_data["individualVolunteers"].hasOwnProperty(key))
                        (<any>this.individualVolunteers)![key] = _data["individualVolunteers"][key] ? Volunteer.fromJS(_data["individualVolunteers"][key]) : new Volunteer();
                }
            }
        }
    }

    static fromJS(data: any): VolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new VolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["family"] = this.family ? this.family.toJSON() : <any>undefined;
        if (Array.isArray(this.approvalFormUploads)) {
            data["approvalFormUploads"] = [];
            for (let item of this.approvalFormUploads)
                data["approvalFormUploads"].push(item.toJSON());
        }
        if (Array.isArray(this.approvalActivitiesPerformed)) {
            data["approvalActivitiesPerformed"] = [];
            for (let item of this.approvalActivitiesPerformed)
                data["approvalActivitiesPerformed"].push(item.toJSON());
        }
        if (this.familyRoleApprovals) {
            data["familyRoleApprovals"] = {};
            for (let key in this.familyRoleApprovals) {
                if (this.familyRoleApprovals.hasOwnProperty(key))
                    (<any>data["familyRoleApprovals"])[key] = this.familyRoleApprovals[key];
            }
        }
        if (this.individualVolunteers) {
            data["individualVolunteers"] = {};
            for (let key in this.individualVolunteers) {
                if (this.individualVolunteers.hasOwnProperty(key))
                    (<any>data["individualVolunteers"])[key] = this.individualVolunteers[key] ? this.individualVolunteers[key].toJSON() : <any>undefined;
            }
        }
        return data; 
    }
}

export interface IVolunteerFamily {
    family?: Family | undefined;
    approvalFormUploads?: FormUploadInfo[] | undefined;
    approvalActivitiesPerformed?: ActivityInfo[] | undefined;
    familyRoleApprovals?: { [key: string]: RoleApprovalStatus; } | undefined;
    individualVolunteers?: { [key: string]: Volunteer; } | undefined;
}

export enum RoleApprovalStatus {
    Prospective = 0,
    Approved = 1,
}

export class Volunteer implements IVolunteer {
    approvalFormUploads?: FormUploadInfo[] | undefined;
    approvalActivitiesPerformed?: ActivityInfo[] | undefined;
    individualRoleApprovals?: { [key: string]: RoleApprovalStatus; } | undefined;

    constructor(data?: IVolunteer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["approvalFormUploads"])) {
                this.approvalFormUploads = [] as any;
                for (let item of _data["approvalFormUploads"])
                    this.approvalFormUploads!.push(FormUploadInfo.fromJS(item));
            }
            if (Array.isArray(_data["approvalActivitiesPerformed"])) {
                this.approvalActivitiesPerformed = [] as any;
                for (let item of _data["approvalActivitiesPerformed"])
                    this.approvalActivitiesPerformed!.push(ActivityInfo.fromJS(item));
            }
            if (_data["individualRoleApprovals"]) {
                this.individualRoleApprovals = {} as any;
                for (let key in _data["individualRoleApprovals"]) {
                    if (_data["individualRoleApprovals"].hasOwnProperty(key))
                        (<any>this.individualRoleApprovals)![key] = _data["individualRoleApprovals"][key];
                }
            }
        }
    }

    static fromJS(data: any): Volunteer {
        data = typeof data === 'object' ? data : {};
        let result = new Volunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.approvalFormUploads)) {
            data["approvalFormUploads"] = [];
            for (let item of this.approvalFormUploads)
                data["approvalFormUploads"].push(item.toJSON());
        }
        if (Array.isArray(this.approvalActivitiesPerformed)) {
            data["approvalActivitiesPerformed"] = [];
            for (let item of this.approvalActivitiesPerformed)
                data["approvalActivitiesPerformed"].push(item.toJSON());
        }
        if (this.individualRoleApprovals) {
            data["individualRoleApprovals"] = {};
            for (let key in this.individualRoleApprovals) {
                if (this.individualRoleApprovals.hasOwnProperty(key))
                    (<any>data["individualRoleApprovals"])[key] = this.individualRoleApprovals[key];
            }
        }
        return data; 
    }
}

export interface IVolunteer {
    approvalFormUploads?: FormUploadInfo[] | undefined;
    approvalActivitiesPerformed?: ActivityInfo[] | undefined;
    individualRoleApprovals?: { [key: string]: RoleApprovalStatus; } | undefined;
}

export abstract class VolunteerFamilyCommand implements IVolunteerFamilyCommand {
    familyId?: string;

    protected _discriminator: string;

    constructor(data?: IVolunteerFamilyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerFamilyCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): VolunteerFamilyCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "DeactivateVolunteerFamily") {
            let result = new DeactivateVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "PerformVolunteerFamilyActivity") {
            let result = new PerformVolunteerFamilyActivity();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ReactivateVolunteerFamily") {
            let result = new ReactivateVolunteerFamily();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "SetVolunteerFamilyNote") {
            let result = new SetVolunteerFamilyNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadVolunteerFamilyForm") {
            let result = new UploadVolunteerFamilyForm();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerFamilyCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["familyId"] = this.familyId;
        return data; 
    }
}

export interface IVolunteerFamilyCommand {
    familyId?: string;
}

export class DeactivateVolunteerFamily extends VolunteerFamilyCommand implements IDeactivateVolunteerFamily {
    reason?: string | undefined;

    constructor(data?: IDeactivateVolunteerFamily) {
        super(data);
        this._discriminator = "DeactivateVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): DeactivateVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new DeactivateVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reason"] = this.reason;
        super.toJSON(data);
        return data; 
    }
}

export interface IDeactivateVolunteerFamily extends IVolunteerFamilyCommand {
    reason?: string | undefined;
}

export class PerformVolunteerFamilyActivity extends VolunteerFamilyCommand implements IPerformVolunteerFamilyActivity {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IPerformVolunteerFamilyActivity) {
        super(data);
        this._discriminator = "PerformVolunteerFamilyActivity";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): PerformVolunteerFamilyActivity {
        data = typeof data === 'object' ? data : {};
        let result = new PerformVolunteerFamilyActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPerformVolunteerFamilyActivity extends IVolunteerFamilyCommand {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class ReactivateVolunteerFamily extends VolunteerFamilyCommand implements IReactivateVolunteerFamily {

    constructor(data?: IReactivateVolunteerFamily) {
        super(data);
        this._discriminator = "ReactivateVolunteerFamily";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ReactivateVolunteerFamily {
        data = typeof data === 'object' ? data : {};
        let result = new ReactivateVolunteerFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IReactivateVolunteerFamily extends IVolunteerFamilyCommand {
}

export class SetVolunteerFamilyNote extends VolunteerFamilyCommand implements ISetVolunteerFamilyNote {
    note?: string | undefined;

    constructor(data?: ISetVolunteerFamilyNote) {
        super(data);
        this._discriminator = "SetVolunteerFamilyNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): SetVolunteerFamilyNote {
        data = typeof data === 'object' ? data : {};
        let result = new SetVolunteerFamilyNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note"] = this.note;
        super.toJSON(data);
        return data; 
    }
}

export interface ISetVolunteerFamilyNote extends IVolunteerFamilyCommand {
    note?: string | undefined;
}

export class UploadVolunteerFamilyForm extends VolunteerFamilyCommand implements IUploadVolunteerFamilyForm {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;

    constructor(data?: IUploadVolunteerFamilyForm) {
        super(data);
        this._discriminator = "UploadVolunteerFamilyForm";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.formName = _data["formName"];
            this.formVersion = _data["formVersion"];
            this.uploadedFileName = _data["uploadedFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): UploadVolunteerFamilyForm {
        data = typeof data === 'object' ? data : {};
        let result = new UploadVolunteerFamilyForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formName"] = this.formName;
        data["formVersion"] = this.formVersion;
        data["uploadedFileName"] = this.uploadedFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUploadVolunteerFamilyForm extends IVolunteerFamilyCommand {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;
}

export abstract class VolunteerCommand implements IVolunteerCommand {
    familyId?: string;
    personId?: string;

    protected _discriminator: string;

    constructor(data?: IVolunteerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "VolunteerCommand";
    }

    init(_data?: any) {
        if (_data) {
            this.familyId = _data["familyId"];
            this.personId = _data["personId"];
        }
    }

    static fromJS(data: any): VolunteerCommand {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "DeactivateVolunteer") {
            let result = new DeactivateVolunteer();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "PerformVolunteerActivity") {
            let result = new PerformVolunteerActivity();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "ReactivateVolunteer") {
            let result = new ReactivateVolunteer();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "SetVolunteerNote") {
            let result = new SetVolunteerNote();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "UploadVolunteerForm") {
            let result = new UploadVolunteerForm();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VolunteerCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["familyId"] = this.familyId;
        data["personId"] = this.personId;
        return data; 
    }
}

export interface IVolunteerCommand {
    familyId?: string;
    personId?: string;
}

export class DeactivateVolunteer extends VolunteerCommand implements IDeactivateVolunteer {
    reason?: string | undefined;

    constructor(data?: IDeactivateVolunteer) {
        super(data);
        this._discriminator = "DeactivateVolunteer";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): DeactivateVolunteer {
        data = typeof data === 'object' ? data : {};
        let result = new DeactivateVolunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reason"] = this.reason;
        super.toJSON(data);
        return data; 
    }
}

export interface IDeactivateVolunteer extends IVolunteerCommand {
    reason?: string | undefined;
}

export class PerformVolunteerActivity extends VolunteerCommand implements IPerformVolunteerActivity {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;

    constructor(data?: IPerformVolunteerActivity) {
        super(data);
        this._discriminator = "PerformVolunteerActivity";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activityName = _data["activityName"];
            this.performedAtUtc = _data["performedAtUtc"] ? new Date(_data["performedAtUtc"].toString()) : <any>undefined;
            this.performedByPersonId = _data["performedByPersonId"];
        }
    }

    static fromJS(data: any): PerformVolunteerActivity {
        data = typeof data === 'object' ? data : {};
        let result = new PerformVolunteerActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityName"] = this.activityName;
        data["performedAtUtc"] = this.performedAtUtc ? this.performedAtUtc.toISOString() : <any>undefined;
        data["performedByPersonId"] = this.performedByPersonId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPerformVolunteerActivity extends IVolunteerCommand {
    activityName?: string | undefined;
    performedAtUtc?: Date;
    performedByPersonId?: string;
}

export class ReactivateVolunteer extends VolunteerCommand implements IReactivateVolunteer {

    constructor(data?: IReactivateVolunteer) {
        super(data);
        this._discriminator = "ReactivateVolunteer";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ReactivateVolunteer {
        data = typeof data === 'object' ? data : {};
        let result = new ReactivateVolunteer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IReactivateVolunteer extends IVolunteerCommand {
}

export class SetVolunteerNote extends VolunteerCommand implements ISetVolunteerNote {
    note?: string | undefined;

    constructor(data?: ISetVolunteerNote) {
        super(data);
        this._discriminator = "SetVolunteerNote";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): SetVolunteerNote {
        data = typeof data === 'object' ? data : {};
        let result = new SetVolunteerNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note"] = this.note;
        super.toJSON(data);
        return data; 
    }
}

export interface ISetVolunteerNote extends IVolunteerCommand {
    note?: string | undefined;
}

export class UploadVolunteerForm extends VolunteerCommand implements IUploadVolunteerForm {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;

    constructor(data?: IUploadVolunteerForm) {
        super(data);
        this._discriminator = "UploadVolunteerForm";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.formName = _data["formName"];
            this.formVersion = _data["formVersion"];
            this.uploadedFileName = _data["uploadedFileName"];
            this.uploadedDocumentId = _data["uploadedDocumentId"];
        }
    }

    static fromJS(data: any): UploadVolunteerForm {
        data = typeof data === 'object' ? data : {};
        let result = new UploadVolunteerForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formName"] = this.formName;
        data["formVersion"] = this.formVersion;
        data["uploadedFileName"] = this.uploadedFileName;
        data["uploadedDocumentId"] = this.uploadedDocumentId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUploadVolunteerForm extends IVolunteerCommand {
    formName?: string | undefined;
    formVersion?: string | undefined;
    uploadedFileName?: string | undefined;
    uploadedDocumentId?: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}