StaticAspect "CareTogether V2" { 
  AppClient SupportClient AnalyticsClient IntegrationClient
  MembershipManager ProcessManager CommunicationManager
  EvaluationEngine TransformationEngine
  AccountsAccess PoliciesAccess WorkflowsAccess RecordsAccess AuditAccess
  AccountsResource PoliciesResource WorkflowsResource RecordsResource FormsResource AuditResource
  EventLogUtility
  FileStoreUtility
  ObjectStoreUtility
  TelephonyUtility
  EmailUtility
  PushNotificationUtility
  PubSubUtility
  SecurityUtility
  LoggingUtility
  IdentityProviderUtility /* Was missing */
}

/*
# MIGRATION NOTES
- Authorize*CommandAsync methods move into the Resource Access layer (primarily into RecordsAccess)
*/

Activity "UC-Me-1: Sign In" {
  |u|User
  |s|System
  |u|
  start
  :Browse to CareTogether;
  if (User signed in) is (no) then
    :Redirect to Sign-In Screen;
    |s|
    :Determine sign-in methods to offer;
    |u|
    :Select sign-in method;
    :Enter credentials;
    |s|
    :Load user account;
  else (yes)
  end if
  |u|
  :Open Dashboard;
  stop
}

UseCase "UC-Me-1: Sign In" {
  AppClient - ClaimsPrincipal ISecurityUtility.Authenticate(HttpContext) > SecurityUtility
  AppClient - AppUserAccount IMembershipManager.SignIn(ClaimsPrincipal) > MembershipManager
  MembershipManager - Account IAccountsAccess.GetOrCreateUserAccount(ClaimsPrincipal) > AccountsAccess
  AccountsAccess -> AccountsResource /*  Account IAccountsResource.GetOrCreateUserAccount(UserId) */
}

/* HttpContext DTO is provided by ASP.NET Core */
/* ClaimsPrincipal DTO is provided by System.Security.Claims */

DTO AppUserAccount {
  Guid UserId
  /*TODO: Define this*/
}

DTO Account {
  Guid UserId
  AccountOrganizationAccess[] Organizations
}

DTO AccountOrganizationAccess {
  Guid OrganizationId
  AccountLocationAccess[] Locations
}

DTO AccountLocationAccess {
  Guid LocationId
  Guid PersonId
  string[] Roles
}

Activity "UC-Pr-1: Open Location" {
  |c|Client
  |s|System
  |c|
  start
  :Sign In
    ""<color:#777>[UC-Me-1]</color>"";
  :Select Organization;
  :Select Location;
  |s|
  :Authorize User Access in Context
    ""<color:#777>[SUB-Pr-1]</color>"";
  :Load Location Data; 
  'NOTE: This will also be the Process Manager
  |c|
  :View Location Dashboard;
  stop
}

UseCase "UC-Pr-1: Open Location" {
  AppClient -> ProcessManager
  ProcessManager -> EvaluationEngine

}

UseCase "SUB-Pr-1: Authorize User Access in Context" {
  ProcessManager - ContextPermissions IEvaluationEngine.AuthorizeUserAccess(AuthorizationContext) > EvaluationEngine
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
}

DTO AuthorizationContext {}

/*BUG: DTO inheritance is not supported*/
/*DTO GlobalAuthorizationContext : AuthorizationContext {}*/

Activity "UC-Pr-2: View Communities List" {
  |c|Client
  |s|System
  |c|
  start
  :Open Location
    ""<color:#777>[UC-Pr-1]</color>"";
  :Select Communities Screen;
  |s|
  :List Communities for User;
  |c|
  :Display Communities List;
  stop
}

UseCase "UC-Pr-2: View Families List in Location" {
  AppClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

UseCase "UC-Pr-3: View Families List in Organization" {
  AnalyticsClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  SupportClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

UseCase "UC-Pr-4: View Communities List in Location" {
  AppClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

UseCase "UC-Pr-5: View Communities List in Organization" {
  AnalyticsClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  SupportClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(OrganizationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

DTO RetrieveRecordsRequest {
  DisclosureMethod Method
  RecordType? RecordType
  Guid? OrganizationId
  Guid? LocationId
  Filters? Filters
}

DTO Filters { }

DTO RetrieveRecordsResponse {
  Community[] Communities
  Family[] Families
  Organization[] Organizations
}

DTO Family {
  Guid Id,
  Guid LocationId,
  string Name,
  string? PrimaryEmail,
  string? PrimaryPhoneNumber,
  Address? PrimaryAddress,
  string? HomeChurch
}

DTO Address {
  string? Line1,
  string? Line2,
  string? City,
  string? Country,
  string? State,
  string? PostalCode
}

DTO Community {
    Guid Id,
    Guid LocationId,
    string Name
}

DTO Organization {}

DTO ContextualPermissions {
  AuthorizationContext Context
  string[] AllowedActions
}

DTO RecordsDisclosureRequest {
  ContextualPermissions Permissions
  DisclosureMethod Method
  RecordsAccess.RecordsResponse Records
}

DTO RecordsCriteria {
  ContextualPermissions Permissions
  DisclosureMethod Method
  RecordType? RecordType
  Guid? OrganizationId
  Guid? LocationId
}

DTO RecordsResponse {
  Community[] Communities
  Family[] Families
  Organization[] Organizations
}

UseCase "UC-Pr-6: Create Referral" {
  AppClient - CreateReferralResponse IProcessManager.CreateRecord(CreateReferralRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager -> WorkflowsAccess -> WorkflowsResource /* what if RecordsAccess decides the user doesn't have the right permissions, and StoreReferral doesn't happen? */
  ProcessManager - StoreRecordResponse IRecordsAccess.Store(Record) > RecordsAccess -> RecordsResource
  /* here should we call TransformationEngine to map StoredReferral into CreateReferralResponse? */
}

DTO CreateRecordResponse { }

DTO CreateRecordRequest { }

DTO CreateReferralResponse {
  string Comments,
  Guid? FamilyId
}

DTO CreateReferralRequest /* : CreateRecordRequest */ {
  string Comments,
  Guid? FamilyId
}

DTO StoreRecordResponse { }

DTO StoreReferralResponse /* : StoreRecordResponse */ {
  Guid Id,
  string Comments,
  Guid? FamilyId
}

DTO Record { }

DTO ReferralEntry /* : Record */ {
  ContextualPermissions Permissions
  string Comments,
  Guid? FamilyId
}

/*
Activity "Create Campaign From Recommendation" {
  |c|Client
  |s|System
  |c|
  start
  :Select Recommendation (View Campaign Recommendation);
  while (Contacts satisfactory?) is (no)
    :Filter Eligible Contacts
    ""<color:#777>[UC-4]</color>"";
  endwhile (yes)
  :Click Create Campaign;
  |s|
  floating note: via webhook in **V0.1**
  :System: Create New Draft Campaign;
  |c|
  :View Draft Campaign (View Draft Campaign);
  stop
}*/

UseCase "View Communities List" {
@@@
### Prerequisites
- `ContextPermissions` for 'All Communities' context
@@@
  AppClient -> ProcessManager
  ProcessManager -> RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Communities List V2" {
  AppClient -> ProcessManager
  ProcessManager -> RecordsAccess -> RecordsResource /* gets families */
  ProcessManager -> EvaluationEngine /* evaluate which families are visible */
  /* render combined family info */
  ProcessManager -> PoliciesAccess -> PoliciesResource
  ProcessManager -> RecordsAccess -> RecordsResource
  ProcessManager -> RecordsAccess -> RecordsResource /* render partnering family info */
  ProcessManager -> RecordsAccess -> RecordsResource /* render volunteer family info */
  ProcessManager -> EvaluationEngine -> PoliciesAccess -> PoliciesResource /* calculate approval status */
  ProcessManager -> RecordsAccess -> RecordsResource /* get notes */
  ProcessManager -> EvaluationEngine /* disclose family */
  /* end */
  ProcessManager -> RecordsAccess -> RecordsResource /* gets communities */
  ProcessManager -> EvaluationEngine /* evaluate which communities are visible */
  ProcessManager -> EvaluationEngine /* disclose communities */
}
 

UseCase "Track Child Location" {
  AppClient - CreateChildLocationEntryResponse IProcessManager.CreateRecord(CreateChildLocationEntryRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - StoreChildLocationEntryResponse IRecordsAccess.Store(ChildLocationEntry) > RecordsAccess -> RecordsResource
}

DTO CreateChildLocationEntryResponse { }

DTO CreateChildLocationEntryRequest {
    Guid ArrangementId,
    Guid ChildPersonId,
    Guid FamilyId,
    DateTime StartedAtUtc,
    ChildLocationPlan ChildcarePlan,
    DateTime? EnededAtUtc,
    TimeSpan Duration
}

DTO StoreChildLocationEntryResponse { }

DTO ChildLocationEntry {
    Guid ArrangementId,
    Guid ChildPersonId,
    Guid FamilyId,
    DateTime StartedAtUtc,
    ChildLocationPlan ChildcarePlan,
    DateTime? EnededAtUtc,
    TimeSpan Duration
}

UseCase "Create New Arrangement" {
  AppClient - CreateArrangementResponse IProcessManager.CreateRecord(CreateArrangementRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - StoreArrangementEntryResponse IRecordsAccess.Store(ArrangementEntry) > RecordsAccess -> RecordsResource
}

DTO CreateArrangementResponse { }

DTO CreateArrangementRequest { }

DTO StoreArrangementEntryResponse { }

DTO ArrangementEntry {
    Guid Id,
    string ArrangementType,
    bool Active,
    DateTime RequestedAtUtc,
    DateTime? StartedAtUtc,
    DateTime? EndedAtUtc,
    DateTime? CancelledAtUtc,
    DateTime? PlannedStartUtc,
    DateTime? PlannedEndUtc,
    Guid PartneringFamilyPersonId,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements,
    ImmutableList<IndividualVolunteerAssignment> IndividualVolunteerAssignments,
    ImmutableList<FamilyVolunteerAssignment> FamilyVolunteerAssignments,
    ImmutableSortedSet<ChildLocationHistoryEntry> ChildLocationHistory,
    ImmutableSortedSet<ChildLocationHistoryEntry> ChildLocationPlan,
    string? Comments,
    string? Reason
}

DTO CompletedRequirementInfo {
    Guid UserId,
    DateTime TimestampUtc,
    Guid CompletedRequirementId,
    string RequirementName,
    DateTime CompletedAtUtc,
    DateTime? ExpiresAtUtc,
    Guid? UploadedDocumentId,
    Guid? NoteId
}

DTO ExemptedRequirementInfo {
    Guid UserId,
    DateTime TimestampUtc,
    string RequirementName,
    DateTime? DueDate,
    string AdditionalComments,
    DateTime? ExemptionExpiresAtUtc
}

DTO IndividualVolunteerAssignment {
    Guid FamilyId,
    Guid PersonId,
    string ArrangementFunction,
    string? ArrangementFunctionVariant,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements
}

DTO FamilyVolunteerAssignment {
    Guid FamilyId,
    string ArrangementFunction,
    string? ArrangementFunctionVariant,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements
}

DTO ChildLocationHistoryEntry {
    Guid UserId,
    DateTime TimestampUtc,
    Guid ChildLocationFamilyId,
    Guid ChildLocationReceivingAdultId,
    ChildLocationPlan Plan,
    Guid? NoteId
}

UseCase "Create Family" {
  AppClient - CreateFamilyResponse IProcessManager.CreateRecord(CreateFamilyRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - StoreFamilyResponse IRecordsAccess.Store(Family) > RecordsAccess -> RecordsResource
}

DTO CreateFamilyResponse { }

DTO CreateFamilyRequest { }

DTO StoreFamilyResponse { }

UseCase "Delete Family" {
  AppClient - ArchiveFamilyResponse IProcessManager.ArchiveRecord(ArchiveRecordRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - ArchiveResponse IRecordsAccess.Archive(RecordArchiveCriteria) > RecordsAccess -> RecordsResource
}

/* This is a generic type */
DTO ArchiveRecordRequest {
  RecordType RecordType, /* Enum with Family, Community, Person... */
  RecordParameters RecordParameters 
}

DTO RecordParameters { }

DTO FamilyRecordParameters /* : RecordParameters */ {
    Guid FamilyId
}

UseCase "Add Adult" {
  AppClient - AddAdultResponse IProcessManager.AddFamilyMember(AddFamilyMemberRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - StoreResponse IRecordsAccess.Store(Person) > RecordsAccess -> RecordsResource
  ProcessManager - StoreResponse IRecordsAccess.Store(AddPersonToFamily) > RecordsAccess -> RecordsResource
}

DTO AddFamilyMemberRequest {
  Person Person,
  Guid FamilyId
  FamilyAdultRelationshipInfo RelationToFamily
}

DTO Person {
  Guid PersonId,
  string FirstName,
  string LastName,
  Gender? Gender,
  Age? Age,
  string? Ethnicity,
  ImmutableList<Address> Addresses,
  Guid? CurrentAddressId,
  ImmutableList<PhoneNumber> PhoneNumbers,
  Guid? PreferredPhoneNumberId,
  ImmutableList<EmailAddress> EmailAddresses,
  Guid? PreferredEmailAddressId,
  string? Concerns,
  string? Notes
}

DTO AddPersonToFamily {
  Guid PersonId,
  Guid FamilyId,
  FamilyAdultRelationshipInfo RelationToFamily
}


UseCase "Add Child" {
  AppClient - AddAdultResponse IProcessManager.AddFamilyMember(AddFamilyMemberRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - StoreResponse IRecordsAccess.Store(Person) > RecordsAccess -> RecordsResource
  ProcessManager - StoreResponse IRecordsAccess.Store(AddPersonToFamily) > RecordsAccess -> RecordsResource
}

DTO AddChildToFamily {
  Guid PersonId,
  Guid FamilyId,
  FamilyAdultRelationshipInfo RelationToFamily
}

UseCase "Delete Person" {
  AppClient - IProcessManager.ArchiveRecord(ArchivePersonRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive(RecordCriteria) > RecordsAccess -> RecordsResource
}

DTO ArchivePersonRequest {
    Guid PersonId
}

DTO ArchivePersonCriteria {
    Guid PersonId
}

UseCase "Move Person to Another Family" {
  AppClient - IProcessManager.ChangePersonFamily(ChangePersonFamilyRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - /* Are there existing commands for moving/removing person from a family? */ > RecordsAccess -> RecordsResource
}

DTO ChangePersonFamilyRequest {
    Guid PersonId,
    Guid OriginalFamilyId,
    Guid TargetFamilyId,
}

UseCase "Read Family Documents" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

UseCase "Upload Family Documents" {
  AppClient - IProcessManager.UploadDocuments() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IFileStoreUtility.Upload() > FileStoreUtility
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

UseCase "Archive Family Documents" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive() > RecordsAccess -> RecordsResource
}

UseCase "View Family Document Metadata" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Invite Person User" {
  AppClient - IMembershipManager.InviteUser() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager -> AccountsAccess -> AccountsResource
}

/* TODO: account or records? */
UseCase "Edit Person User Protected Roles" {
  AppClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Store() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "Edit Person User Standard Roles" {
  AppClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Store() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "View Person User Login Info" {
  /* Feel like it should be similar to IProcessManager.RetrieveRecords()? */
  AppClient - IMembershipManager.GetPersonLoginInfo() > MembershipManager
  MembershipManager - IAccountsAccess.Filter() > AccountsAccess -> AccountsResource
  MembershipManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IIdentityProviderUtility.GetUserLoginInfo() > IdentityProviderUtility
}

/* TODO: check */
UseCase "View Volunteers List" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
/* Old name: "Access Partnering Families Screen" */
UseCase "View Partnering Families List" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Access Settings Screen" {
  AppClient -> ProcessManager
  ProcessManager -> EvaluationEngine
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  ProcessManager -> RecordsAccess -> RecordsResource
}

/* TODO: check (this isn't implemented currently?) */
UseCase "Edit Roles" {
  AppClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Store() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "View Communities List 0" {
  AppClient -> ProcessManager
  ProcessManager -> RecordsAccess -> RecordsResource /* gets families */
  ProcessManager -> EvaluationEngine /* evaluate which families are visible */
  /* render combined family info */
  ProcessManager -> PoliciesAccess -> PoliciesResource
  ProcessManager -> RecordsAccess -> RecordsResource
  ProcessManager -> RecordsAccess -> RecordsResource /* render partnering family info */
  ProcessManager -> RecordsAccess -> RecordsResource /* render volunteer family info */
  ProcessManager -> EvaluationEngine -> PoliciesAccess -> PoliciesResource /* calculate approval status */
  ProcessManager -> RecordsAccess -> RecordsResource /* get notes */
  ProcessManager -> EvaluationEngine /* disclose family */
  /* end */
  ProcessManager -> RecordsAccess -> RecordsResource /* gets communities */
  ProcessManager -> EvaluationEngine /* evaluate which communities are visible */
  ProcessManager -> EvaluationEngine /* disclose communities */
}

/* TODO: check */
UseCase "View Family Custom Fields" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Family History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Person Concerns" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Person Notes" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Person Contact Info" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Family Info" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Person Concerns" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Person Notes" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Person Contact Info" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Add / Edit Draft Notes" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Discard Draft Notes" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Approve Notes" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View All Notes" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Approval Status" {  
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Approval Requirement Completion" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Approval Requirement Exemption" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Volunteer Role Participation" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Approval Progress" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Approval History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Activate Volunteer Family" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Referral" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Close Referral" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Referral Custom Fields" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Referral Comments" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Referral Progress" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Referral Requirement Completion" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Referral Requirement Exemption" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Referral History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Create Arrangement" {
  AppClient - IProcessManager.CreateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Arrangement" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Assignments" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Assignments" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Arrangement Progress" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Create Community" {
  AppClient - IProcessManager.CreateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Community" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Archive Community" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Community Member Families" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Community Role Assignments" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Community Document Metadata" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Read Community Documents (Future)" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  ProcesssManager -> FileStoreUtility
}

/* TODO: check */
UseCase "Upload Community Documents" {
  AppClient - IProcessManager.UploadDocuments() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IFileStoreUtility.Upload() > FileStoreUtility
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Archive Community Documents" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Open my family screen" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View all families" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View soft deleted document" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Restore a soft deleted document" {
  AppClient - IProcessManager.RestoreDocuments() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Set document visibility" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Set note visibility" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Arrangement Requirement Completion" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Edit Arrangement Requirement Exemption" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Delete Arrangement" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "View Child Location History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "Send Bulk SMS" {
  AppClient - ICommunicationManager.Notify() > CommunicationManager
  CommunicationManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  CommunicationManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  CommunicationManager - ITelephonyUtility.Notify() > TelephonyUtility
}

/* Referrals/Cases split */

UseCase "View Referrals" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

UseCase "Link Referral to Family" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager -> WorkflowsAccess -> WorkflowsResource
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
  ProcessManager -:q> CommunicationManager
}

UseCase "Unlink Referral from Family " {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

UseCase "Close Referral  (after split)" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Archive() > RecordsAccess -> RecordsResource
}

UseCase "Open Case" {
  AppClient - OpenCaseResponse IProcessManager.OpenCase(OpenCaseRequest) > ProcessManager
  ProcessManager - IEvaluationEngine.AuthorizeUserAccess() > EvaluationEngine
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  /* Maybe insteado of InvokeWorflow, it should be something like ExecuteUserDefinedActions? sounds a bit more like a business operation verb? */
  ProcessManager - IWorkflowsAccess.InvokeWorkflow() > WorkflowsAccess -> WorkflowsResource
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
  ProcessManager - ICommunicationManager.Notify():q> CommunicationManager
}

DTO OpenCaseResponse {}

DTO OpenCaseRequest {}

UseCase "Link Referral to Case" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

UseCase "Unlink Referral from Case" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}

UseCase "Close Case" {
  AppClient - IProcessManager.UpdateRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Store() > RecordsAccess -> RecordsResource
}