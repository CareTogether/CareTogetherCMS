UseCase Purpose {
@@@
# Purpose
The following fundamental statements define and guide both the CareTogether organization and platform.

## Mission

To make human services more relational.

## Objectives

1. Minimize the risk of platform-level as well as organization-level data breaches for all customers, while mitigating the impact of individual-level user account takeovers.
2. Ensure system resilience, including providing for long-term support and maintenance.
3. Help customers establish and maintain regulatory compliance.
4. Help customers optimize their processes and communications.
5. Allow even the smallest human services organizations to fully adopt the system.
6. Enable even the largest human services organizations to fully embrace the platform, including qualifying for relevant grants.
7. Build a network of partnering human services organizations that can provide wrap-around support to participants in a geographic area.
8. Empower partners and AI agents to fully leverage the platform.
9. Provide the highest quality user experience in the industry for all users.
10. Build the capacity to serve the ~300,000 human services organizations in the United States and supporting global use.
11. Enable longitudinal studies of human services outcomes and impact in order to identify and share best practices with organizations.

## Vision

Develop a case management platform that reimagines connection for human services.

@@@
}

UseCase Glossary {
@@@
# Glossary
The following terms need to be understood and used consistently throughout both the CareTogether organization and platform.

## Voice
These terms capture the "brand voice" of CareTogether. They MUST be used only with the exact meanings that they are given here.

- **Relational** - an approach to human services that emphasizes transformation via relationships, as opposed to a *transactional* approach that often fails to achieve lasting change. See [The Rise of Antipoverty Relational Work
(Stanford Social Innovation Review, 2015)](https://ssir.org/articles/entry/the_rise_of_antipoverty_relational_work).

## Who?
- **Organizations** are human services organizations. Organizations can be formally or informally organized. Formal organizations include both nonprofit and for-profit private-sector organizations as well as government organizations.
- **Locations** are geographically focused areas in which a specific group of people within an organization serve participants (perhaps under more than one program). Locations do not have a strict definition, but they are best defined by travel time, i.e., they should be small enough that the people who serve the participants within that location can physically interact. For example, two cities (or counties, or parts of a larger metropolitan area) that are separated by more than an hour or two of travel time should typically be separate locations. A _case_ is always tied to a single location.
- **Programs** are the actual services, comprised of policies and procedures, that an organization offers to its participants. The mapping between locations and programs is N-to-M: multiple programs within the same location can serve the same participants, and an organization may not offer the same programs at all of its locations. Program policies and procedures can vary by location.
- Policies
- Procedures
- Staff
- Volunteers
- **participants** (sometimes referred to as partnering families) ...
- Referral Partner - another HSO that agrees to receive outbound referrals made by an HSO and/or provides inbound referrals to an HSO

## What?

Membership of organizations, staff, volunteers, and participants
Processes for following the organization's policies and procedures
Communication with staff, volunteers, participants, and referral partners

## How?


## Where?

Human Services - official definition? Do we narrow this?

Platform

System

Case

Case Management

Referral

Approval

Role

Arrangement

(Arrangement) Function

@@@
}


/*
## Use Cases (Activity Diagrams)
*/

Activity "XYZ" {}

/*
## Core Use Cases

### Membership

### Process

### Communication

*/

UseCase Volatilities {
@@@
## Volatilities

- XYZ
@@@
}


StaticAspect "CareTogether V2" { 
  WebClient MobileClient VoiceClient SupportClient AnalyticsClient IntegrationClient
  MembershipManager ProcessManager CommunicationManager AnalysisManager /* future enhancement */
  EvaluationEngine
MatchingEngine /* Possible volatility? */
  AccountsAccess NetworkAccess PoliciesAccess WorkflowsAccess AuditAccess RecordsAccess
  /*NOTE: RecordsAccess -- Cosmos DB Graph API & Cosmos DB 'SQL' API, allowing Geode pattern */
  AccountsResource NetworkResource PoliciesResource:f WorkflowsResource AuditResource RecordsResource 
 NotesResource:f DocumentsResource:f FormsResource:a
  EventLogUtility
  FileStoreUtility
  ObjectStoreUtility
  TelephonyUtility
  EmailUtility
  PushNotificationUtility
  PubSubUtility
  SecurityUtility
  LoggingUtility
  IdentityProviderUtility /* Was missing */
}


/*
## Use Cases (Call Chains & Sequence Diagrams), Detailed Design
*/

/* OPERATION CONTRACTS -- WORK-IN-PROGRESS

ProcessManager
  - ConfigureOrganization
  - ConfigurePolicies // could end up just being part of ConfigureOrganization? maybe just call it 'Configure' & use polymorphism?
  - SubmitRecords // (un)archive is a special case that could just be a validation rule: 'IsActive' flag changes cannot be accompanied by other changes
    // SubmitRecords could actually update the record *or* decide to create a change request instead, based on policies
    // When a change request is issued, the ProcessManager makes a queued call to CommunicationManager to notify the record owner or other responsible party (as identified by policy evaluation) of the pending change.
  - RetrieveRecords
  - ReviewChanges

MembershipManager
  - InviteUser
  - RegisterAccount
  - CloseAccount
  - LinkAccount // links an account to a person in a location in an organization
  - FindAccount

CommunicationManager
  ...
  // The CommunicationManager has the ability to send email notifications as well as interactive notifications,
  // e.g. Teams adaptive cards, for things like change request approvals.

WorkflowsAccess
  - WorkflowState Instantiate(WorkflowCriteria) // 'run user-defined actions'?
  - WorkflowState Dispatch(InputEvent)

RecordsAccess
  - Create
  - Change
  - Filter
  - ProposeChange // add a new pending change to the underlying record's set of pending changes
  - CommitChange // needs to reference an existing pending change
  - CancelChange // needs to reference an existing pending change
    // Records include: Families, Communities, Organizations
    // Organizations could themselves be using CareTogether, allowing features like automatic transfer of intake data

// Records need to include a set of 'pending changes', each of which has a 'RequestedChangeId' that is tied to the request workflow.
// Pending changes should be stored in non-immutable storage, like draft notes are today, and only the reference to them should be
//   made part of the immutable log.

PoliciesAccess
  ...

AccountsAccess
  ...

AuditAccess
  ...

*/

/*
QUESTION: What are we storing/exposing with RecordsAccess?

Option 1: only specific "Aggregates" as defined today: Families, Communities, Referrals, eventually Organizations.
>>> This feels the most consistently organized.

Option 2: all "Entities" in the domain model: Families, People, Referrals, Cases, Arrangements, Communities, Organizations.
This would actually also need to include:
- Requirement Completions/Exemptions
- Child Location Changes (Actual & Planned)
- Function Assignments
- Notes
- Documents (reference to them)
- Forms (reference to them)
- Organization Members
- Organization Roles

--> This approach basically exposes a relational database!

SMELL: This is fine-grained, not coarse-grained. We want to encapsulate the variability of different types of records.
SMELL: How do you define a 'pending change' to a requirement completion? What would be an example? On the other hand, it feels very reasonable to make a 'pending change' to a *family* (or maybe a person or arrangement or referral or case?) of a requirement completion, e.g. a family coach submitting a safety visit completion. Therefore, treating a Requirement Completion *as a record* is too granular. Therefore, we need some level of combining these "entities" into "aggregates" that are reasonable to modify.

Option 3?

Option 4: The entire dataset for a location? Waaaaay too coarse-grained. Writes need to be made at a more granular level.

*/

/*
# MIGRATION NOTES
- Authorize*CommandAsync methods move into the Resource Access layer (primarily into RecordsAccess)
*/

Activity "UC-Me-1: Sign In" {
  |u|User
  |s|System
  |u|
  start
  :Browse to CareTogether;
  if (User signed in) is (no) then
    :Redirect to Sign-In Screen;
    |s|
    :Determine sign-in methods to offer;
    |u|
    :Select sign-in method;
    :Enter credentials;
    |s|
    :Load user account;
  else (yes)
  end if
  |u|
  :Open Dashboard;
  stop
}

/* TODO: review */
UseCase "UC-Me-1: Sign In" {
  WebClient - ClaimsPrincipal ISecurityUtility.Authenticate(HttpContext) > SecurityUtility
  WebClient - AppUserAccount IMembershipManager.SignIn(ClaimsPrincipal) > MembershipManager
  MembershipManager - Account IAccountsAccess.GetOrCreateUserAccount(ClaimsPrincipal) > AccountsAccess
  AccountsAccess -> AccountsResource /*  Account IAccountsResource.GetOrCreateUserAccount(UserId) */
  AccountsAccess -> RecordsResource
}

/* HttpContext DTO is provided by ASP.NET Core */
/* ClaimsPrincipal DTO is provided by System.Security.Claims */

DTO AppUserAccount {
  Guid UserId
  /*TODO: Define this*/
}

DTO Account {
  Guid UserId
  AccountOrganizationAccess[] Organizations
}

DTO AccountOrganizationAccess {
  Guid OrganizationId
  AccountLocationAccess[] Locations
}

DTO AccountLocationAccess {
  Guid LocationId
  Guid PersonId
  string[] Roles
}

Activity "UC-Pr-1: Open Location" {
  |c|Client
  |s|System
  |c|
  start
  :Sign In
    ""<color:#777>[UC-Me-1]</color>"";
  :Select Organization;
  :Select Location;
  |s|
  :Authorize User Access in Context
    ""<color:#777>[SUB-Pr-1]</color>"";
  :Load Location Data; 
  'NOTE: This will also be the Process Manager
  |c|
  :View Location Dashboard;
  stop
}

UseCase "UC-Pr-1: Open Location" {
  WebClient -> ProcessManager
  ProcessManager -> EvaluationEngine
}

UseCase "SUB-Pr-1: Authorize User Access in Context" {
  ProcessManager - ContextPermissions IEvaluationEngine.AuthorizeUserAccess(AuthorizationContext) > EvaluationEngine
    EvaluationEngine -> AccountsAccess -> AccountsResource
    EvaluationEngine -> PoliciesAccess -> PoliciesResource
    EvaluationEngine -> RecordsAccess -> RecordsResource
  ProcessManager -> SecurityUtility
}

DTO AuthorizationContext { }

/*BUG: DTO inheritance is not supported*/
/*DTO GlobalAuthorizationContext : AuthorizationContext {}*/

UseCase "Retrieve Records" {
  WebClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess
      RecordsAccess -> RecordsResource
      RecordsAccess -> NotesResource
      RecordsAccess -> FormsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager - RecordsResponse IEvaluationEngine.DiscloseRecords(RecordsDisclosureRequest) > EvaluationEngine
    /* Include disclosure & authorization results */
    ProcessManager -> AuditAccess -> AuditResource
}

DTO RetrieveRecordsRequest {
  DisclosureMethod Method
  RecordType? RecordType
  Guid? OrganizationId
  Guid? LocationId
  Filters? Filters
}

DTO Filters { }

DTO RetrieveRecordsResponse {
  Community[] Communities
  Family[] Families
  Organization[] Organizations
}

DTO Family {
  Guid Id,
  Guid LocationId,
  string Name,
  string? PrimaryEmail,
  string? PrimaryPhoneNumber,
  Address? PrimaryAddress,
  string? HomeChurch
}

DTO Address {
  string? Line1,
  string? Line2,
  string? City,
  string? Country,
  string? State,
  string? PostalCode
}

DTO Community {
    Guid Id,
    Guid LocationId,
    string Name
}

DTO Organization {}

DTO ContextualPermissions {
  AuthorizationContext Context
  string[] AllowedActions
  Account Account,
}

DTO RecordsDisclosureRequest {
  ContextualPermissions Permissions
  DisclosureMethod Method
  RecordsAccess.RecordsResponse Records
}

DTO RecordsCriteria {
  ContextualPermissions Permissions
  DisclosureMethod Method
  RecordType? RecordType
  Guid? OrganizationId
  Guid? LocationId
}

DTO RecordsResponse {
  Community[] Communities
  Family[] Families
  Organization[] Organizations
}

UseCase "UC-Pr-6: Submit Recods (create or change)" {
  WebClient - SubmitRecordsResponse IProcessManager.SubmitRecords(SubmitRecordsRequest) > ProcessManager
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager - RecordOperationsResponse IRecordsAccess.Execute(RecordOperationsRequest) > RecordsAccess
      RecordsAccess -> RecordsResource
      RecordsAccess -> NotesResource
      RecordsAccess -> FormsResource
      /*RecordsAccess -> DocumentsResource*/
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager - RecordsResponse IEvaluationEngine.DiscloseRecords(RecordsDisclosureRequest) > EvaluationEngine
    ProcessManager -:q> CommunicationManager
    ProcessManager -> AuditAccess -> AuditResource
}

DTO RecordOperation { } /* This can inclue create/change/propose change/commit change/cancel change */

DTO RecordOperationsRequest {
    ClaimsPrincipal 
    RecordOperation[] Operations
}

DTO SubmitRecordsRequest {
    Record[] Records
}


DTO Record {
  Guid Id
}

DTO RecordOperationsResponse {
    Record[] Records
}

DTO SubmitRecordsResponse {
    Record[] Records
}

/* TODO: check */
UseCase "UC-Pr-34: Discard Draft Notes" {
  WebClient - IProcessManager.ReviewChanges() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-35: Approve Notes" {
  WebClient - IProcessManager.ReviewChanges() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Me-1: Invite Person User" {
  WebClient - IMembershipManager.InviteUser() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager -> AccountsAccess -> AccountsResource
}

/* TODO: account or records? */
UseCase "UC-Me-2: Edit Person User Protected Roles" {
  WebClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Execute() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "UC-Me-4: View Person User Login Info" {
  /* Feel like it should be similar to IProcessManager.RetrieveRecords()? */
  WebClient - IMembershipManager.FindAccount() > MembershipManager
  MembershipManager - IAccountsAccess.Filter() > AccountsAccess -> AccountsResource
  MembershipManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IIdentityProviderUtility.GetUserLoginInfo() > IdentityProviderUtility
}

UseCase "UC-Me-5: Edit Roles" {
  WebClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Execute() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "UC-Pr-76: Send Bulk SMS" {
  WebClient - ICommunicationManager.Notify() > CommunicationManager
  CommunicationManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  CommunicationManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  CommunicationManager - ITelephonyUtility.Notify() > TelephonyUtility
}

DTO OpenCaseResponse {}

DTO OpenCaseRequest {}

/* ================== 1. Other use cases ================== */

/* ================== 1.1 RetrieveRecords Permutations ================== */

Activity "UC-Pr-2: View Communities List" {
  |c|Client
  |s|System
  |c|
  start
  :Open Location
    ""<color:#777>[UC-Pr-1]</color>"";
  :Select Communities Screen;
  |s|
  :List Communities for User;
  |c|
  :Display Communities List;
  stop
}

UseCase "View Communities List" {
@@@
### Prerequisites
- `ContextPermissions` for 'All Communities' context
@@@
  WebClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > RecordsAccess
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> EvaluationEngine
}

/* TODO: Missing FileStorageUtility? */
UseCase "UC-Pr-18: Read Family Documents" {
  WebClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> EvaluationEngine
}

/* TODO: check */
UseCase "UC-Pr-23: Access Settings Screen" {
  WebClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
      RecordsAccess -> PoliciesResource
      RecordsAccess -> AccountsResource
      RecordsAccess -> FormsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> EvaluationEngine
}

/* ================== 1.2 SubmitRecords Permutations ================== */

UseCase "Track Child Location" {
  WebClient - CreateChildLocationEntryResponse IProcessManager.SubmitRecords(TrackChildLocationChange) > ProcessManager
    ProcessManager - StoreChildLocationEntryResponse IRecordsAccess.Execute(ChildLocationEntry) > RecordsAccess 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> EvaluationEngine
}

DTO CreateChildLocationEntryResponse { }

DTO TrackChildLocationChange {
    Guid FamilyId
    Guid ReferralId
    Guid[] ArrangementIds
    DateTime ChangedAtUtc
    Guid ChildLocationFamilyId
    Guid ChildLocationReceivingAdultId
    ChildLocationPlan Plan
    Guid? NoteId
}

DTO StoreChildLocationEntryResponse { }

DTO ChildLocationEntry {
    Guid ArrangementId,
    Guid ChildPersonId,
    Guid FamilyId,
    DateTime StartedAtUtc,
    ChildLocationPlan ChildcarePlan,
    DateTime? EnededAtUtc,
    TimeSpan Duration
}

UseCase "UC-Pr-19: Upload Family Documents" {
  WebClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource /* TODO: Do we store a reference for the file? Should it be done after calling FileStoreUtility? */
      RecordsAccess - IFileStoreUtility.Upload() > FileStoreUtility
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> EvaluationEngine
}

UseCase "UC-Pr-20: Archive Family Documents" {
  WebClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> EvaluationEngine
}

/* TODO: check */
UseCase "UC-Pr-64: Upload Community Documents" {
  WebClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IFileStoreUtility.Upload() > FileStoreUtility
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

UseCase "UC-Pr-81: Open Case" {
  WebClient - OpenCaseResponse IProcessManager.SubmitRecords(OpenCaseRequest) > ProcessManager
  ProcessManager - IEvaluationEngine.AuthorizeUserAccess() > EvaluationEngine
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  ProcessManager - IWorkflowsAccess.Instantiate() > WorkflowsAccess -> WorkflowsResource
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
  ProcessManager - ICommunicationManager.Notify():q> CommunicationManager
}

UseCase "Open Referral" {
  WebClient - OpenCaseResponse IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - IEvaluationEngine.AuthorizeUserAccess() > EvaluationEngine
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  ProcessManager - IWorkflowsAccess.Instantiate() > WorkflowsAccess -> WorkflowsResource
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
  ProcessManager - ICommunicationManager.Notify():q> CommunicationManager
}

/* ================== 2. Other Data Models ================== */

DTO CreateReferral /* : RecordOperation */ {
    string Comments
    Guid? FamilyId
}

DTO Referral /* : Record */ {
    string Comments
    Guid? FamilyId
}

DTO CreateArrangementResponse { }

DTO CreateArrangementRequest { }

DTO StoreArrangementEntryResponse { }

DTO ArrangementEntry {
    Guid Id,
    string ArrangementType,
    bool Active,
    DateTime RequestedAtUtc,
    DateTime? StartedAtUtc,
    DateTime? EndedAtUtc,
    DateTime? CancelledAtUtc,
    DateTime? PlannedStartUtc,
    DateTime? PlannedEndUtc,
    Guid PartneringFamilyPersonId,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements,
    ImmutableList<IndividualVolunteerAssignment> IndividualVolunteerAssignments,
    ImmutableList<FamilyVolunteerAssignment> FamilyVolunteerAssignments,
    ImmutableSortedSet<ChildLocationHistoryEntry> ChildLocationHistory,
    ImmutableSortedSet<ChildLocationHistoryEntry> ChildLocationPlan,
    string? Comments,
    string? Reason
}

DTO CompletedRequirementInfo {
    Guid UserId,
    DateTime TimestampUtc,
    Guid CompletedRequirementId,
    string RequirementName,
    DateTime CompletedAtUtc,
    DateTime? ExpiresAtUtc,
    Guid? UploadedDocumentId,
    Guid? NoteId
}

DTO ExemptedRequirementInfo {
    Guid UserId,
    DateTime TimestampUtc,
    string RequirementName,
    DateTime? DueDate,
    string AdditionalComments,
    DateTime? ExemptionExpiresAtUtc
}

DTO IndividualVolunteerAssignment {
    Guid FamilyId,
    Guid PersonId,
    string ArrangementFunction,
    string? ArrangementFunctionVariant,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements
}

DTO FamilyVolunteerAssignment {
    Guid FamilyId,
    string ArrangementFunction,
    string? ArrangementFunctionVariant,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements
}

DTO ChildLocationHistoryEntry {
    Guid UserId,
    DateTime TimestampUtc,
    Guid ChildLocationFamilyId,
    Guid ChildLocationReceivingAdultId,
    ChildLocationPlan Plan,
    Guid? NoteId
}

DTO CreateFamilyResponse { }

DTO CreateFamilyRequest { }

DTO StoreFamilyResponse { }

DTO RecordParameters { }

DTO FamilyRecordParameters /* : RecordParameters */ {
    Guid FamilyId
}

DTO AddFamilyMemberRequest {
  Person Person,
  Guid FamilyId
  FamilyAdultRelationshipInfo RelationToFamily
}

DTO Person {
  Guid PersonId,
  string FirstName,
  string LastName,
  Gender? Gender,
  Age? Age,
  string? Ethnicity,
  ImmutableList<Address> Addresses,
  Guid? CurrentAddressId,
  ImmutableList<PhoneNumber> PhoneNumbers,
  Guid? PreferredPhoneNumberId,
  ImmutableList<EmailAddress> EmailAddresses,
  Guid? PreferredEmailAddressId,
  string? Concerns,
  string? Notes
}

DTO AddPersonToFamily {
  Guid PersonId,
  Guid FamilyId,
  FamilyAdultRelationshipInfo RelationToFamily
}

DTO AddChildToFamily {
  Guid PersonId,
  Guid FamilyId,
  FamilyAdultRelationshipInfo RelationToFamily
}

DTO ArchivePersonRequest {
    Guid PersonId
}

DTO ArchivePersonCriteria {
    Guid PersonId
}

DTO ChangePersonFamilyRequest {
    Guid PersonId,
    Guid OriginalFamilyId,
    Guid TargetFamilyId,
}

/* ====================================================== */

/* 
Example draft implementation of changing a referral record.

Example SubmitRecordsRequest (ProcessManager.SubmitRecords input):

[{
  "Change": {
      "Comments": "Test",
      "Discriminator": "UpdateReferralComments",
      "FamilyId": "11111111-1111-1111-1111-111111111111",
      "ReferralId": "22222222-2222-2222-2222-222222222222",
  },
}]

var recordOperationsRequest = [
  {
    "Change": {
        "Comments": "Test",
        "Discriminator": "UpdateReferralComments",
        "FamilyId": "11111111-1111-1111-1111-111111111111",
        "ReferralId": "22222222-2222-2222-2222-222222222222",
    },
  }
]

recordsAccess.Execute(recordOperationsRequest);

// Check user's permissions.

// Apply change.

// Store patched record and append change to log.

*/

UseCase "System requests approval for record change" {
  WebClient - SubmitRecordsResponse IProcessManager.SubmitRecords(SubmitRecordsRequest) > ProcessManager
    /* Sub-usecase "SUB-Pr-1: Authorize User Access in Context" */
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager - RecordOperationsResponse IRecordsAccess.Execute(RecordOperationsRequest) > RecordsAccess
      RecordsAccess -> RecordsResource
      RecordsAccess -> NotesResource
      RecordsAccess -> FormsResource
      /*RecordsAccess -> DocumentsResource*/
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager - RecordsResponse IEvaluationEngine.DiscloseRecords(RecordsDisclosureRequest) > EvaluationEngine
    ProcessManager -:q> CommunicationManager
    ProcessManager -> AuditAccess -> AuditResource
}

UseCase "User approves record change" {
  WebClient - SubmitRecordsResponse IProcessManager.SubmitRecords(SubmitRecordsRequest) > ProcessManager
    /* Sub-usecase "SUB-Pr-1: Authorize User Access in Context" */
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager - RecordOperationsResponse IRecordsAccess.Execute(RecordOperationsRequest) > RecordsAccess
      RecordsAccess -> RecordsResource
      RecordsAccess -> NotesResource
      RecordsAccess -> FormsResource
      /*RecordsAccess -> DocumentsResource*/
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager - RecordsResponse IEvaluationEngine.DiscloseRecords(RecordsDisclosureRequest) > EvaluationEngine
    ProcessManager -:q> CommunicationManager
    ProcessManager -> AuditAccess -> AuditResource
}

UseCase "User denies record change" {
  WebClient - IProcessManager.ReviewChanges() > ProcessManager
    /* Sub-usecase "SUB-Pr-1: Authorize User Access in Context" */
    ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

UseCase "Bulk import of records" {
  WebClient - SubmitRecordsResponse IProcessManager.SubmitRecords(SubmitRecordsRequest) > ProcessManager
    /* Sub-usecase "SUB-Pr-1: Authorize User Access in Context" */
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager - RecordOperationsResponse IRecordsAccess.Execute(RecordOperationsRequest) > RecordsAccess
      RecordsAccess -> RecordsResource
      RecordsAccess -> NotesResource
      RecordsAccess -> FormsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager - RecordsResponse IEvaluationEngine.DiscloseRecords(RecordsDisclosureRequest) > EvaluationEngine
    ProcessManager -:q> CommunicationManager
    ProcessManager -> AuditAccess -> AuditResource
}

UseCase "Bulk export of records" {
  WebClient -> ProcessManager
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager -> RecordsAccess
      RecordsAccess -> RecordsResource
      RecordsAccess -> NotesResource
      RecordsAccess -> FormsResource
    ProcessManager -> EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> AuditAccess -> AuditResource
}

UseCase "Invite a user" {
  WebClient - IMembershipManager.InviteUser() > MembershipManager
    /* Sub-usecase "SUB-Pr-1: Authorize User Access in Context" */
    MembershipManager -> AccountsAccess -> AccountsResource
    MembershipManager -> IdentityProviderUtility
    MembershipManager -:q> CommunicationManager
}

UseCase "User sign-up" {
  WebClient -> MembershipManager
    MembershipManager - Account IAccountsAccess.GetOrCreateUserAccount(ClaimsPrincipal) > AccountsAccess
      AccountsAccess -> AccountsResource
      AccountsAccess -> RecordsResource
    /* Should it be SecurityUtility or IdentityProviderUtility? */
    MembershipManager - ClaimsPrincipal ISecurityUtility.Authenticate(HttpContext) > SecurityUtility 
}

UseCase "Organization onboarding" {
  WebClient - SubmitRecordsResponse IProcessManager.SubmitRecords(SubmitRecordsRequest) > ProcessManager
    /* Sub-usecase "SUB-Pr-1: Authorize User Access in Context" */
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager - RecordOperationsResponse IRecordsAccess.Execute(RecordOperationsRequest) > RecordsAccess
      RecordsAccess -> PoliciesResource
    ProcessManager -:q> CommunicationManager
    ProcessManager -> AuditAccess -> AuditResource
}
