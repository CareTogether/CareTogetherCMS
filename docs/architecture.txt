StaticAspect "CareTogether V2" { 
  AppClient SupportClient AnalyticsClient IntegrationClient
  MembershipManager ProcessManager CommunicationManager AnalysisManager /* future enhancement */
  EvaluationEngine TransformationEngine
  AccountsAccess PoliciesAccess WorkflowsAccess RecordsAccess AuditAccess
  AccountsResource PoliciesResource WorkflowsResource RecordsResource FormsResource AuditResource
  EventLogUtility
  FileStoreUtility
  ObjectStoreUtility
  TelephonyUtility
  EmailUtility
  PushNotificationUtility
  PubSubUtility
  SecurityUtility
  LoggingUtility
  IdentityProviderUtility /* Was missing */
}

/* OPERATION CONTRACTS -- WORK-IN-PROGRESS

ProcessManager
  - ConfigureOrganization
  - ConfigurePolicies // could end up just being part of ConfigureOrganization? maybe just call it 'Configure' & use polymorphism?
  - SubmitRecords // (un)archive is a special case that could just be a validation rule: 'IsActive' flag changes cannot be accompanied by other changes
    // SubmitRecords could actually update the record *or* decide to create a change request instead, based on policies
    // When a change request is issued, the ProcessManager makes a queued call to CommunicationManager to notify the record owner or other responsible party (as identified by policy evaluation) of the pending change.
  - RetrieveRecords
  - ReviewChanges

MembershipManager
  - InviteUser
  - RegisterAccount
  - CloseAccount
  - LinkAccount // links an account to a person in a location in an organization
  - FindAccount

CommunicationManager
  ...
  // The CommunicationManager has the ability to send email notifications as well as interactive notifications,
  // e.g. Teams adaptive cards, for things like change request approvals.

WorkflowsAccess
  - WorkflowState Instantiate(WorkflowCriteria) // 'run user-defined actions'?
  - WorkflowState Dispatch(InputEvent)

RecordsAccess
  - Create
  - Change
  - Filter
  - ProposeChange // add a new pending change to the underlying record's set of pending changes
  - CommitChange // needs to reference an existing pending change
  - CancelChange // needs to reference an existing pending change
    // Records include: Families, Communities, Organizations
    // Organizations could themselves be using CareTogether, allowing features like automatic transfer of intake data

// Records need to include a set of 'pending changes', each of which has a 'RequestedChangeId' that is tied to the request workflow.
// Pending changes should be stored in non-immutable storage, like draft notes are today, and only the reference to them should be
//   made part of the immutable log.

PoliciesAccess
  ...

AccountsAccess
  ...

AuditAccess
  ...

*/

/*
QUESTION: What are we storing/exposing with RecordsAccess?

Option 1: only specific "Aggregates" as defined today: Families, Communities, Referrals, eventually Organizations.
>>> This feels the most consistently organized.

Option 2: all "Entities" in the domain model: Families, People, Referrals, Cases, Arrangements, Communities, Organizations.
This would actually also need to include:
- Requirement Completions/Exemptions
- Child Location Changes (Actual & Planned)
- Function Assignments
- Notes
- Documents (reference to them)
- Forms (reference to them)
- Organization Members
- Organization Roles

--> This approach basically exposes a relational database!

SMELL: This is fine-grained, not coarse-grained. We want to encapsulate the variability of different types of records.
SMELL: How do you define a 'pending change' to a requirement completion? What would be an example? On the other hand, it feels very reasonable to make a 'pending change' to a *family* (or maybe a person or arrangement or referral or case?) of a requirement completion, e.g. a family coach submitting a safety visit completion. Therefore, treating a Requirement Completion *as a record* is too granular. Therefore, we need some level of combining these "entities" into "aggregates" that are reasonable to modify.

Option 3?

Option 4: The entire dataset for a location? Waaaaay too coarse-grained. Writes need to be made at a more granular level.

*/

/*
# MIGRATION NOTES
- Authorize*CommandAsync methods move into the Resource Access layer (primarily into RecordsAccess)
*/

Activity "UC-Me-1: Sign In" {
  |u|User
  |s|System
  |u|
  start
  :Browse to CareTogether;
  if (User signed in) is (no) then
    :Redirect to Sign-In Screen;
    |s|
    :Determine sign-in methods to offer;
    |u|
    :Select sign-in method;
    :Enter credentials;
    |s|
    :Load user account;
  else (yes)
  end if
  |u|
  :Open Dashboard;
  stop
}

/* TODO: review */
UseCase "UC-Me-1: Sign In" {
  AppClient - ClaimsPrincipal ISecurityUtility.Authenticate(HttpContext) > SecurityUtility
  AppClient - AppUserAccount IMembershipManager.SignIn(ClaimsPrincipal) > MembershipManager
  MembershipManager - Account IAccountsAccess.GetOrCreateUserAccount(ClaimsPrincipal) > AccountsAccess
  AccountsAccess -> AccountsResource /*  Account IAccountsResource.GetOrCreateUserAccount(UserId) */
}

/* HttpContext DTO is provided by ASP.NET Core */
/* ClaimsPrincipal DTO is provided by System.Security.Claims */

DTO AppUserAccount {
  Guid UserId
  /*TODO: Define this*/
}

DTO Account {
  Guid UserId
  AccountOrganizationAccess[] Organizations
}

DTO AccountOrganizationAccess {
  Guid OrganizationId
  AccountLocationAccess[] Locations
}

DTO AccountLocationAccess {
  Guid LocationId
  Guid PersonId
  string[] Roles
}

Activity "UC-Pr-1: Open Location" {
  |c|Client
  |s|System
  |c|
  start
  :Sign In
    ""<color:#777>[UC-Me-1]</color>"";
  :Select Organization;
  :Select Location;
  |s|
  :Authorize User Access in Context
    ""<color:#777>[SUB-Pr-1]</color>"";
  :Load Location Data; 
  'NOTE: This will also be the Process Manager
  |c|
  :View Location Dashboard;
  stop
}

UseCase "UC-Pr-1: Open Location" {
  AppClient -> ProcessManager
  ProcessManager -> EvaluationEngine

}

UseCase "SUB-Pr-1: Authorize User Access in Context" {
  ProcessManager - ContextPermissions IEvaluationEngine.AuthorizeUserAccess(AuthorizationContext) > EvaluationEngine
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
}

DTO AuthorizationContext { }

/*BUG: DTO inheritance is not supported*/
/*DTO GlobalAuthorizationContext : AuthorizationContext {}*/

Activity "UC-Pr-2: View Communities List" {
  |c|Client
  |s|System
  |c|
  start
  :Open Location
    ""<color:#777>[UC-Pr-1]</color>"";
  :Select Communities Screen;
  |s|
  :List Communities for User;
  |c|
  :Display Communities List;
  stop
}

UseCase "UC-Pr-2: View Families List in Location" {
  AppClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

UseCase "UC-Pr-3: View Families List in Organization" {
  AnalyticsClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  SupportClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

UseCase "UC-Pr-4: View Communities List in Location" {
  AppClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

UseCase "UC-Pr-5: View Communities List in Organization" {
  AnalyticsClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  SupportClient - RetrieveRecordsResponse IProcessManager.RetrieveRecords(RetrieveRecordsRequest) > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(OrganizationAuthorizationContext) > EvaluationEngine
  ProcessManager - RecordsResponse IRecordsAccess.Filter(RecordsCriteria) > RecordsAccess -> RecordsResource
  ProcessManager - RecordsResponse ITransformationEngine.DiscloseRecords(RecordsDisclosureRequest) > TransformationEngine
  ProcessManager -> AuditAccess -> AuditResource
}

DTO RetrieveRecordsRequest {
  DisclosureMethod Method
  RecordType? RecordType
  Guid? OrganizationId
  Guid? LocationId
  Filters? Filters
}

DTO Filters { }

DTO RetrieveRecordsResponse {
  Community[] Communities
  Family[] Families
  Organization[] Organizations
}

DTO Family {
  Guid Id,
  Guid LocationId,
  string Name,
  string? PrimaryEmail,
  string? PrimaryPhoneNumber,
  Address? PrimaryAddress,
  string? HomeChurch
}

DTO Address {
  string? Line1,
  string? Line2,
  string? City,
  string? Country,
  string? State,
  string? PostalCode
}

DTO Community {
    Guid Id,
    Guid LocationId,
    string Name
}

DTO Organization {}

DTO ContextualPermissions {
  AuthorizationContext Context
  string[] AllowedActions
  Account Account,
}

DTO RecordsDisclosureRequest {
  ContextualPermissions Permissions
  DisclosureMethod Method
  RecordsAccess.RecordsResponse Records
}

DTO RecordsCriteria {
  ContextualPermissions Permissions
  DisclosureMethod Method
  RecordType? RecordType
  Guid? OrganizationId
  Guid? LocationId
}

DTO RecordsResponse {
  Community[] Communities
  Family[] Families
  Organization[] Organizations
}

UseCase "UC-Pr-6: Create Referral" {
  AppClient - SubmitRecordsResponse IProcessManager.SubmitRecords(SubmitRecordsRequest) > ProcessManager
    ProcessManager -> WorkflowsAccess -> WorkflowsResource /* what if RecordsAccess decides the user doesn't have the right permissions, and StoreReferral doesn't happen? */
    ProcessManager - RecordOperationsResponse IRecordsAccess.Execute(RecordOperationsRequest) > RecordsAccess
      RecordsAccess -> SecurityUtility 
      RecordsAccess -> PoliciesResource
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO RecordOperation { } /* This can inclue create/change/propose change/commit change/cancel change */

DTO RecordOperationsRequest {
    ClaimsPrincipal 
    RecordOperation[] Operations
}

DTO SubmitRecordsRequest {
    Record[] Records
}

DTO CreateReferral /* : RecordOperation */ {
    string Comments
    Guid? FamilyId
}

DTO Record {
  Guid Id
}

DTO Referral /* : Record */ {
    string Comments
    Guid? FamilyId
}

DTO RecordOperationsResponse {
    Record[] Records
}

DTO SubmitRecordsResponse {
    Record[] Records
}

UseCase "UC-Pr-7: Link Referral to Family" {
  AppClient - SubmitRecordsResponse IProcessManager.SubmitRecords(SubmitRecordsRequest) > ProcessManager
    ProcessManager -> WorkflowsAccess -> WorkflowsResource
    ProcessManager - RecordOperationsResponse IRecordsAccess.Execute(RecordOperationsRequest) > RecordsAccess
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource  
    ProcessManager -:q> CommunicationManager
}

/* 
===== Implementation draft 1 - RA handles the jsonpatch generation

Example SubmitRecordsRequest:

[{
  "ReferralId": "1111-1111-111",
  "Comments": "Initial contact via phone",
  "FamilyId": "2222-2222-222"
}]

if record has ReferralId, it's a change.

var recordOperationsRequest = [
  {
    "OperationType": Operations.Change,
    "DesiredRecordState": {
      "ReferralId": "1111-1111-111",
      "Comments": "Initial contact via phone",
      "FamilyId": "2222-2222-222"
    }
  }
]

recordsAccess.Execute(recordOperationsRequest);

// Check user's permissions. (This might need to be done after generating the jsonpatch, because depending on 
// the paths beind edited the user might be required different permissions?)

// Load current record from store.

// Generate json-patch.

[
  {
    "op": "add",
    "path": "/FamilyId",
    "value": "2222-2222-222"
  }
]

// Apply json-patch.

// Store patched record and append json-patch to log.

===== Implementation draft 2 - Client sends the jsonpatch (what if it's create operation?)

Example SubmitRecordsRequest:

[{
  "ReferralId": "1111-1111-111",
  "Patch":   [{
    "op": "add",
    "path": "/FamilyId",
    "value": "2222-2222-222"
  }]
}]

var recordOperationsRequest = [
  {
    "OperationType": Operations.Change,
    "TargetRecordId": "1111-1111-111",
    "Patch": [{
      "op": "add",
      "path": "/FamilyId",
      "value": "2222-2222-222"
    }]
  }
]

recordsAccess.Execute(recordOperationsRequest);

// Check user's permissions.

// Apply json-patch.

// Store patched record and append json-patch to log.

===== Implementation draft 3 - PM handles the jsonpatch generation


Example SubmitRecordsRequest:

[{
  "ReferralId": "1111-1111-111",
  "Comments": "Initial contact via phone",
  "FamilyId": "2222-2222-222"
}]

if record has ReferralId, it's a change.

var recordOperationsRequest = [
  {
    "OperationType": Operations.Change,
    "DesiredRecordState": {
      "ReferralId": "1111-1111-111",
      "Comments": "Initial contact via phone",
      "FamilyId": "2222-2222-222"
    }
  }
]

// Get existing record.
recordsAccess.Filter(...);

// Generate json-patch.
var recordOperationsRequest = [
  {
    "OperationType": Operations.Change,
    "TargetRecordId": "1111-1111-111",
    "Patch": [{
      "op": "add",
      "path": "/FamilyId",
      "value": "2222-2222-222"
    }]
  }
]
recordsAccess.Execute(recordOperationsRequest);

// Check user's permissions.

// Apply json-patch.

// Store patched record and append json-patch to log.


*/

UseCase "UC-Pr-8: Unlink Referral from Family" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess
    RecordsAccess -> SecurityUtility
    RecordsAccess -> RecordsResource
  ProcessManager -> EvaluationEngine
    EvaluationEngine -> PoliciesAccess -> PoliciesResource
  ProcessManager -> TransformationEngine
}

UseCase "UC-Pr-9: View Communities List" {
@@@
### Prerequisites
- `ContextPermissions` for 'All Communities' context
@@@
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > RecordsAccess
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
} 

UseCase "UC-Pr-10: Track Child Location" {
  AppClient - CreateChildLocationEntryResponse IProcessManager.SubmitRecords(CreateChildLocationEntryRequest) > ProcessManager
    ProcessManager - StoreChildLocationEntryResponse IRecordsAccess.Execute(ChildLocationEntry) > RecordsAccess 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO CreateChildLocationEntryResponse { }

DTO CreateChildLocationEntryRequest {
    Guid ArrangementId,
    Guid ChildPersonId,
    Guid FamilyId,
    DateTime StartedAtUtc,
    ChildLocationPlan ChildcarePlan,
    DateTime? EnededAtUtc,
    TimeSpan Duration
}

DTO StoreChildLocationEntryResponse { }

DTO ChildLocationEntry {
    Guid ArrangementId,
    Guid ChildPersonId,
    Guid FamilyId,
    DateTime StartedAtUtc,
    ChildLocationPlan ChildcarePlan,
    DateTime? EnededAtUtc,
    TimeSpan Duration
}

UseCase "UC-Pr-11: Create New Arrangement" {
  AppClient - CreateArrangementResponse IProcessManager.SubmitRecords(CreateArrangementRequest) > ProcessManager
    ProcessManager - StoreArrangementEntryResponse IRecordsAccess.Execute(ArrangementEntry) > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO CreateArrangementResponse { }

DTO CreateArrangementRequest { }

DTO StoreArrangementEntryResponse { }

DTO ArrangementEntry {
    Guid Id,
    string ArrangementType,
    bool Active,
    DateTime RequestedAtUtc,
    DateTime? StartedAtUtc,
    DateTime? EndedAtUtc,
    DateTime? CancelledAtUtc,
    DateTime? PlannedStartUtc,
    DateTime? PlannedEndUtc,
    Guid PartneringFamilyPersonId,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements,
    ImmutableList<IndividualVolunteerAssignment> IndividualVolunteerAssignments,
    ImmutableList<FamilyVolunteerAssignment> FamilyVolunteerAssignments,
    ImmutableSortedSet<ChildLocationHistoryEntry> ChildLocationHistory,
    ImmutableSortedSet<ChildLocationHistoryEntry> ChildLocationPlan,
    string? Comments,
    string? Reason
}

DTO CompletedRequirementInfo {
    Guid UserId,
    DateTime TimestampUtc,
    Guid CompletedRequirementId,
    string RequirementName,
    DateTime CompletedAtUtc,
    DateTime? ExpiresAtUtc,
    Guid? UploadedDocumentId,
    Guid? NoteId
}

DTO ExemptedRequirementInfo {
    Guid UserId,
    DateTime TimestampUtc,
    string RequirementName,
    DateTime? DueDate,
    string AdditionalComments,
    DateTime? ExemptionExpiresAtUtc
}

DTO IndividualVolunteerAssignment {
    Guid FamilyId,
    Guid PersonId,
    string ArrangementFunction,
    string? ArrangementFunctionVariant,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements
}

DTO FamilyVolunteerAssignment {
    Guid FamilyId,
    string ArrangementFunction,
    string? ArrangementFunctionVariant,
    ImmutableList<CompletedRequirementInfo> CompletedRequirements,
    ImmutableList<ExemptedRequirementInfo> ExemptedRequirements
}

DTO ChildLocationHistoryEntry {
    Guid UserId,
    DateTime TimestampUtc,
    Guid ChildLocationFamilyId,
    Guid ChildLocationReceivingAdultId,
    ChildLocationPlan Plan,
    Guid? NoteId
}

UseCase "UC-Pr-12: Create Family" {
  AppClient - CreateFamilyResponse IProcessManager.SubmitRecords(CreateFamilyRequest) > ProcessManager
    ProcessManager - StoreFamilyResponse IRecordsAccess.Execute(Family) > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO CreateFamilyResponse { }

DTO CreateFamilyRequest { }

DTO StoreFamilyResponse { }

UseCase "UC-Pr-13: Delete Family" {
  AppClient - ArchiveFamilyResponse IProcessManager.SubmitRecords(ArchiveRecordRequest) > ProcessManager
    ProcessManager - ArchiveResponse IRecordsAccess.Execute(RecordArchiveCriteria) > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* This is a generic type */
DTO ArchiveRecordRequest {
  RecordType RecordType, /* Enum with Family, Community, Person... */
  RecordParameters RecordParameters 
}

DTO RecordParameters { }

DTO FamilyRecordParameters /* : RecordParameters */ {
    Guid FamilyId
}

UseCase "UC-Pr-14: Add Adult" {
  AppClient - AddAdultResponse IProcessManager.SubmitRecords(AddFamilyMemberRequest) > ProcessManager
    ProcessManager - StoreResponse IRecordsAccess.Execute(Person) > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO AddFamilyMemberRequest {
  Person Person,
  Guid FamilyId
  FamilyAdultRelationshipInfo RelationToFamily
}

DTO Person {
  Guid PersonId,
  string FirstName,
  string LastName,
  Gender? Gender,
  Age? Age,
  string? Ethnicity,
  ImmutableList<Address> Addresses,
  Guid? CurrentAddressId,
  ImmutableList<PhoneNumber> PhoneNumbers,
  Guid? PreferredPhoneNumberId,
  ImmutableList<EmailAddress> EmailAddresses,
  Guid? PreferredEmailAddressId,
  string? Concerns,
  string? Notes
}

DTO AddPersonToFamily {
  Guid PersonId,
  Guid FamilyId,
  FamilyAdultRelationshipInfo RelationToFamily
}


UseCase "UC-Pr-15: Add Child" {
  AppClient - AddAdultResponse IProcessManager.SubmitRecords(AddFamilyMemberRequest) > ProcessManager
    ProcessManager - StoreResponse IRecordsAccess.Execute(Person) > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO AddChildToFamily {
  Guid PersonId,
  Guid FamilyId,
  FamilyAdultRelationshipInfo RelationToFamily
}

UseCase "UC-Pr-16: Delete Person" {
  AppClient - IProcessManager.SubmitRecords(ArchivePersonRequest) > ProcessManager
    ProcessManager - IRecordsAccess.Execute(RecordCriteria) > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO ArchivePersonRequest {
    Guid PersonId
}

DTO ArchivePersonCriteria {
    Guid PersonId
}

UseCase "UC-Pr-17: Move Person to Another Family" {
  AppClient - IProcessManager.SubmitRecords(ChangePersonFamilyRequest) > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > RecordsAccess 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

DTO ChangePersonFamilyRequest {
    Guid PersonId,
    Guid OriginalFamilyId,
    Guid TargetFamilyId,
}

UseCase "UC-Pr-18: Read Family Documents" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

UseCase "UC-Pr-19: Upload Family Documents" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource /* TODO: Do we store a reference for the file? Should it be done after calling FileStoreUtility? */
      RecordsAccess - IFileStoreUtility.Upload() > FileStoreUtility
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

UseCase "UC-Pr-20: Archive Family Documents" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

UseCase "UC-Pr-21: View Family Document Metadata" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Me-1: Invite Person User" {
  AppClient - IMembershipManager.InviteUser() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager -> AccountsAccess -> AccountsResource
}

/* TODO: account or records? */
UseCase "UC-Me-2: Edit Person User Protected Roles" {
  AppClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Execute() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "UC-Me-3: Edit Person User Standard Roles" {
  AppClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Execute() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "UC-Me-4: View Person User Login Info" {
  /* Feel like it should be similar to IProcessManager.RetrieveRecords()? */
  AppClient - IMembershipManager.FindAccount() > MembershipManager
  MembershipManager - IAccountsAccess.Filter() > AccountsAccess -> AccountsResource
  MembershipManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IIdentityProviderUtility.GetUserLoginInfo() > IdentityProviderUtility
}

/* TODO: check */
UseCase "UC-Pr-21: View Volunteers List" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
/* Old name: "Access Partnering Families Screen" */
UseCase "UC-Pr-22: View Partnering Families List" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-23: Access Settings Screen" {
  AppClient -> ProcessManager
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  ProcessManager -> RecordsAccess -> RecordsResource
}

/* TODO: check (this isn't implemented currently?) */
UseCase "UC-Me-5: Edit Roles" {
  AppClient - IMembershipManager.ChangePersonRoles() > MembershipManager
  MembershipManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  MembershipManager - IAccountsAccess.Execute() > AccountsAccess -> AccountsResource
}

/* TODO: check */
UseCase "UC-Pr-24: View Family Custom Fields" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-25: View Family History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-26: View Person Concerns" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-27: View Person Notes" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-28: View Person Contact Info" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Filter() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-29: Edit Family Info" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-30: Edit Person Concerns" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-31: Edit Person Notes" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-32: Edit Person Contact Info" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-33: Add / Edit Draft Notes" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
    ProcessManager - IRecordsAccess.Execute() > 
      RecordsAccess -> SecurityUtility
      RecordsAccess -> RecordsResource
    ProcessManager -> EvaluationEngine
      EvaluationEngine -> PoliciesAccess -> PoliciesResource
    ProcessManager -> TransformationEngine
}

/* TODO: check */
UseCase "UC-Pr-34: Discard Draft Notes" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-35: Approve Notes" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-36: View All Notes" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-37: View Approval Status" {  
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-38: Edit Approval Requirement Completion" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-39: Edit Approval Requirement Exemption" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-40: Edit Volunteer Role Participation" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-41: View Approval Progress" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-42: View Approval History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-43: Activate Volunteer Family" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-44: Edit Referral" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-45: Close Referral" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-46: View Referral Custom Fields" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-47: View Referral Comments" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-48: View Referral Progress" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-49: Edit Referral Requirement Completion" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-50: Edit Referral Requirement Exemption" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-51: View Referral History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-52: Create Arrangement" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-53: Edit Arrangement" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-54: View Assignments" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-55: Edit Assignments" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-56: View Arrangement Progress" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-57: Create Community" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-58: Edit Community" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-59: Archive Community" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-60: Edit Community Member Families" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-61: Edit Community Role Assignments" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-62: View Community Document Metadata" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-63: Read Community Documents (Future)" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  ProcesssManager -> FileStoreUtility
}

/* TODO: check */
UseCase "UC-Pr-64: Upload Community Documents" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IFileStoreUtility.Upload() > FileStoreUtility
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-65: Archive Community Documents" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-66: Open my family screen" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-67: View all families" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-68: View soft deleted document" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-69: Restore a soft deleted document" {
  AppClient - IProcessManager.RestoreDocuments() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-70: Set document visibility" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-71: Set note visibility" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-72: Edit Arrangement Requirement Completion" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-73: Edit Arrangement Requirement Exemption" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-74: Delete Arrangement" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-75: View Child Location History" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

/* TODO: check */
UseCase "UC-Pr-76: Send Bulk SMS" {
  AppClient - ICommunicationManager.Notify() > CommunicationManager
  CommunicationManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  CommunicationManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
  CommunicationManager - ITelephonyUtility.Notify() > TelephonyUtility
}

/* Referrals/Cases split */

UseCase "UC-Pr-77: View Referrals" {
  AppClient - IProcessManager.RetrieveRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Filter() > RecordsAccess -> RecordsResource
}

UseCase "UC-Pr-78: Link Referral to Family" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager -> WorkflowsAccess -> WorkflowsResource
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
  ProcessManager -:q> CommunicationManager
}

UseCase "UC-Pr-79: Unlink Referral from Family " {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

UseCase "UC-Pr-80: Close Referral  (after split)" {
  AppClient - IProcessManager.ArchiveRecord() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

UseCase "UC-Pr-81: Open Case" {
  AppClient - OpenCaseResponse IProcessManager.SubmitRecords(OpenCaseRequest) > ProcessManager
  ProcessManager - IEvaluationEngine.AuthorizeUserAccess() > EvaluationEngine
  EvaluationEngine -> AccountsAccess -> AccountsResource
  EvaluationEngine -> RecordsAccess -> RecordsResource
  EvaluationEngine -> PoliciesAccess -> PoliciesResource
  ProcessManager - IWorkflowsAccess.Instantiate() > WorkflowsAccess -> WorkflowsResource
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
  ProcessManager - ICommunicationManager.Notify():q> CommunicationManager
}

DTO OpenCaseResponse {}

DTO OpenCaseRequest {}

UseCase "UC-Pr-82: Link Referral to Case" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

UseCase "UC-Pr-83: Unlink Referral from Case" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}

UseCase "UC-Pr-84: Close Case" {
  AppClient - IProcessManager.SubmitRecords() > ProcessManager
  ProcessManager - ContextualPermissions IEvaluationEngine.CalculateContextualPermissions(LocationAuthorizationContext) > EvaluationEngine
  ProcessManager - IRecordsAccess.Execute() > RecordsAccess -> RecordsResource
}